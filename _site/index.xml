<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Econometrics and Free Software</title>
<link>https://b-rodrigues.github.io/</link>
<atom:link href="https://b-rodrigues.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.37</generator>
<lastBuildDate>Wed, 08 Jan 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>github pages setup for this website</title>
  <link>https://b-rodrigues.github.io/posts/2025-01-09-github_pages_setup_with_quarto.html</link>
  <description><![CDATA[ 




<section id="desired-setup" class="level1">
<h1>Desired setup</h1>
<p>Setting up a Quarto website on github pages is fairly straightforward: <a href="https://quarto.org/docs/publishing/github-pages.html">you just need to follow the docs</a>! But in case you need some help, I’m sharing here all the steps I’ve went through.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</section>

 ]]></description>
  <category>quarto</category>
  <category>github pages</category>
  <guid>https://b-rodrigues.github.io/posts/2025-01-09-github_pages_setup_with_quarto.html</guid>
  <pubDate>Wed, 08 Jan 2025 23:00:00 GMT</pubDate>
</item>
<item>
  <title>huhu</title>
  <link>https://b-rodrigues.github.io/posts/2024-12-09-huhu.html</link>
  <description><![CDATA[ 




<section id="undesired-setup" class="level1">
<h1>Undesired setup</h1>
<p>Setting up a Quarto website on github pages is fairly straightforward: <a href="https://quarto.org/docs/publishing/github-pages.html">you just need to follow the docs</a>! But in case you need some help, I’m sharing here all the steps I’ve went through.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</section>

 ]]></description>
  <category>quarto</category>
  <category>github pages</category>
  <guid>https://b-rodrigues.github.io/posts/2024-12-09-huhu.html</guid>
  <pubDate>Sun, 08 Dec 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>November blog post</title>
  <link>https://b-rodrigues.github.io/posts/2024-11-09-haha.html</link>
  <description><![CDATA[ 




<section id="undesired-setup" class="level1">
<h1>Undesired setup</h1>
<p>Setting up a Quarto website on github pages is fairly straightforward: <a href="https://quarto.org/docs/publishing/github-pages.html">you just need to follow the docs</a>! But in case you need some help, I’m sharing here all the steps I’ve went through.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</section>

 ]]></description>
  <category>quarto</category>
  <category>github pages</category>
  <guid>https://b-rodrigues.github.io/posts/2024-11-09-haha.html</guid>
  <pubDate>Fri, 08 Nov 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Lesser known dplyr tricks</title>
  <link>https://b-rodrigues.github.io/posts/2017-03-08-lesser_known_tricks.html</link>
  <description><![CDATA[ 




<p>
In this blog post I share some lesser-known (at least I believe they are) tricks that use mainly functions from <code>dplyr</code>.
</p>
<section id="removing-unneeded-columns" class="level2">
<h2 class="anchored" data-anchor-id="removing-unneeded-columns">
Removing unneeded columns
</h2>
<p>
Did you know that you can use <code>-</code> in front of a column name to remove it from a data frame?
</p>
<pre class="r"><code>mtcars %&gt;% 
    select(-disp) %&gt;% 
    head()</code></pre>
<pre><code>##                    mpg cyl  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6 105 2.76 3.460 20.22  1  0    3    1</code></pre>
</section>
<section id="re-ordering-columns" class="level2">
<h2 class="anchored" data-anchor-id="re-ordering-columns">
Re-ordering columns
</h2>
<p>
Still using <code>select()</code>, it is easy te re-order columns in your data frame:
</p>
<pre class="r"><code>mtcars %&gt;% 
    select(cyl, disp, hp, everything()) %&gt;% 
    head()</code></pre>
<pre><code>##                   cyl disp  hp  mpg drat    wt  qsec vs am gear carb
## Mazda RX4           6  160 110 21.0 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag       6  160 110 21.0 3.90 2.875 17.02  0  1    4    4
## Datsun 710          4  108  93 22.8 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive      6  258 110 21.4 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout   8  360 175 18.7 3.15 3.440 17.02  0  0    3    2
## Valiant             6  225 105 18.1 2.76 3.460 20.22  1  0    3    1</code></pre>
<p>
As its name implies <code>everything()</code> simply means all the other columns.
</p>
</section>
<section id="renaming-columns-with-rename" class="level2">
<h2 class="anchored" data-anchor-id="renaming-columns-with-rename">
Renaming columns with <code>rename()</code>
</h2>
<pre class="r"><code>mtcars &lt;- rename(mtcars, spam_mpg = mpg)
mtcars &lt;- rename(mtcars, spam_disp = disp)
mtcars &lt;- rename(mtcars, spam_hp = hp)

head(mtcars)</code></pre>
<pre><code>##                   spam_mpg cyl spam_disp spam_hp drat    wt  qsec vs am
## Mazda RX4             21.0   6       160     110 3.90 2.620 16.46  0  1
## Mazda RX4 Wag         21.0   6       160     110 3.90 2.875 17.02  0  1
## Datsun 710            22.8   4       108      93 3.85 2.320 18.61  1  1
## Hornet 4 Drive        21.4   6       258     110 3.08 3.215 19.44  1  0
## Hornet Sportabout     18.7   8       360     175 3.15 3.440 17.02  0  0
## Valiant               18.1   6       225     105 2.76 3.460 20.22  1  0
##                   gear carb
## Mazda RX4            4    4
## Mazda RX4 Wag        4    4
## Datsun 710           4    1
## Hornet 4 Drive       3    1
## Hornet Sportabout    3    2
## Valiant              3    1</code></pre>
</section>
<section id="selecting-columns-with-a-regexp" class="level2">
<h2 class="anchored" data-anchor-id="selecting-columns-with-a-regexp">
Selecting columns with a regexp
</h2>
<p>
It is easy to select the columns that start with “spam” with some helper functions:
</p>
<pre class="r"><code>mtcars %&gt;% 
    select(contains("spam")) %&gt;% 
    head()</code></pre>
<pre><code>##                   spam_mpg spam_disp spam_hp
## Mazda RX4             21.0       160     110
## Mazda RX4 Wag         21.0       160     110
## Datsun 710            22.8       108      93
## Hornet 4 Drive        21.4       258     110
## Hornet Sportabout     18.7       360     175
## Valiant               18.1       225     105</code></pre>
<p>
take also a look at <code>starts_with()</code>, <code>ends_with()</code>, <code>contains()</code>, <code>matches()</code>, <code>num_range()</code>, <code>one_of()</code> and <code>everything()</code>.
</p>
</section>
<section id="create-new-columns-with-mutate-and-if_else" class="level2">
<h2 class="anchored" data-anchor-id="create-new-columns-with-mutate-and-if_else">
Create new columns with <code>mutate()</code> and <code>if_else()</code>
</h2>
<pre class="r"><code>mtcars %&gt;% 
    mutate(vs_new = if_else(
        vs == 1, 
        "one", 
        "zero", 
        NA_character_)) %&gt;% 
    head()</code></pre>
<pre><code>##   spam_mpg cyl spam_disp spam_hp drat    wt  qsec vs am gear carb vs_new
## 1     21.0   6       160     110 3.90 2.620 16.46  0  1    4    4   zero
## 2     21.0   6       160     110 3.90 2.875 17.02  0  1    4    4   zero
## 3     22.8   4       108      93 3.85 2.320 18.61  1  1    4    1    one
## 4     21.4   6       258     110 3.08 3.215 19.44  1  0    3    1    one
## 5     18.7   8       360     175 3.15 3.440 17.02  0  0    3    2   zero
## 6     18.1   6       225     105 2.76 3.460 20.22  1  0    3    1    one</code></pre>
<p>
You might want to create a new variable conditionally on several values of another column:
</p>
<pre class="r"><code>mtcars %&gt;% 
    mutate(carb_new = case_when(.$carb == 1 ~ "one",
                                .$carb == 2 ~ "two",
                                .$carb == 4 ~ "four",
                                 TRUE ~ "other")) %&gt;% 
    head(15)</code></pre>
<pre><code>##    spam_mpg cyl spam_disp spam_hp drat    wt  qsec vs am gear carb
## 1      21.0   6     160.0     110 3.90 2.620 16.46  0  1    4    4
## 2      21.0   6     160.0     110 3.90 2.875 17.02  0  1    4    4
## 3      22.8   4     108.0      93 3.85 2.320 18.61  1  1    4    1
## 4      21.4   6     258.0     110 3.08 3.215 19.44  1  0    3    1
## 5      18.7   8     360.0     175 3.15 3.440 17.02  0  0    3    2
## 6      18.1   6     225.0     105 2.76 3.460 20.22  1  0    3    1
## 7      14.3   8     360.0     245 3.21 3.570 15.84  0  0    3    4
## 8      24.4   4     146.7      62 3.69 3.190 20.00  1  0    4    2
## 9      22.8   4     140.8      95 3.92 3.150 22.90  1  0    4    2
## 10     19.2   6     167.6     123 3.92 3.440 18.30  1  0    4    4
## 11     17.8   6     167.6     123 3.92 3.440 18.90  1  0    4    4
## 12     16.4   8     275.8     180 3.07 4.070 17.40  0  0    3    3
## 13     17.3   8     275.8     180 3.07 3.730 17.60  0  0    3    3
## 14     15.2   8     275.8     180 3.07 3.780 18.00  0  0    3    3
## 15     10.4   8     472.0     205 2.93 5.250 17.98  0  0    3    4
##    carb_new
## 1      four
## 2      four
## 3       one
## 4       one
## 5       two
## 6       one
## 7      four
## 8       two
## 9       two
## 10     four
## 11     four
## 12    other
## 13    other
## 14    other
## 15     four</code></pre>
<p>
Mind the <code>.<img src="https://latex.codecogs.com/png.latex?%3C/code%3E%20before%20the%20variable%20%3Ccode%3Ecarb%3C/code%3E.%20There%20is%20a%20%3Ca%20href=%22https://github.com/hadley/dplyr/issues/1965%22%3Egithub%20issue%3C/a%3E%0Aabout%20this,%20and%20it%20is%20already%20fixed%20in%20the%20development%20version%20of%20%3Ccode%3Edplyr%3C/code%3E,%20which%20means%20that%20in%20the%20next%20version%0Aof%20%3Ccode%3Edplyr%3C/code%3E,%20%3Ccode%3Ecase_when()%3C/code%3E%20will%20work%20as%20any%20other%20specialized%20%3Ccode%3Edplyr%3C/code%3E%20function%20inside%20%3Ccode%3Emutate()%3C/code%3E.%3C/p%3E%0A%3C/div%3E%0A%3Cdiv%20id=%22apply-a-function-to-certain-columns-only-by-rows%22%20class=%22section%20level2%22%3E%0A%3Ch2%3EApply%20a%20function%20to%20certain%20columns%20only,%20by%20rows%3C/h2%3E%0A%3Cpre%20class=%22r%22%3E%3Ccode%3Emtcars%20%25&amp;gt;%25%0A%20%20%20%20select(am,%20gear,%20carb)%20%25&amp;gt;%25%0A%20%20%20%20purrr::by_row(sum,%20.collate%20=%20&amp;quot;cols&amp;quot;,%20.to%20=%20&amp;quot;sum_am_gear_carb&amp;quot;)%20-&amp;gt;%20mtcars2%0Ahead(mtcars2)%3C/code%3E%3C/pre%3E%0A%3Cp%3EFor%20this,%20I%20had%20to%20use%20%3Ccode%3Epurrr%3C/code%3E%E2%80%99s%20%3Ccode%3Eby_row()%3C/code%3E%20function.%20You%20can%20then%20add%20this%20column%20to%20your%20original%20data%20frame:%3C/p%3E%0A%3Cpre%20class=%22r%22%3E%3Ccode%3Emtcars%20&amp;lt;-%20cbind(mtcars,%20&amp;quot;sum_am_gear_carb&amp;quot;%20=%20mtcars2">sum_am_gear_carb) head(mtcars)</code>

</p><pre><code>##                   spam_mpg cyl spam_disp spam_hp drat    wt  qsec vs am
## Mazda RX4             21.0   6       160     110 3.90 2.620 16.46  0  1
## Mazda RX4 Wag         21.0   6       160     110 3.90 2.875 17.02  0  1
## Datsun 710            22.8   4       108      93 3.85 2.320 18.61  1  1
## Hornet 4 Drive        21.4   6       258     110 3.08 3.215 19.44  1  0
## Hornet Sportabout     18.7   8       360     175 3.15 3.440 17.02  0  0
## Valiant               18.1   6       225     105 2.76 3.460 20.22  1  0
##                   gear carb sum_am_gear_carb
## Mazda RX4            4    4                9
## Mazda RX4 Wag        4    4                9
## Datsun 710           4    1                6
## Hornet 4 Drive       3    1                4
## Hornet Sportabout    3    2                5
## Valiant              3    1                4</code></pre>
</section> ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-03-08-lesser_known_tricks.html</guid>
  <pubDate>Tue, 07 Mar 2017 23:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use jailbreakr</title>
  <link>https://b-rodrigues.github.io/posts/2017-02-17-how_to_use_jailbreakr.html</link>
  <description><![CDATA[ 




<section id="what-is-jailbreakr" class="level2">
<h2 class="anchored" data-anchor-id="what-is-jailbreakr">
What is <code>jailbreakr</code>
</h2>
<p>
The <code>jailbreakr</code> package is probably one of the most interesting packages I came across recently. This package makes it possible to extract messy data from spreadsheets. What is meant by messy? I am sure you already had to deal with spreadsheets that contained little tables inside a single sheet for example. As far as I know, there is no simple way of extracting these tables without having to fiddle around a lot. This is now over with <code>jailbreakr</code>. Well not entirely, because <code>jailbreakr</code> is still in development, but it works well already. If you want to know more about the planned features, you can watch the following <a href="https://channel9.msdn.com/Events/useR-international-R-User-conference/useR2016/jailbreakr-Get-out-of-Excel-free">video</a> by Jenny Bryan, one of the package’s authors.
</p>
</section>
<section id="installation-and-data" class="level2">
<h2 class="anchored" data-anchor-id="installation-and-data">
Installation and data
</h2>
<p>
You will have to install the package from Github, as it is not on CRAN yet. <a href="https://github.com/rsheets/jailbreakr">Here is the Github link</a>. To install the package, just run the following commands in an R console:
</p>
<pre class="r"><code>devtools::install_github(c("hadley/xml2",
                           "rsheets/linen",
                           "rsheets/cellranger",
                           "rsheets/rexcel",
                           "rsheets/jailbreakr"))</code></pre>
<p>
If you get the following error:
</p>
<pre><code>devtools::install_github("hadley/xml2")
Downloading GitHub repo hadley/xml2@master
from URL https://api.github.com/repos/hadley/xml2/zipball/master
Error in system(full, intern = quiet, ignore.stderr = quiet, ...) :
    error in running command</code></pre>
<p>
and if you’re on a GNU+Linux distribution try to run the following command:
</p>
<pre class="r"><code>options(unzip = "internal")</code></pre>
<p>
and then run <code>github_install()</code> again.
</p>
<p>
As you can see, you need some other packages to make it work. Now we are going to get some data. We are going to download some time series from the European Commission, data I had to deal with recently. Download the data by clicking <a href="http://ec.europa.eu/economy_finance/db_indicators/surveys/documents/series/nace2_ecfin_1701/investment_total_nsa_nace2.zip">here</a> and look for the spreadsheet titled <code>Investment_total_factors_nace2.xlsx</code>. The data we are interested in is on the second sheet, named <code>TOT</code>. You cannot import this sheet easily into R because there are four tables on the same sheet. Let us use <code>jailbreakr</code> to get these tables out of the sheet and into nice, tidy, data frames.
</p>
</section>
<section id="jailbreakr-to-the-rescue" class="level2">
<h2 class="anchored" data-anchor-id="jailbreakr-to-the-rescue">
<code>jailbreakr</code> to the rescue
</h2>
<p>
The first step is to read the data in. For this, we are going to use the <code>rexcel</code> package, which is also part of the <code>rsheets</code> organization on Github that was set up by Jenny Brian and Rich Fitzjohn, the authors of these packages. <code>rexcel</code> imports the sheet you want but not in a way that is immediately useful to you. It just gets the sheet into R, which makes it then possible to use <code>jailbreakr</code>’s magic on it. First, let’s import the packages we need:
</p>
<pre class="r"><code>library("rexcel")
library("jailbreakr")</code></pre>
<p>
We need to check which sheet to import. There are two sheets, and we want to import the one called <code>TOT</code>, the second one. But is it really the second one? I have noticed that sometimes, there are hidden sheets which makes importing the one you want impossible. So first, let use use another package, <code>readxl</code> and its function <code>excel_sheets()</code> to make sure we are extracting the sheet we really need:
</p>
<pre class="r"><code>sheets &lt;- readxl::excel_sheets(path_to_data)

tot_sheet &lt;- which(sheets == "TOT")

print(tot_sheet)</code></pre>
<pre><code>## [1] 3</code></pre>
<p>
As you can see, the sheet we want is not the second, but the third! Let us import this sheet into R now (this might take more time than you think; on my computer it takes around 10 seconds):
</p>
<pre class="r"><code>my_sheet &lt;- rexcel_read(path_to_data, sheet = tot_sheet)</code></pre>
<p>
Now we can start using <code>jailbreakr</code>. The function <code>split_sheet()</code> is the one that splits the sheet into little tables:
</p>
<pre class="r"><code>tables &lt;- split_sheet(my_sheet)
str(tables)</code></pre>
<pre><code>## List of 4
##  $ :Classes 'worksheet_view', 'R6' &lt;worksheet_view&gt;
##   Public:
##     cells: active binding
##     clone: function (deep = FALSE) 
##     data: NULL
##     dim: 34 28
##     header: NULL
##     idx: list
##     initialize: function (sheet, xr, filter, header, data) 
##     lookup: active binding
##     lookup2: active binding
##     merged: active binding
##     sheet: worksheet, R6
##     table: function (col_names = TRUE, ...) 
##     values: function () 
##     xr: cell_limits, list 
##  $ :Classes 'worksheet_view', 'R6' &lt;worksheet_view&gt;
##   Public:
##     cells: active binding
##     clone: function (deep = FALSE) 
##     data: NULL
##     dim: 33 28
##     header: NULL
##     idx: list
##     initialize: function (sheet, xr, filter, header, data) 
##     lookup: active binding
##     lookup2: active binding
##     merged: active binding
##     sheet: worksheet, R6
##     table: function (col_names = TRUE, ...) 
##     values: function () 
##     xr: cell_limits, list 
##  $ :Classes 'worksheet_view', 'R6' &lt;worksheet_view&gt;
##   Public:
##     cells: active binding
##     clone: function (deep = FALSE) 
##     data: NULL
##     dim: 32 28
##     header: NULL
##     idx: list
##     initialize: function (sheet, xr, filter, header, data) 
##     lookup: active binding
##     lookup2: active binding
##     merged: active binding
##     sheet: worksheet, R6
##     table: function (col_names = TRUE, ...) 
##     values: function () 
##     xr: cell_limits, list 
##  $ :Classes 'worksheet_view', 'R6' &lt;worksheet_view&gt;
##   Public:
##     cells: active binding
##     clone: function (deep = FALSE) 
##     data: NULL
##     dim: 33 28
##     header: NULL
##     idx: list
##     initialize: function (sheet, xr, filter, header, data) 
##     lookup: active binding
##     lookup2: active binding
##     merged: active binding
##     sheet: worksheet, R6
##     table: function (col_names = TRUE, ...) 
##     values: function () 
##     xr: cell_limits, list</code></pre>
<p>
<code>tables</code> is actually a list containing <code>worksheet_view</code> objects. Take a look at the <code>dim</code> attribute: you see the dimensions of the tables there. When I started using <code>jailbreakr</code> I was stuck here. I was looking for the function that would extract the data frames and could not find it. Then I watched the video and I understood what I had to do: a <code>worksheet_view</code> object has a <code>values()</code> method that does the extraction for you. This is a bit unusual in R (it made me feel like I was using Python); maybe in future versions this <code>values()</code> method will become a separate function of its own in the package. What happens when we use <code>values()</code>?
</p>
<pre class="r"><code>library("purrr")
list_of_data &lt;-  map(tables, (function(x)(x$values())))
map(list_of_data, head)</code></pre>
<pre><code>## [[1]]
##      [,1]     [,2]    [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10]
## [1,] "TOT"    NA      NA    NA    NA    NA    NA    NA    NA    NA   
## [2,] "DEMAND" 33603   33969 34334 34699 35064 35430 35795 36160 36525
## [3,] "FDEMT"  "FDEMN" NA    NA    NA    NA    NA    NA    NA    NA   
## [4,] "EU"     ":"     16.9  -1.4  20.2  34.5  31.4  37.5  39    37.3 
## [5,] "EA"     ":"     15.5  -13.1 14.8  30.9  25.1  35.2  39.2  37.1 
## [6,] "BE"     ":"     ":"   ":"   ":"   ":"   ":"   ":"   42.3  43.1 
##      [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
## [1,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [2,] 36891 37256 37621 37986 38352 38717 39082 39447 39813 40178 40543
## [3,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [4,] 39.2  27.5  20.6  21.4  29.8  26.4  32.5  47.1  19    -1.3  23.5 
## [5,] 39.5  25.3  18.2  18.9  27.4  23    28.2  46.1  12.3  -9.3  19.3 
## [6,] 45.8  42.2  42.9  43.8  45.8  47.4  49.1  50.9  48.2  46.9  46.3 
##      [,22] [,23] [,24] [,25] [,26] [,27] [,28] 
## [1,] NA    NA    NA    NA    NA    NA    NA    
## [2,] 40908 41274 41639 42004 42369 42735 43100 
## [3,] NA    NA    NA    NA    NA    NA    NA    
## [4,] 29    22    21.1  25.6  31.8  22.9  "30.7"
## [5,] 26.2  18.6  15.7  21.7  28.8  17.3  26.6  
## [6,] 46.8  47.1  48.2  50.1  49.2  34.5  34.4  
## 
## [[2]]
##      [,1]        [,2]    [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10]
## [1,] "FINANCIAL" 33603   33969 34334 34699 35064 35430 35795 36160 36525
## [2,] "FFINT"     "FFINN" NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] "EU"        ":"     -5.1  -6.2  2.7   6.7   9     14.4  13.9  14   
## [4,] "EA"        ":"     -8.8  -13.5 -3.4  2.6   5.7   12.5  13.2  13.1 
## [5,] "BE"        ":"     ":"   ":"   ":"   ":"   ":"   ":"   21.5  22.4 
## [6,] "BG"        ":"     ":"   ":"   ":"   ":"   ":"   ":"   ":"   ":"  
##      [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
## [1,] 36891 37256 37621 37986 38352 38717 39082 39447 39813 40178 40543
## [2,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] 16.4  9.4   7.4   8.1   12.4  8.4   13.6  23.4  4.1   -4    10.9 
## [4,] 16.5  8     6.8   5.1   9.9   4.8   8.4   24.3  -2.8  -10.5 9.3  
## [5,] 20.9  22.3  32.2  33.5  33.8  34.8  35    34.5  37.2  33.5  32.7 
## [6,] ":"   ":"   20.8  24    27.1  28.3  33.4  37.5  37.7  26.6  30.4 
##      [,22] [,23] [,24] [,25] [,26] [,27] [,28] 
## [1,] 40908 41274 41639 42004 42369 42735 43100 
## [2,] NA    NA    NA    NA    NA    NA    NA    
## [3,] 12.4  10.2  8.8   13.4  17.4  6.2   "12.3"
## [4,] 9     7.2   5     11    13.1  -1    6.5   
## [5,] 31.5  32.3  33    31.7  32.2  19.9  20.5  
## [6,] 33.8  35.6  36    41.5  41.6  44.2  43.8  
## 
## [[3]]
##      [,1]        [,2]    [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10]
## [1,] "TECHNICAL" 33603   33969 34334 34699 35064 35430 35795 36160 36525
## [2,] "FTECT"     "FTECN" NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] "EU"        ":"     39.2  37.6  38.3  40    40.7  42.8  43.5  43.8 
## [4,] "EA"        ":"     39.7  36.2  37.5  41.2  40    44    44.8  44.9 
## [5,] "BE"        ":"     ":"   ":"   ":"   ":"   ":"   ":"   58.8  58.5 
## [6,] "BG"        ":"     ":"   ":"   ":"   ":"   ":"   ":"   ":"   ":"  
##      [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
## [1,] 36891 37256 37621 37986 38352 38717 39082 39447 39813 40178 40543
## [2,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] 37    31.1  27.2  30.9  30.4  30.3  27.4  40.5  25.8  23.1  27.4 
## [4,] 37    30.3  27.4  31    29.9  29.7  24.8  41    23.4  19.5  26.4 
## [5,] 58.3  58.4  57.7  59.2  59.6  59.4  60.2  59.5  60.5  57.9  56.3 
## [6,] ":"   ":"   17.3  17.5  21.1  21.5  25.3  28.2  26.1  21    25.3 
##      [,22] [,23] [,24] [,25] [,26] [,27] [,28] 
## [1,] 40908 41274 41639 42004 42369 42735 43100 
## [2,] NA    NA    NA    NA    NA    NA    NA    
## [3,] 28.9  26.3  31.3  32.1  32.1  30.2  "34.6"
## [4,] 28.5  25.9  32.1  32.4  33.1  30.2  36    
## [5,] 56.7  57.7  57.9  58.6  59.1  13.1  13.1  
## [6,] 24.6  26.8  30.4  31.9  34.1  34.8  33.7  
## 
## [[4]]
##      [,1]    [,2]    [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10] [,11]
## [1,] "OTHER" 33603   33969 34334 34699 35064 35430 35795 36160 36525 36891
## [2,] "FOTHT" "FOTHN" NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] "EU"    ":"     2.9   -0.5  3.9   3.9   1     4.1   4.7   7     7.2  
## [4,] "EA"    ":"     2.3   -4.9  1.4   1.3   -2.4  1.1   3.2   5.8   7    
## [5,] "BE"    ":"     ":"   ":"   ":"   ":"   ":"   ":"   14    14.9  15.9 
## [6,] "BG"    ":"     ":"   ":"   ":"   ":"   ":"   ":"   ":"   ":"   ":"  
##      [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
## [1,] 37256 37621 37986 38352 38717 39082 39447 39813 40178 40543 40908
## [2,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] -1.5  6.2   8.1   7.6   1.4   2.4   13.7  -1.9  -3.2  1.1   1.1  
## [4,] -3.7  5.5   7.1   7.2   -2.2  0.4   15.5  -4.6  -8.4  0.3   -3.3 
## [5,] 16.3  22.8  23.1  22.4  24.5  25.3  25.5  26.6  26.6  24.7  24.6 
## [6,] ":"   -2.3  -0.8  2.4   2.9   3.5   4.8   5.5   2.2   3.3   3.2  
##      [,23] [,24] [,25] [,26] [,27] [,28]
## [1,] 41274 41639 42004 42369 42735 43100
## [2,] NA    NA    NA    NA    NA    NA   
## [3,] -1.6  0.9   2.7   1.9   -3.3  "2.1"
## [4,] -2.3  0.6   2.5   2.1   -5.4  1.7  
## [5,] 26.4  25.9  25    25.3  4.7   5.2  
## [6,] 5.9   7     8.2   9.6   9.4   9.1</code></pre>
<p>
We are getting really close to something useful! Now we can get the first table and do some basic cleaning to have a tidy dataset:
</p>
<pre class="r"><code>dataset1 &lt;- list_of_data[[1]]

dataset1 &lt;- dataset1[-c(1:3), ]
dataset1[dataset1 == ":"] &lt;- NA
colnames(dataset1) &lt;- c("country", seq(from = 1991, to = 2017))

head(dataset1)</code></pre>
<pre><code>##      country 1991 1992 1993  1994 1995 1996 1997 1998 1999 2000 2001 2002
## [1,] "EU"    NA   16.9 -1.4  20.2 34.5 31.4 37.5 39   37.3 39.2 27.5 20.6
## [2,] "EA"    NA   15.5 -13.1 14.8 30.9 25.1 35.2 39.2 37.1 39.5 25.3 18.2
## [3,] "BE"    NA   NA   NA    NA   NA   NA   NA   42.3 43.1 45.8 42.2 42.9
## [4,] "BG"    NA   NA   NA    NA   NA   NA   NA   NA   NA   NA   NA   39.6
## [5,] "CZ"    NA   NA   NA    NA   NA   NA   NA   NA   NA   NA   NA   54.9
## [6,] "DK"    49.5 45   50    59.5 62.5 55.5 60.5 57.5 56   61.5 57.5 59.5
##      2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016
## [1,] 21.4 29.8 26.4 32.5 47.1 19   -1.3 23.5 29   22   21.1 25.6 31.8 22.9
## [2,] 18.9 27.4 23   28.2 46.1 12.3 -9.3 19.3 26.2 18.6 15.7 21.7 28.8 17.3
## [3,] 43.8 45.8 47.4 49.1 50.9 48.2 46.9 46.3 46.8 47.1 48.2 50.1 49.2 34.5
## [4,] 43   42.8 45.5 49.1 52.6 50.7 39.5 45.5 47.4 45.6 50.5 51.4 49.9 53.2
## [5,] 37   48.5 67.9 66.4 66.8 69.3 64.7 61   56   47.5 53   53.5 67.5 58  
## [6,] 53.5 50   59   64   63   56   33.5 57   47   48   52   45.5 40.5 36.5
##      2017  
## [1,] "30.7"
## [2,] 26.6  
## [3,] 34.4  
## [4,] 52.8  
## [5,] 59.5  
## [6,] 37.5</code></pre>
<p>
Et voilà! We went from a messy spreadsheet to a tidy dataset in a matter of minutes. Even though this package is still in early development and not all the features that are planned are available, the basics are there and can save you a lot of pain!
</p>
</section>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-02-17-how_to_use_jailbreakr.html</guid>
  <pubDate>Thu, 16 Feb 2017 23:00:00 GMT</pubDate>
</item>
<item>
  <title>My free book has a cover!</title>
  <link>https://b-rodrigues.github.io/posts/2017-01-07-my-free-book-has-a-cover.html</link>
  <description><![CDATA[ 




<p>I’m currently writing a book as a hobby. It’s titled <em>Functional programming and unit testing for data munging with R</em> and you can get it for free <a href="https://leanpub.com/fput/">here</a>. You can also read it online for free on my <a href="http://www.brodrigues.co/fput">webpage</a> What’s the book about?</p>
<p>Here’s the teaser text:</p>
<blockquote class="blockquote">
<p>Learn the basics of functional programming, unit testing and package development for the R programming language in order to make your data tidy!</p>
</blockquote>
<p>The book now has a beautiful cover thanks to <a href="https://twitter.com/putosaure"><span class="citation" data-cites="putosaure">@putosaure</span></a>. Putosaure is a Paris based graphic designer who also reviews video games. He is also a very good friend of mine and I am very happy he made this beautiful cover for my book:</p>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/cover.png" class="img-fluid"></p>
</div>
<p>In it, we see a guy holding a shield with the Greek letter lambda, which also happens to be the letter to designate functional programming. I’ve added the title with the <a href="http://www.dafont.com/komika-title.font">Komika Title</a> font.</p>
<p>Consider this cover in beta, it’ll probably evolve some more. But I couldn’t wait to use it!</p>
<p>I love it. Hope you’ll love it too!</p>



 ]]></description>
  <category>R</category>
  <category>book</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-01-07-my-free-book-has-a-cover.html</guid>
  <pubDate>Fri, 06 Jan 2017 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Functional programming and unit testing for data munging with R available on Leanpub</title>
  <link>https://b-rodrigues.github.io/posts/2016-12-24-functional-programming-and-unit-testing-for-data-munging-with-r-available-on-leanpub.html</link>
  <description><![CDATA[ 




<p>The book I’ve been working on these pasts months (you can read about it <a href="http://www.brodrigues.co/2016/11/04/ive-started-writing-a-book-functional-programming-and-unit-testing-for-data-munging-with-r">here</a>, and read it for free <a href="http://www.brodrigues.co/fput">here</a>) is now available on Leanpub! You can grab a copy and read it on your ebook reader or on your computer, and what’s even better is that it is available for free (but you can also decide to buy it if you really like it). Here is the link on <a href="https://leanpub.com/fput">Leanpub</a>.</p>
<p>In the book, I show you the basics of functional programming, unit testing and package development for the R programming language. The end goal is to make your data tidy in a reproducible way!</p>
<p>Just a heads up: as the book is right now, the formatting is not perfect and images are missing. This is because I use <code>bookdown</code> to write the book and convert it to Leanpub’s markdown flavour is not trivial. I will find a solution to automate the conversion from <code>bookdown</code>’s version to Leanpub’s markdown and try to keep both versions in sync. Of course, once the book will be finished, the version on Leanpub and on my <a href="http://www.brodrigues.co/fput">website</a> are going to be completely identical. If you want to read it on your computer offline, you can also download a pdf from the book’s website, by clicking on the pdf icon in the top left corner. Do not hesitate to send me an email if you want to give me feedback (just click on the red envelope in the top right corner) or tweet me <a href="https://twitter.com/brodriguesco"><span class="citation" data-cites="brodriguesco">@brodriguesco</span></a>.</p>

 ]]></description>
  <category>R</category>
  <category>book</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2016-12-24-functional-programming-and-unit-testing-for-data-munging-with-r-available-on-leanpub.html</guid>
  <pubDate>Fri, 23 Dec 2016 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Work on lists of datasets instead of individual datasets by using functional programming</title>
  <link>https://b-rodrigues.github.io/posts/2016-12-21-work-on-lists-of-datasets-instead-of-individual-datasets-by-using-functional-programming.html</link>
  <description><![CDATA[ 




<p>
Analyzing a lot of datasets can be tedious. In my work, I often have to compute descriptive statistics, or plot some graphs for some variables for a lot of datasets. The variables in question have the same name accross the datasets but are measured for different years. As an example, imagine you have this situation:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">data2000 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars</span>
<span id="cb1-2">data2001 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars</span></code></pre></div>
</div>
<p>
For the sake of argument, imagine that <code>data2000</code> is data from a survey conducted in the year 2000 and <code>data2001</code> is the same survey but conducted in the year 2001. For illustration purposes, I use the <code>mtcars</code> dataset, but I could have used any other example. In these sort of situations, the variables are named the same in both datasets. Now if I want to check the summary statistics of a variable, I might do it by running:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(data2000<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(data2001<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span></code></pre></div>
</div>
<p>
but this can get quite tedious, especially if instead of only having two years of data, you have 20 years. Another possibility is to merge both datasets and then check the summary statistics of the variable of interest. But this might require a lot of preprocessing, and sometimes you really just want to do a quick check, or some dirty graphs. So you might be tempted to write a loop, which would require to put these two datasets in some kind of structure, such as a list:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">list_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data2000"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> data2000, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data2001"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> data2001)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>){</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(list_data[[i]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl))</span>
<span id="cb3-5">}</span></code></pre></div>
</div>
<pre><code>##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.000   4.000   6.000   6.188   8.000   8.000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.000   4.000   6.000   6.188   8.000   8.000</code></pre>
<p>
But this also might get tedious, especially if you want to do this for a lot of different variables, and want to use different functions than <code>summary()</code>.
</p>
<p>
Another, simpler way of doing this, is to use <code>purrr::map()</code> or <code>lapply()</code>. But there is a catch though: how do we specify the column we want to work on? Let’s try some things out:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(list_data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(cyl))</span></code></pre></div>
</div>
<pre><code>Error in summary(cyl) : object 'cyl' not found</code></pre>
<p>
Maybe this will work:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(list_data, summary, cyl)</span></code></pre></div>
</div>
<pre><code>## $data2000
     mpg             cyl             disp             hp       
Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  
1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  
Median :19.20   Median :6.000   Median :196.3   Median :123.0  
Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  
3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  
Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  
     drat             wt             qsec             vs        
Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  
1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  
Median :3.695   Median :3.325   Median :17.71   Median :0.0000  
Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  
3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  
Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  
      am              gear            carb      
Min.   :0.0000   Min.   :3.000   Min.   :1.000  
1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  
Median :0.0000   Median :4.000   Median :2.000  
Mean   :0.4062   Mean   :3.688   Mean   :2.812  
3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  
Max.   :1.0000   Max.   :5.000   Max.   :8.000  

data2001
     mpg             cyl             disp             hp       
Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  
1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  
Median :19.20   Median :6.000   Median :196.3   Median :123.0  
Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  
3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  
Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  
     drat             wt             qsec             vs        
Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  
1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  
Median :3.695   Median :3.325   Median :17.71   Median :0.0000  
Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  
3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  
Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  
      am              gear            carb      
Min.   :0.0000   Min.   :3.000   Min.   :1.000  
1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  
Median :0.0000   Median :4.000   Median :2.000  
Mean   :0.4062   Mean   :3.688   Mean   :2.812  
3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  
Max.   :1.0000   Max.   :5.000   Max.   :8.000</code></pre>
<p>
Not quite! You get the summary statistics of every variable, <code>cyl</code> simply gets ignored. This might be ok in our small toy example, but if you have dozens of datasets with hundreds of variables, the output becomes unreadable. The solution is to use an anonymous functions:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(list_data, (<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)))</span></code></pre></div>
</div>
<pre><code>## $data2000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.000   4.000   6.000   6.188   8.000   8.000 

$data2001
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.000   4.000   6.000   6.188   8.000   8.000</code></pre>
<p>
This is, in my opinion, much more readable than a loop, and the output of this is another list, so it’s easy to save it:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">summary_cyl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(list_data, (<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)))</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(summary_cyl)</span></code></pre></div>
</div>
<pre><code>## List of 2
$ data2000:Classes 'summaryDefault', 'table'  Named num [1:6] 4 4 6 6.19 8 ...
 .. ..- attr(*, "names")= chr [1:6] "Min." "1st Qu." "Median" "Mean" ...
$ data2001:Classes 'summaryDefault', 'table'  Named num [1:6] 4 4 6 6.19 8 ...
 .. ..- attr(*, "names")= chr [1:6] "Min." "1st Qu." "Median" "Mean" ...</code></pre>
<p>
With the loop, you would need to “allocate” an empty list that you would fill at each iteration.
</p>
<p>
So this is already nice, but wouldn’t it be nicer to simply have to type:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(list_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span></code></pre></div>
</div>
<p>
and have the summary of variable <code>cyl</code> for each dataset in the list? Well it is possible with the following function I wrote to make my life easier:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">to_map <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(func){</span>
<span id="cb14-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(list, column, ...){</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(column)){</span>
<span id="cb14-4">        res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(list, (<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">func</span>(x, ...)))</span>
<span id="cb14-5">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb14-6">        res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(list, (<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">func</span>(x[column], ...)))</span>
<span id="cb14-7">             }</span>
<span id="cb14-8">    res</span>
<span id="cb14-9">  }</span>
<span id="cb14-10">}</span></code></pre></div>
</div>
<p>
By following <a href="http://adv-r.had.co.nz/Function-operators.html">this</a> chapter of Hadley Wickham’s book, <i>Advanced R</i>, I was able to write this function. What does it do? It basically <i>generalizes</i> a function to work on a list of datasets instead of just on a dataset. So for example, in the case of <code>summary()</code>:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">summarymap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to_map</span>(summary)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarymap</span>(list_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>)</span></code></pre></div>
</div>
<pre><code>$data2000
     cyl       
Min.   :4.000  
1st Qu.:4.000  
Median :6.000  
Mean   :6.188  
3rd Qu.:8.000  
Max.   :8.000  

$data2001
     cyl       
Min.   :4.000  
1st Qu.:4.000  
Median :6.000  
Mean   :6.188  
3rd Qu.:8.000  
Max.   :8.000</code></pre>
<p>
So now everytime I want to have summary statistics for a variable, I just need to use <code>summarymap()</code>:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarymap</span>(list_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpg"</span>)</span></code></pre></div>
</div>
<pre><code>## $data2000
      mpg       
 Min.   :10.40  
 1st Qu.:15.43  
 Median :19.20  
 Mean   :20.09  
 3rd Qu.:22.80  
 Max.   :33.90  

$data2001
      mpg       
 Min.   :10.40  
 1st Qu.:15.43  
 Median :19.20  
 Mean   :20.09  
 3rd Qu.:22.80  
 Max.   :33.90</code></pre>
<p>
If I want the summary statistics for every variable, I simply omit the column name:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarymap</span>(list_data)</span></code></pre></div>
</div>
<pre><code>$data2000
      mpg             cyl             disp             hp       
 Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  
 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  
 Median :19.20   Median :6.000   Median :196.3   Median :123.0  
 Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  
 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  
 Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  
      drat             wt             qsec             vs        
 Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  
 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  
 Median :3.695   Median :3.325   Median :17.71   Median :0.0000  
 Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  
 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  
 Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  
       am              gear            carb      
 Min.   :0.0000   Min.   :3.000   Min.   :1.000  
 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  
 Median :0.0000   Median :4.000   Median :2.000  
 Mean   :0.4062   Mean   :3.688   Mean   :2.812  
 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  
 Max.   :1.0000   Max.   :5.000   Max.   :8.000  

$data2001
      mpg             cyl             disp             hp       
 Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  
 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  
 Median :19.20   Median :6.000   Median :196.3   Median :123.0  
 Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  
 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  
 Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  
      drat             wt             qsec             vs        
 Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  
 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  
 Median :3.695   Median :3.325   Median :17.71   Median :0.0000  
 Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  
 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  
 Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  
       am              gear            carb      
 Min.   :0.0000   Min.   :3.000   Min.   :1.000  
 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  
 Median :0.0000   Median :4.000   Median :2.000  
 Mean   :0.4062   Mean   :3.688   Mean   :2.812  
 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  
 Max.   :1.0000   Max.   :5.000   Max.   :8.000</code></pre>
<p>
I can use any function:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">tablemap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to_map</span>(table)</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tablemap</span>(list_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>)</span></code></pre></div>
</div>
<pre><code>## $data2000

 4  6  8 
11  7 14 

$data2001

 4  6  8 
11  7 14</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tablemap</span>(list_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpg"</span>)</span></code></pre></div>
</div>
<pre><code>## $data2000

10.4 13.3 14.3 14.7   15 15.2 15.5 15.8 16.4 17.3 17.8 18.1 18.7 19.2 19.7 
   2    1    1    1    1    2    1    1    1    1    1    1    1    2    1 
  21 21.4 21.5 22.8 24.4   26 27.3 30.4 32.4 33.9 
   2    2    1    2    1    1    1    2    1    1 

$data2001

10.4 13.3 14.3 14.7   15 15.2 15.5 15.8 16.4 17.3 17.8 18.1 18.7 19.2 19.7 
   2    1    1    1    1    2    1    1    1    1    1    1    1    2    1 
  21 21.4 21.5 22.8 24.4   26 27.3 30.4 32.4 33.9 
   2    2    1    2    1    1    1    2    1    1</code></pre>
<p>
I hope you will find this little function useful, and as usual, for any comments just drop me an email by clicking the red enveloppe in the top right corner or <a href="https://twitter.com/brodriguesco">tweet me</a>.
</p>




 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2016-12-21-work-on-lists-of-datasets-instead-of-individual-datasets-by-using-functional-programming.html</guid>
  <pubDate>Tue, 20 Dec 2016 23:00:00 GMT</pubDate>
</item>
<item>
  <title>I’ve started writing a ‘book’: Functional programming and unit testing for data munging with R</title>
  <link>https://b-rodrigues.github.io/posts/2016-11-04-ive-started-writing-a-book-functional-programming-and-unit-testing-for-data-munging-with-r.html</link>
  <description><![CDATA[ 




<p>I have started writing a ‘book’ using the awesome <code>bookdown</code> package. In the book I explain and show why using functional programming and putting your functions in your own packages is the way to go when you want to clean, prepare and transform large data sets. It makes testing and documenting your code easier. You don’t need to think about managing paths either. The book is far from complete, but I plan on working on it steadily. For now, you can read an intro to functional programming, unit testing and creating your own packages that will hold your code. I also show you can write documentation for your functions. I am also looking for feedback; so if you have any suggestions, do not hesitate to shoot me an email or a tweet! You can read the book by clicking <a href="http://www.brodrigues.co/fput/">here</a>.</p>

 ]]></description>
  <category>R</category>
  <category>book</category>
  <guid>https://b-rodrigues.github.io/posts/2016-11-04-ive-started-writing-a-book-functional-programming-and-unit-testing-for-data-munging-with-r.html</guid>
  <pubDate>Thu, 03 Nov 2016 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Merge a list of datasets together</title>
  <link>https://b-rodrigues.github.io/posts/2016-07-30-merge-a-list-of-datasets-together.html</link>
  <description><![CDATA[ 




<p>
<a href="http://www.brodrigues.co/2016/07/26/read-a-lot-of-datasets-at-once-with-r">Last week</a> I showed how to read a lot of datasets at once with R, and this week I’ll continue from there and show a very simple function that uses this list of read datasets and merges them all together.
</p>
<p>
First we’ll use <code>read_list()</code> to read all the datasets at once (for more details read <a href="http://www.brodrigues.co/2016/07/26/read-a-lot-of-datasets-at-once-with-r">last week’s post</a>):
</p>
<pre class="r"><code>library("readr")
library("tibble")

data_files &lt;- list.files(pattern = ".csv")

print(data_files)</code></pre>
<pre><code>## [1] "data_1.csv" "data_2.csv" "data_3.csv"</code></pre>
<pre class="r"><code>list_of_data_sets &lt;- read_list(data_files, read_csv)

glimpse(list_of_data_sets)</code></pre>
<pre><code>## List of 3
##  $ data_1:Classes 'tbl_df', 'tbl' and 'data.frame':  19 obs. of  3 variables:
##   ..$ col1: chr [1:19] "0,018930679" "0,8748013128" "0,1025635934" "0,6246140983" ...
##   ..$ col2: chr [1:19] "0,0377725807" "0,5959457638" "0,4429121533" "0,558387159" ...
##   ..$ col3: chr [1:19] "0,6241767189" "0,031324594" "0,2238059868" "0,2773350732" ...
##  $ data_2:Classes 'tbl_df', 'tbl' and 'data.frame':  19 obs. of  3 variables:
##   ..$ col1: chr [1:19] "0,9098418493" "0,1127788509" "0,5818891392" "0,1011773532" ...
##   ..$ col2: chr [1:19] "0,7455905887" "0,4015039612" "0,6625796605" "0,029955339" ...
##   ..$ col3: chr [1:19] "0,327232932" "0,2784035673" "0,8092386735" "0,1216045306" ...
##  $ data_3:Classes 'tbl_df', 'tbl' and 'data.frame':  19 obs. of  3 variables:
##   ..$ col1: chr [1:19] "0,9236124896" "0,6303271761" "0,6413583054" "0,5573887416" ...
##   ..$ col2: chr [1:19] "0,2114708388" "0,6984538266" "0,0469865249" "0,9271510226" ...
##   ..$ col3: chr [1:19] "0,4941919971" "0,7391538511" "0,3876723797" "0,2815014394" ...</code></pre>
<p>
You see that all these datasets have the same column names. We can now merge them using this simple function:
</p>
<pre class="r"><code>multi_join &lt;- function(list_of_loaded_data, join_func, ...){

    require("dplyr")

    output &lt;- Reduce(function(x, y) {join_func(x, y, ...)}, list_of_loaded_data)

    return(output)
}</code></pre>
<p>
This function uses <code>Reduce()</code>. <code>Reduce()</code> is a very important function that can be found in all functional programming languages. What does <code>Reduce()</code> do? Let’s take a look at the following example:
</p>
<pre class="r"><code>Reduce(`+`, c(1, 2, 3, 4, 5))</code></pre>
<pre><code>## [1] 15</code></pre>
<p>
<code>Reduce()</code> has several arguments, but you need to specify at least two: a function, here <code>+</code> and a list, here <code>c(1, 2, 3, 4, 5)</code>. The next code block shows what <code>Reduce()</code> basically does:
</p>
<pre><code>0 + c(1, 2, 3, 4, 5)
0 + 1 + c(2, 3, 4, 5)
0 + 1 + 2 + c(3, 4, 5)
0 + 1 + 2 + 3 + c(4, 5)
0 + 1 + 2 + 3 + 4 + c(5)
0 + 1 + 2 + 3 + 4 + 5</code></pre>
<p>
<code>0</code> had to be added as in “init”. You can also specify this “init” to <code>Reduce()</code>:
</p>
<pre class="r"><code>Reduce(`+`, c(1, 2, 3, 4, 5), init = 20)</code></pre>
<pre><code>## [1] 35</code></pre>
<p>
So what <code>multi_join()</code> does, is the same operation as in the example above, but where the function is a user supplied join or merge function, and the list of datasets is the one read with <code>read_list()</code>.
</p>
<p>
Let’s see what happens when we use <code>multi_join()</code> on our list:
</p>
<pre class="r"><code>merged_data &lt;- multi_join(list_of_data_sets, full_join)</code></pre>
<pre class="r"><code>class(merged_data)</code></pre>
<pre><code>## [1] "tbl_df"     "tbl"        "data.frame"</code></pre>
<pre class="r"><code>glimpse(merged_data)</code></pre>
<pre><code>## Observations: 57
## Variables: 3
## $ col1 &lt;chr&gt; "0,018930679", "0,8748013128", "0,1025635934", "0,6246140...
## $ col2 &lt;chr&gt; "0,0377725807", "0,5959457638", "0,4429121533", "0,558387...
## $ col3 &lt;chr&gt; "0,6241767189", "0,031324594", "0,2238059868", "0,2773350...</code></pre>
<p>
You should make sure that all the data frames have the same column names but you can also join data frames with different column names if you give the argument <code>by</code> to the join function. This is possible thanks to <code>…</code> that allows you to pass further argument to <code>join_func()</code>.
</p>
<p>
This function was inspired by the one found on the blog <a href="http://novicemetrics.blogspot.lu/2011/04/merging-multiple-data-files-into-one.html">Coffee and Econometrics in the Morning</a>.
</p>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2016-07-30-merge-a-list-of-datasets-together.html</guid>
  <pubDate>Fri, 29 Jul 2016 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Read a lot of datasets at once with R</title>
  <link>https://b-rodrigues.github.io/posts/2016-07-26-read-a-lot-of-datasets-at-once-with-r.html</link>
  <description><![CDATA[ 




<p>
I often have to read a lot of datasets at once using R. So I’ve wrote the following function to solve this issue:
</p>
<pre class="r"><code>read_list &lt;- function(list_of_datasets, read_func){

        read_and_assign &lt;- function(dataset, read_func){
                dataset_name &lt;- as.name(dataset)
                dataset_name &lt;- read_func(dataset)
        }

        # invisible is used to suppress the unneeded output
        output &lt;- invisible(
                sapply(list_of_datasets,
                           read_and_assign, read_func = read_func, simplify = FALSE, USE.NAMES = TRUE))

        # Remove the extension at the end of the data set names
        names_of_datasets &lt;- c(unlist(strsplit(list_of_datasets, "[.]"))[c(T, F)])
        names(output) &lt;- names_of_datasets
        return(output)
}</code></pre>
<p>
You need to supply a list of datasets as well as the function to read the datasets to <code>read_list</code>. So for example to read in <code>.csv</code> files, you could use <code>read.csv()</code> (or <code>read_csv()</code> from the <code>readr</code> package, which I prefer to use), or <code>read_dta()</code> from the package <code>haven</code> for STATA files, and so on.
</p>
<p>
Now imagine you have some data in your working directory. First start by saving the name of the datasets in a variable:
</p>
<pre class="r"><code>data_files &lt;- list.files(pattern = ".csv")

print(data_files)</code></pre>
<pre><code>## [1] "data_1.csv" "data_2.csv" "data_3.csv"</code></pre>
<p>
Now you can read all the data sets and save them in a list with <code>read_list()</code>:
</p>
<pre class="r"><code>library("readr")
library("tibble")

list_of_data_sets &lt;- read_list(data_files, read_csv)


glimpse(list_of_data_sets)</code></pre>
<pre><code>## List of 3
##  $ data_1:Classes 'tbl_df', 'tbl' and 'data.frame':  19 obs. of  3 variables:
##   ..$ col1: chr [1:19] "0,018930679" "0,8748013128" "0,1025635934" "0,6246140983" ...
##   ..$ col2: chr [1:19] "0,0377725807" "0,5959457638" "0,4429121533" "0,558387159" ...
##   ..$ col3: chr [1:19] "0,6241767189" "0,031324594" "0,2238059868" "0,2773350732" ...
##  $ data_2:Classes 'tbl_df', 'tbl' and 'data.frame':  19 obs. of  3 variables:
##   ..$ col1: chr [1:19] "0,9098418493" "0,1127788509" "0,5818891392" "0,1011773532" ...
##   ..$ col2: chr [1:19] "0,7455905887" "0,4015039612" "0,6625796605" "0,029955339" ...
##   ..$ col3: chr [1:19] "0,327232932" "0,2784035673" "0,8092386735" "0,1216045306" ...
##  $ data_3:Classes 'tbl_df', 'tbl' and 'data.frame':  19 obs. of  3 variables:
##   ..$ col1: chr [1:19] "0,9236124896" "0,6303271761" "0,6413583054" "0,5573887416" ...
##   ..$ col2: chr [1:19] "0,2114708388" "0,6984538266" "0,0469865249" "0,9271510226" ...
##   ..$ col3: chr [1:19] "0,4941919971" "0,7391538511" "0,3876723797" "0,2815014394" ...</code></pre>
<p>
If you prefer not to have the datasets in a list, but rather import them into the global environment, you can change the above function like so:
</p>
<pre class="r"><code>read_list &lt;- function(list_of_datasets, read_func){

        read_and_assign &lt;- function(dataset, read_func){
                assign(dataset, read_func(dataset), envir = .GlobalEnv)
        }

        # invisible is used to suppress the unneeded output
        output &lt;- invisible(
                sapply(list_of_datasets,
                           read_and_assign, read_func = read_func, simplify = FALSE, USE.NAMES = TRUE))

}</code></pre>
<p>
But I personnally don’t like this second option, but I put it here for completeness.
</p>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2016-07-26-read-a-lot-of-datasets-at-once-with-r.html</guid>
  <pubDate>Mon, 25 Jul 2016 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Data frame columns as arguments to dplyr functions</title>
  <link>https://b-rodrigues.github.io/posts/2016-07-18-data-frame-columns-as-arguments-to-dplyr-functions.html</link>
  <description><![CDATA[ 




<!-- MathJax scripts -->
<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<p>
Suppose that you would like to create a function which does a series of computations on a data frame. You would like to pass a column as this function’s argument. Something like:
</p>
<pre class="r"><code>data(cars)
convertToKmh &lt;- function(dataset, col_name){
  dataset$col_name &lt;- dataset$speed * 1.609344
  return(dataset)
}</code></pre>
<p>
This example is obviously not very interesting (you don’t need a function for this), but it will illustrate the point. You would like to append a column called <code>speed_in_kmh</code> with the speed in kilometers per hour to this dataset, but this is what happens:
</p>
<pre class="r"><code>head(convertToKmh(cars, "speed_in_kmh"))</code></pre>
<pre><code>##   speed dist  col_name
1     4    2  6.437376
2     4   10  6.437376
3     7    4 11.265408
4     7   22 11.265408
5     8   16 12.874752
6     9   10 14.484096</code></pre>
<p>
Your column is not called <code>speed_in_kmh</code> but <code>col_name</code>! It turns out that there is a very simple solution:
</p>
<pre class="r"><code>convertToKmh &lt;- function(dataset, col\_name){
  dataset[col_name] &lt;- dataset$speed * 1.609344
  return(dataset)
}

head(convertToKmh(cars, "speed\_in\_kmh"))</code></pre>
<pre><code>##   speed dist speed\_in\_kmh
1     4    2     6.437376
2     4   10     6.437376
3     7    4    11.265408
4     7   22    11.265408
5     8   16    12.874752
6     9   10    14.484096</code></pre>
<p>
You can access columns with <code>[]</code> instead of <code>$</code>.
</p>
<p>
But sometimes you want to do more complex things and for example have a function that groups by a variable and then computes new variables, filters by another and so on. You would like to avoid having to hard code these variables in your function, because then why write a function and of course you would like to use <code>dplyr</code> to do it.
</p>
<p>
I often use <code>dplyr</code> functions in my functions. For illustration purposes, consider this very simple function:
</p>
<pre class="r"><code>simpleFunction &lt;- function(dataset, col_name){
  require("dplyr")
  dataset %&gt;% 
    group\_by(col\_name) %&gt;%
    summarise(mean_speed = mean(speed)) -&gt; dataset
  return(dataset)
}

simpleFunction(cars, "dist")</code></pre>
<p>
This function takes a dataset as an argument, as well as a column name. However, this does not work. You get this error:
</p>
<pre><code>Error: unknown variable to group by : col_name </code></pre>
<p>
The variable <code>col_name</code> is passed to <code>simpleFunction()</code> as a string, but <code>group_by()</code> requires a variable name. So why not try to convert <code>col_name</code> to a name?
</p>
<pre class="r"><code>simpleFunction &lt;- function(dataset, col_name){
  require("dplyr")
  col\_name &lt;- as.name(col_name)
  dataset %&gt;% 
    group\_by(col\_name) %&gt;%
    summarise(mean_speed = mean(speed)) -&gt; dataset
  return(dataset)
}

simpleFunction(cars, "dist")</code></pre>
<p>
You get the same error as before:
</p>
<pre><code>Error: unknown variable to group by : col_name </code></pre>
<p>
So how can you pass a column name to <code>group_by()</code>? Well, there is another version of <code>group_by()</code> called <code>group_by_()</code> that uses standard evaluation. You can learn more about it <a href="https://cran.r-project.org/web/packages/dplyr/vignettes/nse.html">here</a>. Let’s take a look at what happens when we use <code>group_by_()</code>:
</p>
<pre class="r"><code>simpleFunction &lt;- function(dataset, col_name){
  require("dplyr")
  dataset %&gt;% 
    group\_by\_(col_name) %&gt;%
    summarise(mean_speed = mean(speed)) -&gt; dataset
  return(dataset)
}

simpleFunction(cars, "dist")</code></pre>
<pre><code>A tibble: 35 x 2
 dist mean\_speed
&lt;dbl&gt;      &lt;dbl&gt;
1      2        4.0
2      4        7.0
3     10        6.5
4     14       12.0
5     16        8.0
6     17       11.0
7     18       10.0
8     20       13.5
9     22        7.0
10    24       12.0
 ... with 25 more rows</code></pre>
<p>
We can even use a formula instead of a string:
</p>
<pre class="r"><code>simpleFunction(cars, ~dist)</code></pre>
<pre><code> A tibble: 35 x 2
    dist mean_speed
   &lt;dbl&gt;      &lt;dbl&gt;
1      2        4.0
2      4        7.0
3     10        6.5
4     14       12.0
5     16        8.0
6     17       11.0
7     18       10.0
8     20       13.5
9     22        7.0
10    24       12.0
... with 25 more rows</code></pre>
<p>
What if you want to pass column names and constants, for example to filter without hardcoding anything?
</p>
<p>
Trying to do it naively will only yield pain and despair:
</p>
<pre class="r"><code>simpleFunction &lt;- function(dataset, col_name, value){
  require("dplyr")
  dataset %&gt;% 
    filter\_(col\_name == value) %&gt;%
    summarise(mean_speed = mean(speed)) -&gt; dataset
  return(dataset)
}</code></pre>
<pre><code>&gt; simpleFunction(cars, "dist", 10)

  mean_speed
1        NaN

&gt; simpleFunction(cars, dist, 10)

 Error in col_name == value : 
  comparison (1) is possible only for atomic and list types 
  
&gt; simpleFunction(cars, ~dist, 10)

  mean_speed
1        NaN
</code></pre>
<p>
To solve this issue, we need to know a little bit about two concepts, <em>lazy evaluation</em> and <em>non-standard evaluation</em>. I recommend you read <a href="http://adv-r.had.co.nz/Computing-on-the-language.html">the following document</a> from Hadley Wickham’s book <em>Advanced R</em> as well as the part on lazy evaluation <a href="http://adv-r.had.co.nz/Functions.html#function-arguments">here</a>.
</p>
<p>
A nice package called <code>lazyeval</code> can help us out. We would like to make R understand that the column name is not <code>col_name</code> but the string inside it <code>"dist"</code>, and now we would like to use <code>filter()</code> for <code>dist</code> equal to <code>10</code>.
</p>
<p>
In the <code>lazyeval</code> package, you’ll find the function <code>interp()</code>. <code>interp()</code> allows you to
</p>
<blockquote class="blockquote">
<p>
build an expression up from a mixture of constants and variables.
</p>
</blockquote>
<p>
Take a look at this example:
</p>
<pre class="r"><code>library(lazyeval)
interp(~x+y, x = 2)</code></pre>
<pre><code>## ~2 + y</code></pre>
<p>
What you get back is this nice formula that you can then use within functions. To see why this is useful, let’s look at the above example again, and make it work using <code>interp()</code>:
</p>
<pre class="r"><code>simpleFunction &lt;- function(dataset, col_name, value){
  require("dplyr")
  require("lazyeval")
  filter\_criteria &lt;- interp(~y == x, .values=list(y = as.name(col_name), x = value))
  dataset %&gt;% 
    filter\_(filter_criteria) %&gt;%
    summarise(mean_speed = mean(speed)) -&gt; dataset
  return(dataset)
}


simpleFunction(cars, "dist", 10)</code></pre>
<pre><code>  mean\_speed
1        6.5</code></pre>
<p>
And now it works! For some reason, you have to pass the column name as a string though.
</p>
<p>
Sources: apart from the documents above, the following stackoverflow threads helped me out quite a lot: <a href="http://stackoverflow.com/questions/28973056/in-r-pass-column-name-as-argument-and-use-it-in-function-with-dplyrmutate-a">In R: pass column name as argument and use it in function with dplyr::mutate() and lazyeval::interp()</a> and <a href="http://stackoverflow.com/questions/26492280/non-standard-evaluation-nse-in-dplyrs-filter-pulling-data-from-mysql">Non-standard evaluation (NSE) in dplyr’s filter_ &amp; pulling data from MySQL</a>.
</p>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2016-07-18-data-frame-columns-as-arguments-to-dplyr-functions.html</guid>
  <pubDate>Sun, 17 Jul 2016 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Careful with tryCatch</title>
  <link>https://b-rodrigues.github.io/posts/2016-06-21-careful-with-trycatch.html</link>
  <description><![CDATA[ 




<!-- MathJax scripts -->
<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<p>
<code>tryCatch</code> is one of the functions that allows the users to handle errors in a simple way. With it, you can do things like: <code>if(error), then(do this)</code>.
</p>
<p>
Take the following example:
</p>
<pre class="r"><code>sqrt("a")
Error in sqrt("a") : non-numeric argument to mathematical function</code></pre>
<p>
Now maybe you’d want something to happen when such an error happens. You can achieve that with <code>tryCatch</code>:
</p>
<pre class="r"><code>tryCatch(sqrt("a"), error=function(e) print("You can't take the square root of a character, silly!"))</code></pre>
<pre><code>## [1] "You can't take the square root of a character, silly!"</code></pre>
<p>
Why am I interested in <code>tryCatch</code>?
</p>
<p>
I am currently working with dates, specifically birthdays of people in my data sets. For a given mother, the birthday of her child is given in three distinct columns: a column for the child’s birth year, birth month and birth day respectively. I’ve wanted to put everything in a single column and convert the birthday to unix time (I have a very good reason to do that, but I won’t bore you with the details).
</p>
<p>
Let’s create some data:
</p>
<pre class="r"><code>mother &lt;- as.data.frame(list(month=12, day=1, year=1988))</code></pre>
<p>
In my data, there’s a lot more columns of course, such as the mother’s wage, education level, etc, but for illustration purposes, this is all that’s needed.
</p>
<p>
Now, to create this birthday column:
</p>
<pre class="r"><code>mother$birth1 &lt;- as.POSIXct(paste0(as.character(mother$year), 
                                   "-", as.character(mother$month), 
                                   "-", as.character(mother$day)), 
                            origin="1970-01-01")</code></pre>
<p>
and to convert it to unix time:
</p>
<pre class="r"><code>mother$birth1 &lt;- as.numeric(as.POSIXct(paste0(as.character(mother$year), 
                                              "-", as.character(mother$month), 
                                              "-", as.character(mother$day)),
                                       origin="1970-01-01"))

print(mother)</code></pre>
<pre><code>##   month day year    birth1
## 1    12   1 1988 596934000</code></pre>
<p>
Now let’s see what happens in this other example here:
</p>
<pre class="r"><code>mother2 &lt;- as.data.frame(list(month=2, day=30, year=1988))

mother2$birth1 &lt;- as.POSIXct(paste0(as.character(mother2$year), 
                                    "-", as.character(mother2$month), 
                                    "-", as.character(mother2$day)), 
                             origin="1970-01-01")</code></pre>
<p>
This is what happens:
</p>
<pre><code>Error in as.POSIXlt.character(x, tz, ...) : 
  character string is not in a standard unambiguous format</code></pre>
<p>
This error is to be expected; there is no 30th of February! It turns out that in some rare cases, weird dates like this exist in my data. Probably some encoding errors. Not a problem I thought, I could use <code>tryCatch</code> and return <code>NA</code> in the case of an error.
</p>
<pre class="r"><code>mother2 &lt;- as.data.frame(list(month=2, day=30, year=1988))

mother2$birth1 &lt;- tryCatch(as.POSIXct(paste0(as.character(mother2$year), 
                                    "-", as.character(mother2$month), 
                                    "-", as.character(mother2$day)), 
                             origin="1970-01-01"), error=function(e) NA)

print(mother2)</code></pre>
<pre><code>##   month day year birth1
## 1     2  30 1988     NA</code></pre>
<p>
Pretty great, right? Well, no. Take a look at what happens in this case:
</p>
<pre class="r"><code>mother &lt;- as.data.frame(list(month=c(12, 2), day=c(1, 30), year=c(1988, 1987)))
print(mother)</code></pre>
<pre><code>##   month day year
## 1    12   1 1988
## 2     2  30 1987</code></pre>
<p>
We’d expect to have a correct date for the first mother and an <code>NA</code> for the second. However, this is what happens
</p>
<pre class="r"><code>mother$birth1 &lt;- tryCatch(as.POSIXct(paste0(as.character(mother$year), 
                                    "-", as.character(mother$month), 
                                    "-", as.character(mother$day)), 
                             origin="1970-01-01"), error=function(e) NA)

print(mother)</code></pre>
<pre><code>##   month day year birth1
## 1    12   1 1988     NA
## 2     2  30 1987     NA</code></pre>
<p>
As you can see, we now have an <code>NA</code> for both mothers! That’s actually to be expected. Indeed, this little example illustrates it well:
</p>
<pre class="r"><code>sqrt(c(4, 9, "haha"))</code></pre>
<pre><code>Error in sqrt(c(4, 9, "haha")) : 
  non-numeric argument to mathematical function</code></pre>
<p>
But you’d like to have this:
</p>
<pre><code>[1]  2  3 NA</code></pre>
<p>
So you could make the same mistake as myself and use tryCatch:
</p>
<pre class="r"><code>tryCatch(sqrt(c(4, 9, "haha")), error=function(e) NA)</code></pre>
<pre><code>## [1] NA</code></pre>
<p>
But you only get <code>NA</code> in return. That’s actually completely normal, but it took me off-guard and I spent quite some time to figure out what was happening. Especially because I had written unit tests to test my function <code>create_birthdays()</code> that was doing the above computations and all tests were passing! The problem was that in my tests, I only had a single individual, so for a wrong date, having <code>NA</code> for this individual was expected behaviour. But in a panel, only some individuals have a weird date like the 30th of February, but because of those, the whole column was filled with <code>NA</code>’s! What I’m doing now is trying to either remove these weird birthdays (there are mothers whose children were born on the 99-99-9999. Documentation is lacking, but this probably means <code>missing value</code>), or tyring to figure out how to only get <code>NA</code>’s for the “weird” dates. I guess that the answer lies with <code>dplyr</code>’s <code>group_by()</code> and <code>mutate()</code> to compute this birthdays for each individual separately.
</p>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2016-06-21-careful-with-trycatch.html</guid>
  <pubDate>Wed, 30 Mar 2016 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Unit testing with R</title>
  <link>https://b-rodrigues.github.io/posts/2016-03-31-unit-testing-with-r.html</link>
  <description><![CDATA[ 




<!-- MathJax scripts -->
<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<p>
I've been introduced to unit testing while working with colleagues on quite a big project for which we use Python.
</p>
<p>
At first I was a bit skeptical about the need of writing unit tests, but now I must admit that I am seduced by the idea and by the huge time savings it allows. Naturally, I was wondering if the same could be achieved with R, and was quite happy to find out that it also possible to write unit tests in R using a package called <code>testthat</code>.
</p>
<p>
Unit tests (Not to be confused with unit root tests for time series) are small functions that test your code and help you make sure everything is alright. I'm going to show how the <code>testthat</code> packages works with a very trivial example, that might not do justice to the idea of unit testing. But you'll hopefully see why writing unit tests is not a waste of your time, especially if your project gets very complex (if you're writing a package for example).
</p>
<p>
First, you'll need to download and install <code>testthat</code>. Some dependencies will also be installed.
</p>
<p>
Now, you'll need a function to test. Let's suppose you've written a function that returns the nth Fibonacci number:
</p>
<pre><code class="r">Fibonacci &lt;- function(n){
    a &lt;- 0
    b &lt;- 1
    for (i in 1:n){
        temp &lt;- b
        b &lt;- a
        a &lt;- a + temp
    }
    return(a)
}
</code></pre>
<p>
You then save this function in a file, let's call it <code>fibo.R</code>. What you'll probably do once you've written this function, is to try it out:
</p>
<pre><code class="r">Fibonacci(5)
</code></pre>
<pre><code>## [1] 5
</code></pre>
<p>
You'll see that the function returns the right result and continue programming. The idea behind unit testing is write a bunch of functions that you can run after you make changes to your code, just to check that everything is still running as it should.
</p>
<p>
Let's create a script called <code>test_fibo.R</code> and write the following code in it:
</p>
<pre><code class="r">test_that("Test Fibo(15)",{
  phi &lt;- (1 + sqrt(5))/2
  psi &lt;- (1 - sqrt(5))/2
  expect_equal(Fibonacci(15), (phi**15 - psi**15)/sqrt(5))
})
</code></pre>
<p>
The code above uses Binet's formula, a closed form formula that gives the nth Fibonacci number and compares it our implementation of the algorithm. If you didn't know about Binet's formula, you could simply compute some numbers by hand and compare them to what your function returns, for example. The function <code>expect_equal</code> is a function from the package <code>testthat</code> and does exactly what it tells. We expect the result of our implementation to be equal to the result of Binet's Formula. The file <code>test_fibo.R</code> can contain as many tests as you need. Also, the file that contains the tests must start with the string <code>test</code>, so that <code>testthat</code> knows with files it has to run.
</p>
<p>
Now, we're almost done, create yet another script, let's call it <code>run_tests.R</code> and write the following code in it:
</p>
<pre><code class="r">library(testthat) 

source("path/to/fibo.R")

test_results &lt;- test_dir("path/to/tests", reporter="summary")
</code></pre>
<p>
After running these lines, and if everything goes well, you should see a message like this:
</p>
<pre><code>&gt; library(testthat)
&gt; source("path/to/fibo.R")
&gt; test_results &lt;- test_dir("path/to/tests", reporter="summary")

.
Your tests are dandy! 
</code></pre>
<p>
Notice the small <code>.</code> over the message? This means that one test was run successfully. You'll get one dot per successful test. If you take a look at <code>test_results</code> you'll see this:
</p>
<pre><code>&gt; test_results
         file context          test nb failed skipped error  user system  real
1 test_fibo.R         Test Fibo(15)  1      0   FALSE FALSE 0.004      0 0.006
</code></pre>
<p>
You'll see each file and each function inside the files that were tested, and also whether the test was skipped, failed etc. This may seem overkill for such a simple function, but imagine that you write dozens of functions that get more and more complex over time. You might have to change a lot of lines because as time goes by you add new functionality, but don't want to break what was working. Running your unit tests each time you make changes can help you pinpoint regressions in your code. Unit tests can also help you start with your code. It can happen that sometimes you don't know exactly how to start; well you could start by writing a unit test that returns the result you want to have and then try to write the code to make that unit test pass. This is called test-driven development.
</p>
<p>
I hope that this post motivated you to write unit tests and make you a better R programmer!
</p>


 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2016-03-31-unit-testing-with-r.html</guid>
  <pubDate>Wed, 30 Mar 2016 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Bootstrapping standard errors for difference-in-differences estimation with R</title>
  <link>https://b-rodrigues.github.io/posts/2015-11-11-bootstrapping-did-with-r.html</link>
  <description><![CDATA[ 




<!-- MathJax scripts -->
<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<p>
I’m currently working on a paper (with my colleague Vincent Vergnat who is also a Phd candidate at BETA) where I want to estimate the causal impact of the birth of a child on hourly and daily wages as well as yearly worked hours. For this we are using non-parametric difference-in-differences (henceforth DiD) and thus have to bootstrap the standard errors. In this post, I show how this is possible using the function <code>boot</code>.
</p>
<p>
For this we are going to replicate the example from Wooldridge’s <em>Econometric Analysis of Cross Section and Panel Data</em> and more specifically the example on page 415. You can download the data for R <a href="/assets/files/kielmc.RData">here</a>. The question we are going to try to answer is <em>how much does the price of housing decrease due to the presence of an incinerator in the neighborhood?</em>
</p>
<p>
First put the data in a folder and set the correct working directory and load the <code>boot</code> library.
</p>
<pre class="r"><code>library(boot)
setwd("/home/path/to/data/kiel data/")
load("kielmc.RData")</code></pre>
<p>
Now you need to write a function that takes the data as an argument, as well as an indices argument. This argument is used by the <code>boot</code> function to select samples. This function should return the statistic you’re interested in, in our case, the DiD estimate.
</p>
<pre class="r"><code>run_DiD &lt;- function(my_data, indices){
    d &lt;- my_data[indices,]
    return(
        mean(d$rprice[d$year==1981 &amp; d$nearinc==1]) - 
        mean(d$rprice[d$year==1981 &amp; d$nearinc==0]) - 
        (mean(d$rprice[d$year==1978 &amp; d$nearinc==1]) - 
        mean(d$rprice[d$year==1978 &amp; d$nearinc==0]))
    )
}</code></pre>
<p>
You’re almost done! To bootstrap your DiD estimate you just need to use the boot function. If you have cpu with multiple cores (which you should, single core machines are quite outdated by now) you can even parallelize the bootstrapping.
</p>
<pre class="r"><code>boot_est &lt;- boot(data, run_DiD, R=1000, parallel="multicore", ncpus = 2)</code></pre>
<p>
Now you should just take a look at your estimates:
</p>
<pre class="r"><code>boot_est</code></pre>
<pre><code> 
ORDINARY NONPARAMETRIC BOOTSTRAP


Call:
boot(data = data, statistic = run_DiD, R = 1000, parallel = "multicore", 
 ncpus = 2)


Bootstrap Statistics :
 original    bias    std. error
t1* -11863.9 -553.3393    8580.435</code></pre>
<p>
These results are very similar to the ones in the book, only the standard error is higher.
</p>
<p>
You can get confidence intervals like this:
</p>
<pre class="r"><code>quantile(boot_est$t, c(0.025, 0.975))</code></pre>
<pre><code>##       2.5%      97.5% 
## -30186.397   3456.133</code></pre>
<p>
or a t-statistic:
</p>
<pre class="r"><code>boot_est$t0/sd(boot_est$t)</code></pre>
<pre><code>## [1] -1.382669</code></pre>
<p>
Or the density of the replications:
</p>
<pre class="r"><code>plot(density(boot_est$t))</code></pre>
<div style="text-align:center;">
<pre><code>&lt;img src="/img/density_did.png" width="670" height="450" /&gt;&lt;/a&gt;</code></pre>
</div>
<p>
Just as in the book, we find that the DiD estimate is not significant to the 5% level.
</p>


 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2015-11-11-bootstrapping-did-with-r.html</guid>
  <pubDate>Tue, 10 Nov 2015 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Update to Introduction to programming econometrics with R</title>
  <link>https://b-rodrigues.github.io/posts/2015-05-03-update-introduction-r-programming.html</link>
  <description><![CDATA[ 




<!-- MathJax scripts -->
<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<p>This semester I taught a course on applied econometrics with the R programming language. For this, I created a document that I gave to my students and shared online. This is the kind of document I would have liked to read when I first started using R. I already had some programming experience in C and Pascal but this is not necessarily the case for everyone that is confronted to R when they start learning about econometrics.</p>
<p>This is why the beginning of the document focuses more on general programming knowledge and techniques, and then only on econometrics. People online seemed to like the document, as I’ve received some positive comments by David Smith from Revolution R (read his blog post about the document <a href="http://blog.revolutionanalytics.com/2015/01/introduction-to-applied-econometrics-with-r.html">here</a>) and Dave Giles which links to David’s blog post <a href="http://davegiles.blogspot.fr/2015/04/introduction-to-applied-econometrics.html?spref=tw">here</a>. People on twitter have also retweeted David’s and Dave’s tweets to their blog posts and I’ve received some requests by people to send them the PDF by email (because they live in places where Dropbox is not accessible unfortunately).</p>
<p>The document is still a work in progress (and will probably remain so for a long time), but I’ve added some new sections about reproducible research and thought that this update could warrant a new blog post.</p>
<p>For now, only linear models are reviewed, but I think I’ll start adding some chapters about non-linear models soonish. The goal for these notes, however, is not to re-invent the wheel: there are lots of good books about econometrics with R out there and packages that estimate a very wide range of models. What I want for these notes, is to focus more on the programming knowledge an econometrician needs, in a very broad and general sense. I want my students to understand that R is a true programming language, and that they need to use every feature offered by such a language, and not think of R as a black box into which you only type pre-programmed commands, but also be able to program their own routines.</p>
<p>Also, I’ve made it possible to create the PDF using a Makefile. This may be useful for people that do not have access to Dropbox, but are familiar with git.</p>
<p>You can compile the book in two ways: first download the whole repository:</p>
<p><code>git clone git@bitbucket.org:b-rodrigues/programmingeconometrics.git</code></p>
<p>and then, with Rstudio, open the file <em>appliedEconometrics.Rnw</em> and knit it. Another solution is to use the Makefile. Just type:</p>
<p><code>make</code></p>
<p>inside a terminal (should work on GNU+Linux and OSX systems) and it should compile the document. You may get some message about “additional information” for some R packages. When these come up, just press Q on your keyboard to continue the compilation process.</p>
<p>Get the notes <a href="https://cloud.openmailbox.org/index.php/s/ghZwBxMb24tWGSL">here</a>.</p>
<p>As always, if you have questions or suggestions, do not hesitate to send me an <a href="mailto:contact@brodrigues.co">email</a> and I sure hope you’ll find these notes useful!</p>

 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <category>book</category>
  <guid>https://b-rodrigues.github.io/posts/2015-05-03-update-introduction-r-programming.html</guid>
  <pubDate>Sat, 02 May 2015 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Export R output to a file</title>
  <link>https://b-rodrigues.github.io/posts/2015-02-22-export-r-output-to-file.html</link>
  <description><![CDATA[ 




<!-- MathJax scripts -->
<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<p>
Sometimes it is useful to export the output of a long-running R command. For example, you might want to run a time consuming regression just before leaving work on Friday night, but would like to get the output saved inside your Dropbox folder to take a look at the results before going back to work on Monday.
</p>
<p>
This can be achieved very easily using <code>capture.output()</code> and <code>cat()</code> like so:
</p>
<pre><code>out &lt;- capture.output(summary(my_very_time_consuming_regression))

cat("My title", out, file="summary_of_my_very_time_consuming_regression.txt", sep="\n", append=TRUE)</code></pre>
<p>
<code>my_very_time_consuming_regression</code> is an object of class <code>lm</code> for example. I save the output of <code>summary(my_very_time_consuming_regression)</code> as text using <code>capture.output</code> and save it in a variable called <code>out</code>. Finally, I save <code>out</code> to a file called <code>summary_of_my_very_time_consuming_regression.txt</code> with the first sentence being <code>My title</code> (you can put anything there). The file <code>summary_of_my_very_time_consuming_regression.txt</code> doesn’t have to already exist in your working directory. The option <code>sep=""</code> is important or else the whole output will be written in a single line. Finally, <code>append=TRUE</code> makes sure your file won’t be overwritten; additional output will be appended to the file, which can be nice if you want to compare different versions of your model.
</p>


 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2015-02-22-export-r-output-to-file.html</guid>
  <pubDate>Sat, 21 Feb 2015 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to programming econometrics with R</title>
  <link>https://b-rodrigues.github.io/posts/2015-01-12-introduction-to-programming-econometrics-with-r.html</link>
  <description><![CDATA[ 




<p>This semester, I’ll be teaching an introduction to applied econometrics with R, so I’ve decided to write a very small book called “Introduction to programming Econometrics with R”. This is primarily intended for bachelor students and the focus is not much on econometric theory, but more on how to implement econometric theory into computer code, using the R programming language. It’s very basic and doesn’t cover any advanced topics in econometrics and is intended for people with 0 previous programming knowledge. It is still very rough around the edges, and it’s missing the last chapter about reproducible research, and the references, but I think it’s time to put it out there; someone else than my students may find it useful. The book’s probably full of typos and mistakes, so don’t hesitate to drop me an e-mail if you find something fishy: contact@brodrigues.co</p>
<p>Also there might be some sections at the beginning that only concern my students. Just ignore that.</p>
<p>Get it here: <a href="https://cloud.openmailbox.org/index.php/s/ghZwBxMb24tWGSL">download</a></p>
<section id="update-2017-01-22" class="level3">
<h3 class="anchored" data-anchor-id="update-2017-01-22">Update (2017-01-22)</h3>
<p>You might find the book useful as it is now, but I never had a chance to finish it. I might get back to it once I’ll have more time, and port it to bookdown.</p>
</section>

 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <category>book</category>
  <guid>https://b-rodrigues.github.io/posts/2015-01-12-introduction-to-programming-econometrics-with-r.html</guid>
  <pubDate>Sun, 11 Jan 2015 23:00:00 GMT</pubDate>
</item>
<item>
  <title>R, R with Atlas, R with OpenBLAS and Revolution R Open: which is fastest?</title>
  <link>https://b-rodrigues.github.io/posts/2014-11-11-benchmarks-r-blas-atlas-rro.html</link>
  <description><![CDATA[ 




<!-- MathJax scripts -->
<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<p>
In this short post, I benchmark different “versions” of R. I compare the execution speeds of R, R linked against OpenBLAS, R linked against ATLAS and Revolution R Open. Revolution R Open is a new open source version of R made by Revolution Analytics. It is linked against MKL and should offer huge speed improvements over vanilla R. Also, it uses every cores of your computer by default, without any change whatsoever to your code.
</p>
<p>
TL;DR: Revolution R Open is the fastest of all the benchmarked versions (with R linked against OpenBLAS and ATLAS just behind), and easier to setup.
</p>
<h2 class="anchored">
Setup
</h2>
<p>
I benchmarked these different versions of R using <code>R-benchmark-25.R</code> that you can download <a href="http://r.research.att.com/benchmarks/R-benchmark-25.R">here</a>. This benchmark file was created by Simon Urbanek.
</p>
<p>
I ran the benchmarks on my OpenSUSE 13.2 computer with a Pentium Dual-Core CPU E6500@2.93GHz with 4GB of Ram. It's outdated, but it's still quite fast for most of my numerical computation needs. I installed “vanilla” R from the official OpenSUSE repositories which is currently at version 3.1.2.
</p>
<p>
Then, I downloaded OpenBLAS and ATLAS also from the official OpenSUSE repositories and made R use these libraries instead of its own implementation of BLAS. The way I did that is a bit hacky, but works: first, go to <code>/usr/lib64/R/lib</code> and backup <code>libRblas.so</code> (rename it to <code>libRblas.soBackup</code> for instance). Then link <code>/usr/lib64/libopenblas.so.0</code> to <code>/usr/lib64/R/lib/libRblas</code>, and that's it, R will use OpenBLAS. For ATLAS, you can do it in the same fashion, but you'll find the library in <code>/usr/lib64/atlas/</code>. These paths should be the same for any GNU/Linux distribution. For other operating systems, I'm sure you can find where these libraries are with Google.
</p>
<p>
The last version I benchmarked was Revolution R Open. This is a new version of R released by Revolution Analytics. Revolution Analytics had their own version of R, called Revolution R, for quite some time now. They decided to release a completely free as in freedom and free as in free beer version of this product which they now renamed Revolution R Open. You can download Revolution R Open <a href="http://mran.revolutionanalytics.com/download/#review">here</a>. You can have both “vanilla” R and Revolution R Open installed on your system.
</p>
<h2 class="anchored">
Results
</h2>
<p>
I ran the <code>R-benchmark-25.R</code> 6 times for every version but will only discuss the 4 best runs.
</p>
<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 11px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 11px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg .tg-0ord{text-align:right}
</style>
<table class="tg">
<tbody><tr>
<th class="tg-031e">
R version
</th>
<th class="tg-0ord">
Fastest run
</th>
<th class="tg-0ord">
Slowest run
</th>
<th class="tg-0ord">
Mean Run
</th>
</tr>
<tr>
<td class="tg-031e">
Vanilla R
</td>
<td class="tg-0ord">
63.65
</td>
<td class="tg-0ord">
66.21
</td>
<td class="tg-0ord">
64.61
</td>
</tr>
<tr>
<td class="tg-031e">
OpenBLAS R
</td>
<td class="tg-0ord">
15.63
</td>
<td class="tg-0ord">
18.96
</td>
<td class="tg-0ord">
16.94
</td>
</tr>
<tr>
<td class="tg-031e">
ATLAS R
</td>
<td class="tg-0ord">
16.92
</td>
<td class="tg-0ord">
21.57
</td>
<td class="tg-0ord">
18.24
</td>
</tr>
<tr>
<td class="tg-031e">
RRO
</td>
<td class="tg-0ord">
14.96
</td>
<td class="tg-0ord">
16.08
</td>
<td class="tg-0ord">
15.49
</td>
</tr>
</tbody></table>
<p>
As you can read from the table above, Revolution R Open was the fastest of the four versions, but not significantly faster than BLAS or ATLAS R. However, RRO uses all the available cores by default, so if your code relies on a lot matrix algebra, RRO might be actually a lot more faster than OpenBLAS and ATLAS R. Another advantage of RRO is that it is very easy to install, and also works with Rstudio and is compatible with every R package to existence. “Vanilla” R is much slower than the other three versions, more than 3 times as slow!
</p>
<h2 class="anchored">
Conclusion
</h2>
<p>
With other benchmarks, you could get other results, but I don’t think that “vanilla” R could beat any of the other three versions. Whatever your choice, I recommend not using plain, “vanilla” R. The other options are much faster than standard R, and don't require much work to set up. I'd personally recommend Revolution R Open, as it is free software and compatible with CRAN packages and Rstudio.
</p>


 ]]></description>
  <category>R</category>
  <guid>https://b-rodrigues.github.io/posts/2014-11-11-benchmarks-r-blas-atlas-rro.html</guid>
  <pubDate>Mon, 10 Nov 2014 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Object Oriented Programming with R: An example with a Cournot duopoly</title>
  <link>https://b-rodrigues.github.io/posts/2014-04-23-r-s4-rootfinding.html</link>
  <description><![CDATA[ 




<!-- MathJax scripts -->
<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<p>
I started reading <em>Applied Computational Economics &amp; Finance</em> by Mario J. Miranda and Paul L. Fackler. It is a very interesting book that I recommend to every one of my colleagues. The only issue I have with this book, is that the programming language they use is Matlab, which is proprietary. While there is a free as in freedom implementation of the Matlab language, namely Octave, I still prefer using R. In this post, I will illustrate one example the authors present in the book with R, using the package <code>rootSolve</code>. <code>rootSolve</code> implements Newtonian algorithms to find roots of functions; to specify the functions for which I want the roots, I use R's Object-Oriented Programming (OOP) capabilities to build a model that returns two functions. This is optional, but I found that it was a good example to illustrate OOP, even though simpler solutions exist, one of which was proposed by reddit user TheDrownedKraken (whom I thank) and will be presented at the end of the article.
</p>
<h3 class="anchored">
Theoretical background
</h3>
<p>
The example is taken from Miranda's and Fackler's book, on page 35. The authors present a Cournot duopoly model. In a Cournot duopoly model, two firms compete against each other by quantities. Both produce a certain quantity of an homogenous good, and take the quantity produce by their rival as given.
</p>
<p>
The inverse demand of the good is :
</p>
<p><img src="https://latex.codecogs.com/png.latex?P(q)%20=%20q%5E%7B-%5Cdfrac%7B1%7D%7B%5Ceta%7D%7D"></p>
<p>
the cost function for firm i is:
</p>
<p><img src="https://latex.codecogs.com/png.latex?C_i(q_i)%20=%20P(q_1+q_2)*q_i%20-%20C_i(q_i)"></p>
<p>
and the profit for firm i:
</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cpi_i(q1,q2)%20=%20P(q_1+q_2)q_i%20-%20C_i(q_i)"></p>
<p>
The optimality condition for firm i is thus:
</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B%5Cpartial%20%5Cpi_i%7D%7B%5Cpartial%20q_i%7D%20=%20(q1+q2)%5E%7B-%5Cdfrac%7B1%7D%7B%5Ceta%7D%7D%20-%20%5Cdfrac%7B1%7D%7B%5Ceta%7D%20(q_1+q_2)%5E%7B%5Cdfrac%7B-1%7D%7B%5Ceta-1%7D%7Dq_i%20-%20c_iq_i=0."></p>
<h3 class="anchored">
Implementation in R
</h3>
<p>
If we want to find the optimal quantities (q_1) and (q_2) we need to program the optimality condition and we could also use the jacobian of the optimality condition. The jacobian is generally useful to speed up the root finding routines. This is were OOP is useful. First let's create a new class, called <em>Model</em>:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">OptimCond =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">JacobiOptimCond =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>))</span></code></pre></div>
</div>
<p>
This new class has two <em>slots</em>, which here are functions (in general <em>slots</em> are properties of your class); we need the model to return the optimality condition and the jacobian of the optimality condition.
</p>
<p>
Now we can create a function which will return these two functions for certain values of the parameters, <em>c</em> and <img src="http://latex.codecogs.com/png.latex?\inline \eta" alt="\inline \eta"> of the model:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">my_mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(eta, c) {</span>
<span id="cb2-2">    e <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>eta</span>
<span id="cb2-3"></span>
<span id="cb2-4">    OptimCond <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(q) {</span>
<span id="cb2-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(c) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> q)</span>
<span id="cb2-6">    }</span>
<span id="cb2-7"></span>
<span id="cb2-8">    JacobiOptimCond <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>lt;<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(q) {</span>
<span id="cb2-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(</span>
<span id="cb2-10">        (e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-11">        (e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-12">        (e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(c)</span>
<span id="cb2-13">      )</span>
<span id="cb2-14">    }</span>
<span id="cb2-15"></span>
<span id="cb2-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">OptimCond =</span> OptimCond, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">JacobiOptimCond =</span> JacobiOptimCond))</span>
<span id="cb2-17"></span>
<span id="cb2-18">}</span></code></pre></div>
</div>
<p>
The function <code>my_mod</code> takes two parameters, <code>eta</code> and <code>c</code> and returns two functions, the optimality condition and the jacobian of the optimality condition. Both are now accessible via <code>my_mod(eta=1.6,c = c(0.6,0.8))<span class="citation" data-cites="OptimCond">@OptimCond</span></code> and <code>my_mod(eta=1.6,c = c(0.6,0.8))<span class="citation" data-cites="JacobiOptimCond">@JacobiOptimCond</span></code> respectively (and by specifying values for <code>eta</code> and <code>c</code>).
</p>
<p>
Now, we can use the <code>rootSolve</code> package to get the optimal values (q_1) and (q_2)
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rootSolve"</span>)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiroot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_mod</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>OptimCond,</span>
<span id="cb3-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-5">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maxiter =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb3-6">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">jacfunc =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_mod</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>JacobiOptimCond)</span></code></pre></div>
</div>
<pre><code>## $root
## [1] 0.8396 0.6888
## 
## $f.root
##            [,1]
## [1,] -2.220e-09
## [2,]  9.928e-09
## 
## $iter
## [1] 4
## 
## $estim.precis
## [1] 6.074e-09
</code></pre>
<p>
After 4 iterations, we get that <img src="http://latex.codecogs.com/png.latex?\inline q_1" alt="\inline q_1"> and <img src="http://latex.codecogs.com/png.latex?\inline q_2" alt="\inline q_2"> are equal to 0.84 and 0.69 respectively, which are the same values as in the book!
</p>
<h3 class="anchored">
Suggestion by Reddit user, TheDrownedKraken
</h3>
<p>
I posted this blog post on the rstats subbreddit on <a href="http://www.reddit.com">www.reddit.com</a>. I got a very useful comment by reddit member TheDrownedKraken which suggested the following approach, which doesn't need a new class to be build. I thank him for this. Here is his suggestion:
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">generator <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(eta, a) {</span>
<span id="cb4-2">    e <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>eta</span>
<span id="cb4-3"></span>
<span id="cb4-4">    OptimCond <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(q) {</span>
<span id="cb4-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(a) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> q)</span>
<span id="cb4-6">    }</span>
<span id="cb4-7"></span>
<span id="cb4-8">    JacobiOptimCond <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(q) {</span>
<span id="cb4-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(</span>
<span id="cb4-10">        (e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-11">        (e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-12">        (e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(q)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(a)</span>
<span id="cb4-13">      )</span>
<span id="cb4-14">    }</span>
<span id="cb4-15"></span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">OptimCond =</span> OptimCond, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">JacobiOptimCond =</span> JacobiOptimCond))</span>
<span id="cb4-17"></span>
<span id="cb4-18">}</span>
<span id="cb4-19"></span>
<span id="cb4-20">f.s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generator</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>))</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiroot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> f.s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>OptimCond, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maxiter =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">jacfunc =</span> f.s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>JacobiOptimCond)</span></code></pre></div>
</div>
<pre><code>## $root
## [1] 0.8396 0.6888
## 
## $f.root
##            [,1]
## [1,] -2.220e-09
## [2,]  9.928e-09
## 
## $iter
## [1] 4
## 
## $estim.precis
## [1] 6.074e-09
</code></pre>




 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2014-04-23-r-s4-rootfinding.html</guid>
  <pubDate>Tue, 22 Apr 2014 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
