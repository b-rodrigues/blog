---
title: "Using R as a Computer Algebra System with Ryacas"
date: "2013-12-31"
categories:
  - R
  - econometrics
toc: true
---

<!-- MathJax scripts -->
<script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>


</head>

<body>
<p>R is used to perform statistical analysis and doesn&#39;t focus on symbolic maths. But it is sometimes useful to let the computer derive a function for you (and have the analytic expression of said derivative), but maybe you don&#39;t want to leave your comfy R shell. It is possible to turn R into a full-fledged computer algebra system. CASs are tools that perform symbolic operations, such as getting the expression of the derivative of a user-defined (and thus completely arbitrary) function. Popular CASs include the proprietary Mathematica and Maple. There exists a lot of CASs under a Free Software license, Maxima (based on the very old Macsyma), Yacas, Xcas&hellip; In this post I will focus on Yacas and the <code>Ryacas</code> libarary. There is also the possibility to use the <code>rSympy</code> library that uses the <code>Sympy</code> Python library, which has a lot more features than Yacas. However, depending on your operating system installation can be tricky as it also requires <code>rJava</code> as a dependency. </p>

<p>Even though <code>Ryacas</code> is quite nice to have, there are some issues though. For example, let&#39;s say you want the first derivative of a certain function f. If you use <code>Ryacas</code> to get it, the returned object won&#39;t be a function. There is a way to &ldquo;extract&rdquo; the text from the returned object and make a function out of it. But there are still other issues; I&#39;ll discuss them later.</p>

<h2>Installation</h2>

<p>Installation should be rather painless. On Linux you need to install Yacas first, which should be available in the major distros&#39; repositories. Then you can install <code>Ryacas</code> from within the R shell. On Windows, you need to run these three commands (don&#39;t bother installing Yacas first):</p>

```{r}
#| eval: FALSE
install.packages(Ryacas)
library(Ryacas)
yacasInstall()
```

<p>You can find more information on the <a href="https://code.google.com/p/ryacas/#INSTALLATION">project&#39;s page</a>.</p>

<h2>Example session</h2>

<p>First, you must load <code>Ryacas</code> and define symbols that you will use in your functions.</p>

```{r}
#| eval: FALSE
library(Ryacas)
```

<pre><code>## Loading required package: Ryacas Loading required package: XML
</code></pre>

```{r}
#| eval: FALSE
x <- Sym("x")
```

<p>You can then define your fonctions:</p>

```{r}
#| eval: FALSE
my_func <- function(x) {
  return(x/(x^2 + 3))
}
```

<p>And you can get the derivative for instance:</p>
```{r}
#| eval: FALSE
my_deriv <- yacas(deriv(my_func(x), x))
```

<pre><code>## [1] "Starting Yacas!"
</code></pre>

<p>If you check the class of <code>my_deriv</code>, you&#39;ll see that it is of class <code>yacas</code>, which is not very useful. Let&#39;s «convert» it to a function:</p>

```{r}
#| eval: FALSE
my_deriv2 <- function(x) {
  eval(parse(text = my_deriv$YacasForm))
}
```

<p>We can then evaluate it. A lot of different operations are possible. But there are some problems.</p>

<h2>Issues with Ryacas</h2>

<p>You can&#39;t use elements of a vector as parameters of your function, i.e.:</p>

```{r}
#| eval: FALSE
theta <- Sym("theta")
func <- function(x) {
  return(theta[1] * x + theta[2])
}
```

# Let&#39;s integrate this
Func <- yacas(Integrate(func(x), x))
</code></pre>

<p>returns <code>(x^2*theta)/2+NA*x;</code> which is not quite what we want&hellip;there is a workaround however. Define your functions like this:</p>

```{r}
#| eval: FALSE
a <- Sym("a")
b <- Sym("b")
func2 <- function(x) {
  return(a * x + b)
}

# Let&#39;s integrate this
Func2 <- yacas(Integrate(func2(x), x))
```

<p>we get the expected result: <code>(x^2*a)/2+b*x;</code>. Now replace <code>a</code> and <code>b</code> by the thetas:</p>

```{r}
#| eval: FALSE
Func2 <- gsub("a", "theta[1]", Func2$YacasForm)
Func2 <- gsub("b", "theta[2]", Func2)
```

<p>Now we have what we want: </p>

```{r}
#| eval: FALSE
Func2
```

<pre><code>## [1] "(x^2*theta[1])/2+theta[2]*x;"
</code></pre>

<p>You can then copy-paste this result into a function.</p>

<p>Another problem is if you use built-in functions that are different between R and Yacas. For example:</p>


```{r}
#| eval: FALSE
my_log <- function(x) {
    return(sin(log(2 + x)))
}
```

<p>Now try to differentiate it:</p>

```{r}
#| eval: FALSE
dmy_log <- yacas(deriv(my_log(x), x))
```

<p>you get: <code>Cos(Ln(x+2))/(x+2);</code>. The problem with this, is that R doesn&#39;t recognize <code>Cos</code> as the cosine (which is <code>cos</code> in R) and the same goes for <code>Ln</code>. These are valid Yacas functions, but that is not the case in R. So you&#39;ll have to use <code>gsub</code> to replace these functions and then copy paste the end result into a function.</p>

<h2>Conclusion</h2>

<p>While it has some flaws, <code>Ryacas</code> can be quite useful if you need to derive or integrate complicated expressions that you then want to use in R. Using some of the tricks I showed here, you should be able to overcome some of its shortcomings. If installation of <code>rJava</code> and thus <code>rSympy</code> becomes easier, I&#39;ll probably also do a short blog-post about it, as it has more features than <code>Ryacas</code>.</p>

</body>



