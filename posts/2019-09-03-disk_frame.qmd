---
date: 2019-09-03
title: "{disk.frame} is epic"
categories:
  - R
  - data-science
toc: true
execute:
  freeze: auto
---


<div style="text-align:center;">
<p><a href="https://youtu.be/3XMTyi_H4q4">
<img src="../assets/img/disk_frame.png" title = "Zhuo Jia Dai's talk at useR!2019"  width="80%" height="auto"></a></p>
</div>
<p>Note: When I started writing this blog post, I encountered a bug and filed a <a href="https://github.com/xiaodaigh/disk.frame/issues/141">bug report</a>
that I encourage you to read. The responsiveness of the developer was exemplary. Not only did Zhuo
solve the issue in record time, he provided ample code snippets to illustrate the solutions. Hats off
to him!</p>
<p>This blog post is a short presentation of <code>{disk.frame}</code> a package that makes it easy to work with
data that is too large to fit on RAM, but not large enough that it could be called big data. Think
data that is around 30GB for instance, or more, but nothing at the level of TBs.</p>
<p>I have already written a blog post about this topic, using Spark and the R library <code>{sparklyr}</code>, where
I showed how to set up <code>{sparklyr}</code> to import 30GB of data. I will import the same file here, and
run a very simple descriptive analysis. If you need context about the file I’ll be using, just
read the <a href="2018-02-16-importing_30gb_of_data.qmd">previous blog post</a>.</p>
<p>The first step, as usual, is to load the needed packages:</p>
<pre class="r"><code>library(tidyverse)
library(disk.frame)</code></pre>
<p>The next step is to specify how many cores you want to dedicate to <code>{disk.frame}</code>; of course, the
more cores you use, the faster the operations:</p>
<pre class="r"><code>setup_disk.frame(workers = 6)
options(future.globals.maxSize = Inf)</code></pre>
<p><code>setup_disk.frame(workers = 6)</code> means that 6 cpu threads will be dedicated to importing and working
on the data. The second line, <code>future.globals.maxSize = Inf</code> means that an <em>unlimited amount of data will be passed from worker to worker</em>,
as described in the documentation.</p>
<p>Now comes the interesting bit. If you followed the previous blog post, you should have a 30GB
csv file. This file was obtained by merging a lot of smaller sized csv files. In practice, you should
keep the files separated, and NOT merge them. This makes things much easier. However, as I said before,
I want to be in the situation, which already happened to me in the past, where I get a big-sized
csv file and I am to provide an analysis on that data. So, let’s try to read in that big file, which
I called <code>combined.csv</code>:</p>
<pre class="r"><code>path_to_data &lt;- &quot;path/to/data/&quot;

flights.df &lt;- csv_to_disk.frame(
  paste0(path_to_data, &quot;combined.csv&quot;), 
  outdir = paste0(path_to_data, &quot;combined.df&quot;),
  in_chunk_size = 2e6,
  backend = &quot;LaF&quot;)</code></pre>
<p>Let’s go through these lines, one at a time. In the first line, I simply define the path
to the folder that contains the data. The next chunk is where I read in the data using the
<code>csv_to_disk_frame()</code> function. The first option is simply the path to the csv file. The second
option <code>outdir =</code> is where you need to define the directory that will hold the intermediary files,
which are in the fst format. This folder, that contains these fst files, is the <code>disk.frame</code>.
fst files are created by the <code>{fst}</code> package, which <em>provides a fast, easy and flexible way to serialize data frames</em>.
This means that files that are in that format can be read and written much much faster than by
other means (see a benchmark of <code>{fst}</code> <a href="https://www.fstpackage.org/">here</a>).
The next time you want to import the data, you can use the <code>disk.frame()</code> function and point it to
the <code>combined.df</code> folder. <code>in_chunk_size =</code> specifies how many lines are to be read in one swoop,
and <code>backend =</code> is the underlying engine that reads in the data, in this case the <code>{LaF}</code> package.
The default backend is <code>{data.table}</code> and there is also a <code>{readr}</code> backend. As written in the
note at the beginning of the blog post, I encourage you to read the github issue to learn why I am
using the <code>LaF</code> backend (the <code>{data.table}</code> and <code>{readr}</code> backend work as well).</p>
<p>Now, let’s try to replicate what I did in my previous blog post, namely, computing the average
delay in departures per day. With <code>{disk.frame}</code>, one has to be very careful about something
important however; all the <code>group_by()</code> operations are performed <em>per chunk</em>. This means that a second
<code>group_by()</code> call might be needed. For more details, I encourage you to read the <a href="http://diskframe.com/articles/intro-disk-frame.html#grouping">documentation</a>.</p>
<p>The code below is what I want to perform; group by day, and compute the average daily flight delay:</p>
<pre class="r"><code>mean_dep_delay &lt;- flights.df %&gt;%
  group_by(YEAR, MONTH, DAY_OF_MONTH) %&gt;%
  summarise(mean_delay = mean(DEP_DELAY, na.rm = TRUE))</code></pre>
<p>However, because with <code>{disk.frame}</code>, <code>group_by()</code> calls are performed per chunk, the code must now
be changed. The first step is to compute the sum of delays within each chunk, and count the number
of days within each chunk. This is the time consuming part:</p>
<pre class="r"><code>tic &lt;- Sys.time()
mean_dep_delay &lt;- flights.df %&gt;%
  group_by(YEAR, MONTH, DAY_OF_MONTH) %&gt;%
  summarise(sum_delay = sum(DEP_DELAY, na.rm = TRUE), n = n()) %&gt;%
  collect()
(toc = Sys.time() - tic)
Time difference of 1.805515 mins</code></pre>
<p>This is pretty impressive! It is much faster than with <code>{sparklyr}</code>. But we’re not done yet, we
still need to compute the average:</p>
<pre class="r"><code>mean_dep_delay &lt;- mean_dep_delay %&gt;%
  group_by(YEAR, MONTH, DAY_OF_MONTH) %&gt;%
  summarise(mean_delay = sum(sum_delay)/sum(n))</code></pre>
<p>It is important to keep in mind that <code>group_by()</code> works by chunks when dealing with <code>disk.frame</code>
objects.</p>
<p>To conclude, we can plot the data:</p>
<pre class="r"><code>library(lubridate)
dep_delay &lt;- mean_dep_delay %&gt;%
  arrange(YEAR, MONTH, DAY_OF_MONTH) %&gt;%
  mutate(date = ymd(paste(YEAR, MONTH, DAY_OF_MONTH, sep = &quot;-&quot;)))

ggplot(dep_delay, aes(date, mean_delay)) +
  geom_smooth(colour = &quot;#82518c&quot;) + 
  brotools::theme_blog()</code></pre>
<pre><code>## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39;</code></pre>
<p><img src="../assets/img/disk_frame-9-1.png" width="80%" height="auto" /></p>
<p><code>{disk.frame}</code> is really promising, and I will monitor this package very closely. I might write
another blog post about it, focusing this time on using machine learning with <code>disk.frame</code> objects.</p>
