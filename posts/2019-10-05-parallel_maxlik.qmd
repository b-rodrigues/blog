---
date: 2019-10-05
title: "Split-apply-combine for Maximum Likelihood Estimation of a linear model"
categories:
  - R
  - programming
toc: true
---


<div style="text-align:center;">
<p><a href="http://www.univ-orleans.fr/deg/masters/ESA/CH/Chapter2_MLE.pdf">
<img src="../assets/img/hieforth.png" title = "click with thy mouse hither to wot moe about maximum plausability estimation" width="80%" height="auto"></a></p>
</div>
<script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<div id="intro" class="section level2">
<h2>Intro</h2>
<p>Maximum likelihood estimation is a very useful technique to fit a model to data used a lot in
econometrics and other sciences, but seems, at least to my knowledge, to not be so well known by
machine learning practitioners (but I may be wrong about that). Other useful techniques to confront models to data
used in econometrics are the minimum distance family of techniques such as the general method of
moments or Bayesian approaches, while machine learning practitioners seem to favor the minimization
of a loss function (the mean squared error in the case of linear regression for instance).</p>
<p>When I taught at the university, students had often some problems to understand the technique.
It is true that it is not as easy to understand as ordinary least squares, but I’ll try to explain
to the best of my abilities.</p>
<p>Given a sample of data, what is the unknown probability distribution
that <em>most likely</em> generated it? For instance, if your sample only contains 0’s and 1’s, and
the proportion of 1’s is 80%, what do you think is the most likely distribution that generated it?
The probability distribution that <em>most likely</em> generated such a dataset is a binomial distribution
with probability of success equal to 80%. It <em>might have been</em> a binomial distribution with probability
of success equal to, say, 60%, but the <em>most likely</em> one is one with probability of success equal
to 80%.</p>
<p>To perform maximum likelihood estimation, one thus needs to assume a certain probability distribution,
and then look for the parameters that maximize the likelihood that this distribution generated the
observed data. So, now the question is, how to maximize this likelihood? And mathematically speaking,
what is a <em>likelihood</em>?</p>
</div>
<div id="some-theory" class="section level2">
<h2>Some theory</h2>
<p>First of all, let’s assume that each observation from your dataset not only was generated from the
same distribution, but that each observation is also independent from each other. For instance, if in your sample
you have data on people’s wages and socio-economic background, it is safe to assume, under certain
circumstances, that the observations are independent.</p>
<p>Let <span class="math inline">\(X_i\)</span> be random variables, and <span class="math inline">\(x_i\)</span> be their realizations (actual observed values).
Let’s assume that the <span class="math inline">\(X_i\)</span> are distributed according
to a certain probability distribution <span class="math inline">\(D\)</span> with density <span class="math inline">\(f(\theta)\)</span> where <span class="math inline">\(\theta\)</span> is
a parameter of said distribution.
Because our sample is composed of i.i.d. random variables, the probability that it was generated by
our distribution <span class="math inline">\(D(\theta)\)</span> is:</p>
<p><span class="math display">\[\prod_{i=1}^N Pr(X_i = x_i)\]</span></p>
<p>It is customary to take the log of this expression:</p>
<p><span class="math display">\[\log(\prod_{i=1}^N Pr(X_i = x_i)) = \sum_{i=1}^N \log(Pr(X_i = x_i))\]</span></p>
<p>The expression above is called the <em>log-likelihood</em>, <span class="math inline">\(logL(\theta; x_1, ..., x_N)\)</span>. Maximizing this
function yields <span class="math inline">\(\theta^*\)</span>, the value of the parameter that makes the sample the most probable.
In the case of linear regression, the density function to use is the one from the Normal distribution.</p>
</div>
<div id="maximum-likelihood-of-the-linear-model-as-an-example-of-the-split-apply-combine-strategy" class="section level2">
<h2>Maximum likelihood of the linear model as an example of the split-apply-combine strategy</h2>
<p>Hadley Wickham’s seminal paper, <a href="https://www.jstatsoft.org/article/view/v040i01/v40i01.pdf">The Split-Apply-Combine Strategy for Data Analysis</a>
presents the <em>split-apply-combine</em> strategy, which should remind the reader of the map-reduce
framework from Google. The idea is to recognize that in some cases big problems are simply an
aggregation of smaller problems. This is the case for Maximum Likelihood Estimation of the linear
model as well.
The picture below illustrates how Maximum Likelihood works, in the standard case:</p>
<p><img src="../assets/img/maxlik_1.png" width="80%" height="auto"/><!-- --></p>
<p>Let’s use R to do exactly this. Let’s first start by simulating some data:</p>
<pre class="r"><code>library(&quot;tidyverse&quot;)
size &lt;- 500000

x1 &lt;- rnorm(size)
x2 &lt;- rnorm(size)
x3 &lt;- rnorm(size)

dep_y &lt;- 1.5 + 2*x1 + 3*x2 + 4*x3 + rnorm(size)

x_data &lt;- cbind(dep_y, 1, x1, x2, x3)

x_df &lt;- as.data.frame(x_data) %&gt;%
  rename(iota = V2)

head(x_df)</code></pre>
<pre><code>##       dep_y iota         x1          x2         x3
## 1  1.637044    1  0.2287198  0.91609653 -0.4006215
## 2 -1.684578    1  1.2780291 -0.02468559 -1.4020914
## 3  1.289595    1  1.0524842  0.30206515 -0.3553641
## 4 -3.769575    1 -2.5763576  0.13864796 -0.3181661
## 5 13.110239    1 -0.9376462  0.77965301  3.0351646
## 6  5.059152    1  0.7488792 -0.10049061  0.1307225</code></pre>
<p>Now that this is done, let’s write a function to perform Maximum Likelihood Estimation:</p>
<pre class="r"><code>loglik_linmod &lt;- function(parameters, x_data){
  sum_log_likelihood &lt;- x_data %&gt;%
    mutate(log_likelihood =
             dnorm(dep_y,
                   mean = iota*parameters[1] + x1*parameters[2] + x2*parameters[3] + x3*parameters[4],
                   sd = parameters[5],
                   log = TRUE)) %&gt;%
    summarise(sum(log_likelihood))

  -1 * sum_log_likelihood
}</code></pre>
<p>The function returns minus the log likelihood, because <code>optim()</code> which I will be using to optimize
the log-likelihood function minimizes functions by default (minimizing the opposite of a function is the
same as maximizing a function). Let’s optimize the function and see if we’re able to find the
parameters of the data generating process, <code>1.5, 2, 3, 4</code> and <code>1</code> (the standard deviation of the
error term):</p>
<pre class="r"><code>optim(c(1,1,1,1,1), loglik_linmod, x_data = x_df)</code></pre>
<p>We successfully find the parameters of our data generating process!</p>
<p>Now, what if I’d like to distribute the computation of the contribution to the likelihood of each
observations across my 12 cores? The goal is not necessarily to speed up the computations but
to be able to handle larger than RAM data. If I have data that is too large to fit in memory,
I could split it into chunks, compute the contributions to the likelihood of each chunk, sum
everything again, and voila! This is illustrated below:</p>
<p><img src="../assets/img/maxlik_2.png"   width="80%" height="auto"/><!-- --></p>
<p>To do this, I use the <code>{disk.frame}</code> package, and only need to change my <code>loglik_linmod()</code> function
slightly:</p>
<pre class="r"><code>library(&quot;disk.frame&quot;)
x_diskframe &lt;- as.disk.frame(x_df) #Convert the data frame to a disk.frame

loglik_linmod_df &lt;- function(parameters, x_data){
  sum_log_likelihood &lt;- x_data %&gt;%
    mutate(log_likelihood =
             dnorm(dep_y,
                   mean = iota*parameters[1] + x1*parameters[2] + x2*parameters[3] + x3*parameters[4],
                   sd = parameters[5],
                   log = TRUE)) %&gt;% 
    chunk_summarise(sum(log_likelihood))

  out &lt;- sum_log_likelihood %&gt;%
    collect() %&gt;%
    pull() %&gt;%
    sum()

  -out
}</code></pre>
<p>The function is applied to each chunk, and <code>chunk_summarise()</code> computes the sum of the contributions
inside each chunk. Thus, I first need to use <code>collect()</code> to transfer the chunk-wise sums in memory
and then use <code>pull()</code> to convert it to an atomic vector, and finally sum them all again.</p>
<p>Let’s now optimize this function:</p>
<pre class="r"><code>optim(rep(1, 5), loglik_linmod_df, x_data = x_diskframe)</code></pre>
<pre><code>## $par
## [1] 1.5351722 1.9566144 3.0067978 4.0202956 0.9889412
## 
## $value
## [1] 709977.2
## 
## $counts
## function gradient 
##      502       NA 
## 
## $convergence
## [1] 1
## 
## $message
## NULL</code></pre>
<p>This is how you can use the split-apply-combine approach for maximum likelihood estimation of a
linear model! This approach is quite powerful, and the familiar <code>map()</code> and <code>reduce()</code> functions
included in <code>{purrr}</code> can also help with this task. However, this only works if you can split your
problem into chunks, which is sometimes quite hard to achieve.</p>
<p>However, as usual, there is rarely a need to write your own functions, as <code>{disk.frame}</code> includes
the <code>dfglm()</code> function which can be used to estimate any generalized linear model using <code>disk.frame</code> objects!</p>
