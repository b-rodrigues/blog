---
date: 2018-12-21
title: "Using the tidyverse for more than data manipulation: estimating pi with Monte Carlo methods"
categories:
  - R
  - data-science
toc: true
execute:
  freeze: auto
---

<div style="text-align:center;">
<p><a href="https://www.youtube.com/watch?v=kZJY15dyMig">
<img width = "400" src="../assets/img/casino.jpg" title = "Audentes Fortuna Iuvat" width="80%" height="auto"></a></p>
</div>
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<p>This blog post is an excerpt of my ebook <em>Modern R with the tidyverse</em> that you can read for
free <a href="https://b-rodrigues.github.io/modern_R/">here</a>. This is taken from Chapter 5, which presents
the <code>{tidyverse}</code> packages and how to use them to compute descriptive statistics and manipulate data.
In the text below, I show how you can use the <code>{tidyverse}</code> functions and principles for the
estimation of <span class="math inline">\(\pi\)</span> using Monte Carlo simulation.</p>
<div id="going-beyond-descriptive-statistics-and-data-manipulation" class="section level2">
<h2>Going beyond descriptive statistics and data manipulation</h2>
<p>The <code>{tidyverse}</code> collection of packages can do much more than simply data manipulation and
descriptive statisics. You can use the principles we have covered and the functions you now know
to do much more. For instance, you can use a few <code>{tidyverse}</code> functions to do Monte Carlo simulations,
for example to estimate <span class="math inline">\(\pi\)</span>.</p>
<p>Draw the unit circle inside the unit square, the ratio of the area of the circle to the area of the
square will be <span class="math inline">\(\pi/4\)</span>. Then shot K arrows at the square; roughly <span class="math inline">\(K*\pi/4\)</span> should have fallen
inside the circle. So if now you shoot N arrows at the square, and M fall inside the circle, you have
the following relationship <span class="math inline">\(M = N*\pi/4\)</span>. You can thus compute <span class="math inline">\(\pi\)</span> like so: <span class="math inline">\(\pi = 4*M/N\)</span>.</p>
<p>The more arrows N you throw at the square, the better approximation of <span class="math inline">\(\pi\)</span> you’ll have. Let’s
try to do this with a tidy Monte Carlo simulation. First, let’s randomly pick some points inside
the unit square:</p>
<pre class="r"><code>library(tidyverse)
library(brotools)</code></pre>
<pre class="r"><code>n &lt;- 5000

set.seed(2019)
points &lt;- tibble(&quot;x&quot; = runif(n), &quot;y&quot; = runif(n))</code></pre>
<p>Now, to know if a point is inside the unit circle, we need to check wether <span class="math inline">\(x^2 + y^2 &lt; 1\)</span>. Let’s
add a new column to the <code>points</code> tibble, called <code>inside</code> equal to 1 if the point is inside the
unit circle and 0 if not:</p>
<pre class="r"><code>points &lt;- points %&gt;% 
    mutate(inside = map2_dbl(.x = x, .y = y, ~ifelse(.x**2 + .y**2 &lt; 1, 1, 0))) %&gt;% 
    rowid_to_column(&quot;N&quot;)</code></pre>
<p>Let’s take a look at <code>points</code>:</p>
<pre class="r"><code>points</code></pre>
<pre><code>## # A tibble: 5,000 x 4
##        N       x      y inside
##    &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
##  1     1 0.770   0.984       0
##  2     2 0.713   0.0107      1
##  3     3 0.303   0.133       1
##  4     4 0.618   0.0378      1
##  5     5 0.0505  0.677       1
##  6     6 0.0432  0.0846      1
##  7     7 0.820   0.727       0
##  8     8 0.00961 0.0758      1
##  9     9 0.102   0.373       1
## 10    10 0.609   0.676       1
## # … with 4,990 more rows</code></pre>
<p>The <code>rowid_to_column()</code> function, from the <code>{tibble}</code> package, adds a new column to the data frame
with an id, going from 1 to the number of rows in the data frame. Now, I can compute the estimation
of <span class="math inline">\(\pi\)</span> at each row, by computing the cumulative sum of the 1’s in the <code>inside</code> column and dividing
that by the current value of <code>N</code> column:</p>
<pre class="r"><code>points &lt;- points %&gt;% 
    mutate(estimate = 4*cumsum(inside)/N)</code></pre>
<p><code>cumsum(inside)</code> is the <code>M</code> from the formula. Now, we can finish by plotting the result:</p>
<pre class="r"><code>ggplot(points) + 
    geom_line(aes(y = estimate, x = N), colour = &quot;#82518c&quot;) + 
    geom_hline(yintercept = pi) +
    theme_blog()</code></pre>
<div style="text-align: center;"><img src="../assets/img/tidyverse_pi-7-1.png" width="80%" height="auto" / width="80%" height="auto"></div>
<p>In Chapter 6, we are going to learn all about <code>{ggplot2}</code>.</p>
<p>As the number of tries grows, the estimation of <span class="math inline">\(\pi\)</span> gets better.</p>
<p>Using a data frame as a structure to hold our simulated points and the results makes it very easy
to avoid loops, and thus write code that is more concise and easier to follow.
If you studied a quantitative field in u8niversity, you might have done a similar exercise at the
time, very likely by defining a matrix to hold your points, and an empty vector to hold whether a
particular point was inside the unit circle. Then you wrote a loop to compute whether
a point was inside the unit circle, save this result in the before-defined empty vector and then
compute the estimation of <span class="math inline">\(\pi\)</span>. Again, I take this opportunity here to stress that there is nothing
wrong with this approach per se, but R, with the <code>{tidyverse}</code> is better suited for a workflow
where lists or data frames are the central objects and where the analyst operates over them
with functional programming techniques.</p>
