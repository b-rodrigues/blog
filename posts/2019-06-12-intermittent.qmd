---
date: 2019-06-12
title: "Intermittent demand, Croston and Die Hard"
categories:
  - R
  - data-science
toc: true
execute:
  freeze: auto
---


<div style="text-align:center;">
<p><a href="https://en.wikipedia.org/wiki/List_of_Christmas_films">
<img src="../assets/img/diehard.jpg" title = "Die Hard is the best Christmas movie" width="80%" height="auto" width="80%" height="auto"></a></p>
</div>
<p>I have recently been confronted to a kind of data set and problem that I was not even aware existed:
intermittent demand data. Intermittent demand arises when the demand for a certain good arrives
sporadically. Let’s take a look at an example, by analyzing the number of downloads for the <code>{RDieHarder}</code>
package:</p>
<pre class="r"><code>library(tidyverse)
library(tsintermittent)
library(nnfor)
library(cranlogs)
library(brotools)</code></pre>
<pre class="r"><code>rdieharder &lt;- cran_downloads(&quot;RDieHarder&quot;, from = &quot;2017-01-01&quot;)

ggplot(rdieharder) +
  geom_line(aes(y = count, x = date), colour = &quot;#82518c&quot;) +
  theme_blog()</code></pre>
<div style="text-align: center;"><img src="../assets/img/intermittent-3-1.png" width="80%" height="auto" / width="80%" height="auto"></div>
<p>Let’s take a look at just one month of data, because the above plot is not very clear, because of
the outlier just before 2019… I wonder now, was that on Christmas day?</p>
<pre class="r"><code>rdieharder %&gt;%
  filter(count == max(count))</code></pre>
<pre><code>##         date count    package
## 1 2018-12-21   373 RDieHarder</code></pre>
<p>Not exactly on Christmas day, but almost! Anyways, let’s look at one month of data:</p>
<pre class="r"><code>january_2018 &lt;- rdieharder %&gt;%
  filter(between(date, as.Date(&quot;2018-01-01&quot;), as.Date(&quot;2018-02-01&quot;)))

ggplot(january_2018) +
  geom_line(aes(y = count, x = date), colour = &quot;#82518c&quot;) +
  theme_blog()</code></pre>
<div style="text-align: center;"><img src="../assets/img/intermittent-5-1.png" width="80%" height="auto" / width="80%" height="auto"></div>
<p>Now, it is clear that this will be tricky to forecast. There is no discernible pattern,
no trend, no seasonality… nothing that would make it “easy” for a model to learn how to forecast
such data.</p>
<p>This is typical intermittent demand data. Specific methods have been developed to forecast such
data, the most well-known being Croston, as detailed in
<a href="https://www.jstor.org/stable/3007885?seq=1#page_scan_tab_contents">this paper</a>.
A function to estimate such models is available in the <code>{tsintermittent}</code> package, written by
<a href="https://kourentzes.com/forecasting/2014/06/23/intermittent-demand-forecasting-package-for-r/">Nikolaos Kourentzes</a>
who also wrote another package, <code>{nnfor}</code>, which uses Neural Networks to forecast time series data.
I am going to use both to try to forecast the intermittent demand for the <code>{RDieHarder}</code> package
for the year 2019.</p>
<p>Let’s first load these packages:</p>
<pre class="r"><code>library(tsintermittent)
library(nnfor)</code></pre>
<p>And as usual, split the data into training and testing sets:</p>
<pre class="r"><code>train_data &lt;- rdieharder %&gt;%
  filter(date &lt; as.Date(&quot;2019-01-01&quot;)) %&gt;%
  pull(count) %&gt;%
  ts()

test_data &lt;- rdieharder %&gt;%
  filter(date &gt;= as.Date(&quot;2019-01-01&quot;))</code></pre>
<p>Let’s consider three models; a naive one, which simply uses the mean of the training set as the
forecast for all future periods, Croston’s method, and finally a Neural Network from the <code>{nnfor}</code>
package:</p>
<pre class="r"><code>naive_model &lt;- mean(train_data)

croston_model &lt;- crost(train_data, h = 163)

nn_model &lt;- mlp(train_data, reps = 1, hd.auto.type = &quot;cv&quot;)</code></pre>
<pre><code>## Warning in preprocess(y, m, lags, keep, difforder, sel.lag,
## allow.det.season, : No inputs left in the network after pre-selection,
## forcing AR(1).</code></pre>
<pre class="r"><code>nn_model_forecast &lt;- forecast(nn_model, h = 163)</code></pre>
<p>The <code>crost()</code> function estimates Croston’s model, and the <code>h</code> argument produces the
forecast for the next 163 days. <code>mlp()</code> trains a multilayer perceptron, and the <code>hd.auto.type = &quot;cv&quot;</code>
argument means that 5-fold cross-validation will be used to find the best number of hidden nodes. I
then obtain the forecast using the <code>forecast()</code> function. As you can read from the Warning message
above, the Neural Network was replaced by an auto-regressive model, AR(1), because no inputs were
left after pre-selection… I am not exactly sure what that means, but if I remove the big outlier
from before, this warning message disappears, and a Neural Network is successfully trained.</p>
<p>In order to rank the models, I follow <a href="https://www.sciencedirect.com/science/article/pii/S0169207006000239">this paper</a>
from Rob J. Hyndman, who wrote a very useful book titled <a href="https://otexts.com/fpp2/">Forecasting: Principles and Practice</a>,
and use the Mean Absolute Scaled Error, or MASE. You can also read <a href="https://robjhyndman.com/papers/foresight.pdf">this shorter pdf</a>
which also details how to use MASE to measure the accuracy for intermittent demand. Here is the
function:</p>
<pre class="r"><code>mase &lt;- function(train_ts, test_ts, outsample_forecast){

  naive_insample_forecast &lt;- stats::lag(train_ts)

  insample_mae &lt;- mean(abs(train_ts - naive_insample_forecast), na.rm = TRUE)
  error_outsample &lt;- test_ts - outsample_forecast

  ase &lt;- error_outsample / insample_mae
  mean(abs(ase), na.rm = TRUE)
}</code></pre>
<p>It is now easy to compute the models’ accuracies:</p>
<pre class="r"><code>mase(train_data, test_data$count, naive_model)</code></pre>
<pre><code>## [1] 1.764385</code></pre>
<pre class="r"><code>mase(train_data, test_data$count, croston_model$component$c.out[1])</code></pre>
<pre><code>## [1] 1.397611</code></pre>
<pre class="r"><code>mase(train_data, test_data$count, nn_model_forecast$mean)</code></pre>
<pre><code>## [1] 1.767357</code></pre>
<p>Croston’s method is the one that performs best from the three. Maybe surprisingly, the naive method
performs just as well as the Neural Network! (or rather, the AR(1) model) Let’s also plot the predictions
with the true values from the test set:</p>
<pre class="r"><code>test_data &lt;- test_data %&gt;%
  mutate(naive_model_forecast = naive_model,
         croston_model_forecast = croston_model$component$c.out[1],
         nn_model_forecast = nn_model_forecast$mean) %&gt;%
  select(-package) %&gt;%
  rename(actual_value = count)


test_data_longer &lt;- test_data %&gt;%
  gather(models, value,
         actual_value, naive_model_forecast, croston_model_forecast, nn_model_forecast)</code></pre>
<pre><code>## Warning: attributes are not identical across measure variables;
## they will be dropped</code></pre>
<pre class="r"><code>ggplot(test_data_longer) +
  geom_line(aes(y = value, x = date, colour = models)) +
  theme_blog()</code></pre>
<div style="text-align: center;"><img src="../assets/img/intermittent-13-1.png" width="80%" height="auto" / width="80%" height="auto"></div>
<p>Just to make sure I didn’t make a mistake when writing the <code>mase()</code> function, let’s use the
<code>accuracy()</code> function from the <code>{forecast}</code> package and compare the result for the Neural Network:</p>
<pre class="r"><code>library(forecast)
accuracy(nn_model_forecast, x = test_data$actual_value)</code></pre>
<pre><code>##                       ME     RMSE      MAE  MPE MAPE      MASE       ACF1
## Training set 0.001929409 14.81196 4.109577  NaN  Inf 0.8437033 0.05425074
## Test set     8.211758227 12.40199 8.635563 -Inf  Inf 1.7673570         NA</code></pre>
<p>The result is the same, so it does seem like the naive method is not that bad, actually! Now, in
general, intermittent demand series have a lot of 0 values, which is not really the case here. I
still think that the methodology fits to this particular data set.</p>
<p>How else would you have forecast this data? Let me know via twitter!</p>
