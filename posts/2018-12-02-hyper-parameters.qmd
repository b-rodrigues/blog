---
date: 2018-12-02
title: "What hyper-parameters are, and what to do with them; an illustration with ridge regression"
categories:
  - R
  - data-science
toc: true
execute:
  freeze: auto
---


<div style="text-align:center;">
<p><a href="https://www.youtube.com/watch?v=13Gd5kpLzsw">
<img width = "400" src="../assets/img/ridge.jpg" title = "Gameboy ridge"></a></p>
</div>
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<p>This blog post is an excerpt of my ebook <em>Modern R with the tidyverse</em> that you can read for
free <a href="https://b-rodrigues.github.io/modern_R/">here</a>. This is taken from Chapter 7, which deals
with statistical models. In the text below, I explain what hyper-parameters are, and as an example
I run a ridge regression using the <code>{glmnet}</code> package. The book is still being written, so
comments are more than welcome!</p>
<div id="hyper-parameters" class="section level2">
<h2>Hyper-parameters</h2>
<p>Hyper-parameters are parameters of the model that cannot be directly learned from the data.
A linear regression does not have any hyper-parameters, but a random forest for instance has several.
You might have heard of ridge regression, lasso and elasticnet. These are
extensions to linear models that avoid over-fitting by penalizing <em>large</em> models. These
extensions of the linear regression have hyper-parameters that the practitioner has to tune. There
are several ways one can tune these parameters, for example, by doing a grid-search, or a random
search over the grid or using more elaborate methods. To introduce hyper-parameters, let’s get
to know ridge regression, also called Tikhonov regularization.</p>
<div id="ridge-regression" class="section level3">
<h3>Ridge regression</h3>
<p>Ridge regression is used when the data you are working with has a lot of explanatory variables,
or when there is a risk that a simple linear regression might overfit to the training data, because,
for example, your explanatory variables are collinear.
If you are training a linear model and then you notice that it generalizes very badly to new,
unseen data, it is very likely that the linear model you trained overfits the data.
In this case, ridge regression might prove useful. The way ridge regression works might seem
counter-intuititive; it boils down to fitting a <em>worse</em> model to the training data, but in return,
this worse model will generalize better to new data.</p>
<p>The closed form solution of the ordinary least squares estimator is defined as:</p>

$$\widehat{\beta} = (X'X)^{-1}X'Y$$

<p>where $X$ is the design matrix (the matrix made up of the explanatory variables) and $Y$ is the
dependent variable. For ridge regression, this closed form solution changes a little bit:</p>

$$\widehat{\beta} = (X'X + \lambda I_p)^{-1}X'Y$$

<p>where $lambda \in \mathbb{R}$ is an hyper-parameter and $I_p$ is the identity matrix of dimension $p$
($p$ is the number of explanatory variables).
This formula above is the closed form solution to the following optimisation program:</p>

$$ \sum_{i=1}^n \left(y_i - \sum_{j=1}^px_{ij}\beta_j\right)^2 $$

<p>such that:</p>

$$ \sum_{j=1}^p(\beta_j)^2 < c$$

<p>for any strictly positive <span class="math inline">\(c\)</span>.</p>
<p>The <code>glmnet()</code> function from the <code>{glmnet}</code> package can be used for ridge regression, by setting
the <code>alpha</code> argument to 0 (setting it to 1 would do LASSO, and setting it to a number between
0 and 1 would do elasticnet). But in order to compare linear regression and ridge regression,
let me first divide the data into a training set and a testing set. I will be using the <code>Housing</code>
data from the <code>{Ecdat}</code> package:</p>
<pre class="r"><code>library(tidyverse)
library(Ecdat)
library(glmnet)</code></pre>
<pre class="r"><code>index &lt;- 1:nrow(Housing)

set.seed(12345)
train_index &lt;- sample(index, round(0.90*nrow(Housing)), replace = FALSE)

test_index &lt;- setdiff(index, train_index)

train_x &lt;- Housing[train_index, ] %&gt;% 
    select(-price)

train_y &lt;- Housing[train_index, ] %&gt;% 
    pull(price)

test_x &lt;- Housing[test_index, ] %&gt;% 
    select(-price)

test_y &lt;- Housing[test_index, ] %&gt;% 
    pull(price)</code></pre>
<p>I do the train/test split this way, because <code>glmnet()</code> requires a design matrix as input, and not
a formula. Design matrices can be created using the <code>model.matrix()</code> function:</p>
<pre class="r"><code>train_matrix &lt;- model.matrix(train_y ~ ., data = train_x)

test_matrix &lt;- model.matrix(test_y ~ ., data = test_x)</code></pre>
<p>To run an unpenalized linear regression, we can set the penalty to 0:</p>
<pre class="r"><code>model_lm_ridge &lt;- glmnet(y = train_y, x = train_matrix, alpha = 0, lambda = 0)</code></pre>
<p>The model above provides the same result as a linear regression. Let’s compare the coefficients between the two:</p>
<pre class="r"><code>coef(model_lm_ridge)</code></pre>
<pre><code>## 13 x 1 sparse Matrix of class &quot;dgCMatrix&quot;
##                       s0
## (Intercept) -3247.030393
## (Intercept)     .       
## lotsize         3.520283
## bedrooms     1745.211187
## bathrms     14337.551325
## stories      6736.679470
## drivewayyes  5687.132236
## recroomyes   5701.831289
## fullbaseyes  5708.978557
## gashwyes    12508.524241
## aircoyes    12592.435621
## garagepl     4438.918373
## prefareayes  9085.172469</code></pre>
<p>and now the coefficients of the linear regression (because I provide a design matrix, I have to use
<code>lm.fit()</code> instead of <code>lm()</code> which requires a formula, not a matrix.)</p>
<pre class="r"><code>coef(lm.fit(x = train_matrix, y = train_y))</code></pre>
<pre><code>##  (Intercept)      lotsize     bedrooms      bathrms      stories 
## -3245.146665     3.520357  1744.983863 14336.336858  6737.000410 
##  drivewayyes   recroomyes  fullbaseyes     gashwyes     aircoyes 
##  5686.394123  5700.210775  5709.493884 12509.005265 12592.367268 
##     garagepl  prefareayes 
##  4439.029607  9085.409155</code></pre>
<p>as you can see, the coefficients are the same. Let’s compute the RMSE for the unpenalized linear
regression:</p>
<pre class="r"><code>preds_lm &lt;- predict(model_lm_ridge, test_matrix)

rmse_lm &lt;- sqrt(mean((preds_lm - test_y)^2))</code></pre>
<p>The RMSE for the linear unpenalized regression is equal to 14463.08.</p>
<p>Let’s now run a ridge regression, with <code>lambda</code> equal to 100, and see if the RMSE is smaller:</p>
<pre class="r"><code>model_ridge &lt;- glmnet(y = train_y, x = train_matrix, alpha = 0, lambda = 100)</code></pre>
<p>and let’s compute the RMSE again:</p>
<pre class="r"><code>preds &lt;- predict(model_ridge, test_matrix)

rmse &lt;- sqrt(mean((preds - test_y)^2))</code></pre>
<p>The RMSE for the linear penalized regression is equal to 14460.71, which is smaller than before.
But which value of <code>lambda</code> gives smallest RMSE? To find out, one must run model over a grid of
<code>lambda</code> values and pick the model with lowest RMSE. This procedure is available in the <code>cv.glmnet()</code>
function, which picks the best value for <code>lambda</code>:</p>
<pre class="r"><code>best_model &lt;- cv.glmnet(train_matrix, train_y)
# lambda that minimises the MSE
best_model$lambda.min</code></pre>
<pre><code>## [1] 66.07936</code></pre>
<p>According to <code>cv.glmnet()</code> the best value for <code>lambda</code> is 66.0793576.
In the next section, we will implement cross validation ourselves, in order to find the hyper-parameters
of a random forest.</p>
