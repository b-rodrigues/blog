---
date: 2022-07-23
title: What's the fastest way to search and replace strings in a data frame?
categories:
  - R
  - proramming
toc: true
execute:
  freeze: auto
---

<div style="text-align:center;">
<p>
<a href="https://www.craiyon.com/">
<img src="../assets/img/wojak_violin.jpg" title = "Made by DALL-E mini" width="80%" height="auto"></a>
</p>
</div>
<p>I’ve tweeted this:</p>
<blockquote class="twitter-tweet">
<p lang="en" dir="ltr">
Just changed like 100 grepl calls to stringi::stri_detect and my pipeline now runs 4 times faster <a href="https://twitter.com/hashtag/RStats?src=hash&amp;ref_src=twsrc%5Etfw">#RStats</a>
</p>
— Bruno Rodrigues (<span class="citation">@brodriguesco</span>) <a href="https://twitter.com/brodriguesco/status/1549659454483857409?ref_src=twsrc%5Etfw">July 20, 2022</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>much discussed ensued. Some people were surprised, because in their experience, <code>grepl()</code>
was faster than alternatives, especially if you set the <code>perl</code> parameter in <code>grepl()</code> to <code>TRUE</code>.
My use case was quite simple; I have a relatively large data set (half a million lines) with
one column with several misspelling of city names. So I painstakingly wrote some code
to correct the spelling of the major cities (those that came up often enough to matter. Minor
cities were set to “Other”. Sorry, <a href="https://en.wikipedia.org/wiki/Wiltz">Wiltz</a>!)</p>
<p>So in this short blog post, I benchmark some code to see if what I did the other day was a fluke.
Maybe something weird with my R installation on my work laptop running Windows 10 somehow
made <code>stri_detect()</code> run faster than <code>grepl()</code>? I don’t even know if something like that is
possible. I’m writing these lines on my Linux machine, unlike the code I run at work.
So maybe if I find some differences, they could be due to the different OS running.
I don’t want to have to deal with Windows on my days off (for my blood pressure’s sake),
so I’m not running this benchmark on my work laptop. So that part we’ll never know.</p>
<p>Anyways, let’s start by getting some data. I’m not commenting the code below, because that’s not
the point of this post.</p>
<pre class="r"><code>library(dplyr)
library(stringi)
library(stringr)
library(re2)

adult &lt;- vroom::vroom(
  &quot;https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data&quot;
)

adult_colnames &lt;- readLines(
  &quot;https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.names&quot;
)

adult_colnames &lt;- adult_colnames[97:110] %&gt;%
  str_extract(&quot;.*(?=:)&quot;) %&gt;%
  str_replace_all(&quot;-&quot;, &quot;_&quot;)

adult_colnames &lt;- c(adult_colnames, &quot;wage&quot;)

colnames(adult) &lt;- adult_colnames

adult</code></pre>
<pre><code>## # A tibble: 32,560 × 15
##      age workclass    fnlwgt educa…¹ educa…² marit…³ occup…⁴ relat…⁵ race  sex  
##    &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;
##  1    50 Self-emp-no…  83311 Bachel…      13 Marrie… Exec-m… Husband White Male 
##  2    38 Private      215646 HS-grad       9 Divorc… Handle… Not-in… White Male 
##  3    53 Private      234721 11th          7 Marrie… Handle… Husband Black Male 
##  4    28 Private      338409 Bachel…      13 Marrie… Prof-s… Wife    Black Fema…
##  5    37 Private      284582 Masters      14 Marrie… Exec-m… Wife    White Fema…
##  6    49 Private      160187 9th           5 Marrie… Other-… Not-in… Black Fema…
##  7    52 Self-emp-no… 209642 HS-grad       9 Marrie… Exec-m… Husband White Male 
##  8    31 Private       45781 Masters      14 Never-… Prof-s… Not-in… White Fema…
##  9    42 Private      159449 Bachel…      13 Marrie… Exec-m… Husband White Male 
## 10    37 Private      280464 Some-c…      10 Marrie… Exec-m… Husband Black Male 
## # … with 32,550 more rows, 5 more variables: capital_gain &lt;dbl&gt;,
## #   capital_loss &lt;dbl&gt;, hours_per_week &lt;dbl&gt;, native_country &lt;chr&gt;, wage &lt;chr&gt;,
## #   and abbreviated variable names ¹​education, ²​education_num, ³​marital_status,
## #   ⁴​occupation, ⁵​relationship
## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
<p>Let’s now write the functions used for benchmarking. There will be 5 of them:</p>
<ul>
<li>One using <code>grepl()</code> without any fancy options;</li>
<li>One using <code>grepl()</code> where <code>perl</code> is set to <code>TRUE</code>;</li>
<li>One that uses <code>stringi::stri_detect()</code>;</li>
<li>One that uses <code>stringr::str_detect()</code>;</li>
<li>One that uses <code>re2::re2_detect()</code>.</li>
</ul>
<p>Below you can read the functions. They’re all pretty much the same, only the function
looking for the string changes. These functions look for a string in the <code>marital_status</code>
variable and create a new variable with a corresponding integer.</p>
<pre class="r"><code>with_grepl &lt;- function(dataset){
  dataset |&gt;
    mutate(married = case_when(
             grepl(&quot;Married&quot;, marital_status) ~ 1,
             grepl(&quot;married&quot;, marital_status) ~ 2,
             TRUE ~ 3)
           )
}

with_grepl_perl &lt;- function(dataset){
  dataset |&gt;
    mutate(married = case_when(
             grepl(&quot;Married&quot;, marital_status, perl = TRUE) ~ 1,
             grepl(&quot;married&quot;, marital_status, perl = TRUE) ~ 2,
             TRUE ~ 3)
           )
}

with_stringi &lt;- function(dataset){
  dataset |&gt;
    mutate(married = case_when(
             stri_detect(marital_status, regex = &quot;Married&quot;) ~ 1,
             stri_detect(marital_status, regex = &quot;married&quot;) ~ 2,
             TRUE ~ 3)
           )
}

with_stringr &lt;- function(dataset){
  dataset |&gt;
    mutate(married = case_when(
             str_detect(marital_status, &quot;Married&quot;) ~ 1,
             str_detect(marital_status, &quot;married&quot;) ~ 2,
             TRUE ~ 3)
           )
}

with_re2 &lt;- function(dataset){
  dataset |&gt;
    mutate(married = case_when(
             re2_detect(marital_status, &quot;Married&quot;) ~ 1,
             re2_detect(marital_status, &quot;married&quot;) ~ 2,
             TRUE ~ 3)
           )
}</code></pre>
<p>Now I make extra sure these functions actually return the exact same thing. So for this
I’m running them once on the data and use <code>testthat::expect_equal()</code>. It’s a bit
unwieldy, so if you have a better way of doing this, please let me know.</p>
<pre class="r"><code>run_grepl &lt;- function(){
  with_grepl(adult) %&gt;%
    count(married, marital_status)
}

one &lt;- run_grepl()

run_grepl_perl &lt;- function(){
  with_grepl_perl(adult) %&gt;%
    count(married, marital_status)
}

two &lt;- run_grepl_perl()

run_stringi &lt;- function(){
  with_stringi(adult) %&gt;%
    count(married, marital_status)
}

three &lt;- run_stringi()

run_stringr &lt;- function(){
  with_stringr(adult) %&gt;%
    count(married, marital_status)
}

four &lt;- run_stringr()

run_re2 &lt;- function(){
  with_re2(adult) %&gt;%
    count(married, marital_status)
}

five &lt;- run_re2()

one_eq_two &lt;- testthat::expect_equal(one, two)
one_eq_three &lt;- testthat::expect_equal(one, three)
three_eq_four &lt;- testthat::expect_equal(three, four)

testthat::expect_equal(
            one_eq_two,
            one_eq_three
          )

testthat::expect_equal(
            one_eq_three,
            three_eq_four
          )

testthat::expect_equal(
            one,
            five)</code></pre>
<p><code>testthat::expect_equal()</code> does not complain, so I’m pretty sure my functions, while different,
return the exact same thing. Now, we’re ready for the benchmark itself. Let’s run these
function 500 times using <code>{microbenchmark}</code>:</p>
<pre class="r"><code>microbenchmark::microbenchmark(
     run_grepl(),
     run_grepl_perl(),
     run_stringi(),
     run_stringr(),
     run_re2(),
     times = 500
)</code></pre>
<pre><code>## Unit: milliseconds
##              expr      min       lq     mean   median       uq      max neval
##       run_grepl() 24.37832 24.89573 26.64820 25.50033 27.05967 115.0769   500
##  run_grepl_perl() 19.03446 19.41323 20.91045 19.89093 21.16683 104.3917   500
##     run_stringi() 23.01141 23.40151 25.00304 23.82441 24.83598 104.8065   500
##     run_stringr() 22.98317 23.44332 25.32851 23.92721 25.18168 145.5861   500
##         run_re2() 22.22656 22.60817 24.07254 23.05895 24.22048 108.6825   500</code></pre>
<p>There you have it folks! The winner is <code>grepl()</code> with <code>perl = TRUE</code>, and then it’s
pretty much tied between <code>stringi()</code>, <code>stringr()</code> and <code>re2()</code> (maybe there’s a slight edge
for <code>re2()</code>) and <code>grepl()</code> without <code>perl = TRUE</code> is last. But don’t forget that this is running
on my machine with Linux installed on it; maybe you’ll get different results on different
hardware and OSs! So if you rely a lot on <code>grepl()</code> and other such string manipulation
function, maybe run a benchmark on your hardware first. How come switching from <code>grepl()</code>
(without <code>perl = TRUE</code> though) to <code>stri_detect()</code> made my pipeline at work run 4 times
faster I don’t know. Maybe it has also to do with the size of the data, and the complexity
of the regular expression used to detect the problematic strings?</p>
