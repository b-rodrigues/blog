---
date: 2022-10-29
title: A Linux Live USB as a statistical programming dev environment
categories:
  - R
  - proramming
toc: true
execute:
  freeze: auto
---

<div style="text-align:center;">
<p><video width="640" height="480" controls>
<source src="../assets/img/tux_usb_ubuntu_startup.mp4" type="video/mp4">
</video></p>
</div>
<p>This blog post is divided in two parts: in the first part I’ll show you how
to create a Linux Live USB with persistent storage that can be used as
development environment, and in the second part I’ll show you the easiest
way to set up RStudio and R in Ubuntu.</p>
<div id="making-your-own-portable-development-environment-based-on-ubuntu-or-debian" class="section level2">
<h2>Making your own, portable, development environment based on Ubuntu or Debian</h2>
<p>I’m currently teaching a course at the University of Luxembourg, which
focuses on setting up reproducible analytical pipelines (if you’re
interested, you can find the course notes <a href="https://rap4mads.eu/">here</a>).</p>
<p>The problem is that my work laptop runs Windows, and I didn’t want to teach
on Windows since I make heavy use of the command line. Plus I don’t have
admin rights on this machine, so installing what I needed would have been a pain.
I also don’t have a personal laptop, so I use my wife’s laptop. However, the
laptop is completely full of pictures of our kids, so I couldn’t install what I needed…
This is when I thought about making a persistent live USB with Kubuntu on it
(Kubuntu is a variant of Ubuntu with KDE as the desktop manager instead of Gnome)
with all the software I needed (R, Quarto, RStudio basically). It works quite well, and
was also quite easy to do. But what is a live USB anyways?
A live USB is a full Linux installation on a USB stick, that you can use to test
different Linux distributions or even to install said distribution on computers.</p>
<p>The first step is to get a USB stick. Those are quite cheap nowadays, but you’ll
need at least one with 8GB of space, and ideally USB 3 (you probably can’t find
any USB 2 these days anyways). I’ve bought a 32GB one for 10€.</p>
<p>Then, we need to install Ubuntu on it. I’ll be using Kubuntu 22.04, which is an LTS
release. I would always recommend an LTS release for something like crafting
a development environment. So if you’re reading this in the future, and there’s a new
LTS (could be 24.04, 26.04, etc), you’d need to get that one.</p>
<p>Creating a live USB is quite simple, but the issue if you create a live USB using the standard
methods is that whatever you do on it once you’re logged in will get erased after rebooting. A
persistent live USB, I’m sure you’ve guessed it, keeps your changes even after rebooting, which
means that you basically end up with a portable development environment. Note however that only
Ubuntu (and variants) or Debian can be used to create persistent live USBs.</p>
<p>You can create persistent live USB from another Linux distro, Windows or macOS.</p>
<p>If you’re already running Ubuntu on your pc, you might want to take a look at <a href="https://help.ubuntu.com/community/mkusb#Persistent_live_systems">this
page</a>. You’ll need to install a
tool called <code>mkusb</code>. If you’re not running Ubuntu, but find this tool in your distribution’s
package manager, I guess you’re good to go as well. In my case, I’m running opensuse tumbleweed,
and could not find this program in the opensuse’s repositories. So I’ve used this
<a href="https://help.ubuntu.com/community/mkusb/minp">guide</a> that shows how to achieve the same thing
using a very simple to use shell script which you can get
<a href="https://help.ubuntu.com/community/mkusb/minp?action=AttachFile&amp;do=view&amp;target=mkusb-minp">here</a>
called <code>mkusb-minp</code>. So in my case, I simply
had to stick the USB stick in my computer, find out where it was mounted by running <code>df</code> in bash
(in my case it was in <code>/dev/sdd</code>), download Kubuntu’s iso image and run the following in my
terminal:</p>
<pre><code>sudo ./mkusb-minp -p kubuntu-22.04.1-desktop-amd64.iso /dev/sdX</code></pre>
<p>(<code>/dev/sdX</code>: replace the X by the right letter, for me it was <code>/dev/sdd</code>)</p>
<p>If you’re using Windows, you can install <a href="https://rufus.ie/en/#">Rufus</a> to create
a persistent live USB.</p>
<p>It would seem that for macOS the process is a bit more involved, but I’ve found this
<a href="https://sebay.github.io/posts/create-live-persistent-ubuntu-usb-on-mac/">blog post</a>
that explains the process.</p>
<p>Once the process is finished, you can boot into your live USB key. For this, you might
need to press <code>delete</code> or <code>F2</code> when your computer starts booting to access the
<a href="https://www.computerhope.com/jargon/b/boot_menu.htm">boot menu</a>.
You can then choose to boot from your USB device.</p>
<p>Wait a bit and at some point you should see a prompt asking you if you want to
try or install Ubuntu. Choose <code>Try Ubuntu</code>:</p>
<div style="text-align:center;">
<p><img src="../assets/img/try_ubuntu.png" width="80%" height="auto"></p>
</div>
<p>And then wait some minutes. Yes booting takes some time because you’re loading an entire
operating system from a USB stick (hence why it’s a good idea to go with a USB 3 stick).
After some time you should see a new window:</p>
<div style="text-align:center;">
<p><img src="../assets/img/try_ubuntu2.png" width="80%" height="auto"></p>
</div>
<p>Once again, try Ubuntu, wait a bit, and that’s it you’re inside your dev environment!</p>
</div>
<div id="setting-up-r-and-rstudio" class="section level2">
<h2>Setting up R and RStudio</h2>
<p>Now that you’re inside your dev environment, you actually need to start adding some
tools. Let’s start by adding R. The easiest way that I found is to use the
<a href="https://eddelbuettel.github.io/r2u/">r2u project</a> by
<a href="https://github.com/eddelbuettel">Dirk Eddelbuettel</a>. If you’re on Ubuntu 22.04,
run <a href="https://github.com/eddelbuettel/r2u/blob/master/inst/scripts/add_cranapt_jammy.sh">this script</a>,
as explained in the tutorial. This will add the required repositories that will install
binary versions of R packages in mere seconds. The script will also
add a repository to install the most recent version of R, so once the script is done running,
install R and the <code>{tidyverse}</code> (or any other package) with the following command:</p>
<pre><code>sudo apt install --no-install-recommends r-base r-cran-tidyverse</code></pre>
<p>You can then install other packages from R using <code>install.packages("package_name")</code> as usual,
and this will also make use of the <code>r2u</code> repositories.</p>
<p>All that’s missing now is RStudio (if you use RStudio). Surprisingly, when I set up my live USB
two weeks ago, the current version of RStudio for Ubuntu would not install. This is apparently
fixed with the daily versions which you can get <a href="https://dailies.rstudio.com/">here</a>. But
before that, do try to install the stable version. If you’re reading this sometime in the future,
maybe the issue I encountered has been fixed. Download RStudio from
<a href="https://www.rstudio.com/products/rstudio/download/#download">here</a>, and then double click on the
downloaded <code>.deb</code> package. If you see this message:</p>
<pre><code>The following packages have unmet dependencies:
 rstudio : Depends: libssl1.0.0 but it is not installable or
                    libssl1.0.2 but it is not installable or
                    libssl1.1 but it is not installable
           Recommends: r-base (&gt;= 3.0.1) but it is not going to be installed
E: Unable to correct problems, you have held broken packages.</code></pre>
<p>then this means that the problem has not been fixed. In that case, run the following line to
repair everything:</p>
<pre><code>sudo apt-get update --fix-missing</code></pre>
<p>This should put you back into a clean state. So to continue, install a daily build from the link above.
Simply click on the Ubuntu 22 button to download the daily. Unfortunately daily builds can be unstable
and are usually used for testing purposes. So hopefully Posit will fix this soon.</p>
<p>Of course, if you’re using the
<a href="2019-05-19-spacemacs.qmd">greatest IDE ever made</a> instead of RStudio,
you won’t have this issue.</p>
<p>You can now keep installing things, for example <a href="https://quarto.org/docs/get-started/">Quarto</a>, or
Python, or, or, or… there are no limits, and performance, as you would have noticed is great, because
the operating system has access to all the resources from your machine. A persistent live USB is a
great solution if you need a portable dev environment and don’t want/can’t use Docker for example.</p>
