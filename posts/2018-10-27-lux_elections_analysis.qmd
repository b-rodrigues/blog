---
date: 2018-10-27
title: "Maps with pie charts on top of each administrative division: an example with Luxembourg's elections data"
categories:
  - R
  - data-science
toc: true
execute:
  freeze: auto
---


<div style="text-align:center;">
<p><a href="https://www.youtube.com/watch?v=Bw8g_1VEEL8">
<img src="../assets/img/europe_map_lux.png"/ width="80%" height="auto"></a></p>
</div>
<div id="abstract" class="section level2">
<h2>Abstract</h2>
<p>You can find the data used in this blog post here: <a href="https://github.com/b-rodrigues/elections_lux" class="uri">https://github.com/b-rodrigues/elections_lux</a></p>
<p>This is a follow up to a <a href="https://www.brodrigues.co/blog/2018-10-21-lux_elections/">previous blog post</a>
where I extracted data of the 2018 Luxembourguish elections from Excel Workbooks.
Now that I have the data, I will create a map of Luxembourg by commune, with pie charts of the
results on top of each commune! To do this, I use good ol’ <code>{ggplot2}</code> and another packages
called <code>{scatterpie}</code>. As a bonus, I have added the code to extract the data from the 2013
elections from Excel. You’ll find this code in the appendix at the end of the blog post.</p>
</div>
<div id="introduction" class="section level2">
<h2>Introduction</h2>
<p>Before importing the data for the elections of 2018, let’s install some packages:</p>
<pre class="r"><code>install.packages(&#39;rgeos&#39;, type=&#39;source&#39;) # Dependency of rgdal
install.packages(&#39;rgdal&#39;, type=&#39;source&#39;) # To read in the shapefile</code></pre>
<p>These packages might be very tricky to install on OSX and Linux, but they’re needed to import the
shapefile of the country, which is needed to draw a map. So to make things easier, I have
created an <code>rds</code> object, from the shapefile of Luxembourg, that you can import natively in R without
needing these two packages. But if you want to use them, here is how:</p>
<pre class="r"><code>communes &lt;- readOGR(&quot;Limadmin_SHP/LIMADM_COMMUNES.shp&quot;)</code></pre>
<p>By the way, you can download the shapefile for Luxembourg <a href="https://data.public.lu/en/datasets/limites-administratives-du-grand-duche-de-luxembourg/#_">here</a>.</p>
<p>I’ll use my shapefile though (that you can download from the same github repo as the data):</p>
<pre class="r"><code>communes_df &lt;- readRDS(&quot;commune_shapefile.rds&quot;)</code></pre>
<p>Here’s how it looks like:</p>
<pre class="r"><code>head(communes_df)</code></pre>
<pre><code>##       long      lat order  hole piece      group       id
## 1 91057.65 101536.6     1 FALSE     1 Beaufort.1 Beaufort
## 2 91051.79 101487.3     2 FALSE     1 Beaufort.1 Beaufort
## 3 91043.43 101461.7     3 FALSE     1 Beaufort.1 Beaufort
## 4 91043.37 101449.8     4 FALSE     1 Beaufort.1 Beaufort
## 5 91040.42 101432.1     5 FALSE     1 Beaufort.1 Beaufort
## 6 91035.44 101405.6     6 FALSE     1 Beaufort.1 Beaufort</code></pre>
<p>Now let’s load some packages:</p>
<pre class="r"><code>library(&quot;tidyverse&quot;)
library(&quot;tidyxl&quot;)
library(&quot;ggplot2&quot;)
library(&quot;scatterpie&quot;)</code></pre>
<p>Ok, now, let’s import the elections results data, which is the output of
<a href="https://www.brodrigues.co/blog/2018-10-21-lux_elections/">last week’s blog post</a>:</p>
<pre class="r"><code>elections &lt;- read_csv(&quot;elections_2018.csv&quot;)</code></pre>
<pre><code>## Parsed with column specification:
## cols(
##   Party = col_character(),
##   Year = col_double(),
##   Variables = col_character(),
##   Values = col_double(),
##   locality = col_character(),
##   division = col_character()
## )</code></pre>
<p>I will only focus on the data at the commune level, and only use the share of votes for each party:</p>
<pre class="r"><code>elections_map &lt;- elections %&gt;%
    filter(division == &quot;Commune&quot;,
           Variables == &quot;Pourcentage&quot;)</code></pre>
<p>Now I need to make sure that the names of the communes are the same between the elections data
and the shapefile. Usual suspects are the “Haute-Sûre” and the “Redange-sur-Attert” communes,
but let’s take a look:</p>
<pre class="r"><code>locality_elections &lt;- unique(elections_map$locality)
locality_shapefile &lt;- unique(communes_df$id)

setdiff(locality_elections, locality_shapefile)</code></pre>
<pre><code>## [1] &quot;Lac de la Haute-Sûre&quot; &quot;Redange Attert&quot;</code></pre>
<p>Yep, exactly as expected. I’ve had problems with the names of these two communes in the past already.
Let’s rename these two communes in the elections data:</p>
<pre class="r"><code>elections_map &lt;- elections_map %&gt;%
    mutate(commune = case_when(locality == &quot;Lac de la Haute-Sûre&quot; ~ &quot;Lac de la Haute Sûre&quot;,
                          locality == &quot;Redange Attert&quot; ~ &quot;Redange&quot;,
                          TRUE ~ locality))</code></pre>
<p>Now, I can select the relevant columns from the shapefile:</p>
<pre class="r"><code>communes_df &lt;- communes_df %&gt;%
    select(long, lat, commune = id)</code></pre>
<p>and from the elections data:</p>
<pre class="r"><code>elections_map &lt;- elections_map %&gt;%
    select(commune, Party, Variables, Values)</code></pre>
</div>
<div id="plotting-the-data-on-a-map" class="section level2">
<h2>Plotting the data on a map</h2>
<p>Now, for the type of plot I want to make, using the <code>{scatterpie}</code> package, I need the data to be
in the wide format, not long. For this I will use <code>tidyr::spread()</code>:</p>
<pre class="r"><code>elections_map &lt;- elections_map %&gt;% 
    spread(Party, Values)</code></pre>
<p>This is how the data looks now:</p>
<pre class="r"><code>glimpse(elections_map)</code></pre>
<pre><code>## Observations: 102
## Variables: 10
## $ commune     &lt;chr&gt; &quot;Beaufort&quot;, &quot;Bech&quot;, &quot;Beckerich&quot;, &quot;Berdorf&quot;, &quot;Bertran…
## $ Variables   &lt;chr&gt; &quot;Pourcentage&quot;, &quot;Pourcentage&quot;, &quot;Pourcentage&quot;, &quot;Pource…
## $ ADR         &lt;dbl&gt; 0.12835106, 0.09848661, 0.08596748, 0.16339234, 0.04…
## $ CSV         &lt;dbl&gt; 0.2426239, 0.2945285, 0.3004751, 0.2604552, 0.290278…
## $ `déi gréng` &lt;dbl&gt; 0.15695672, 0.21699651, 0.24072721, 0.15619529, 0.15…
## $ `déi Lénk`  &lt;dbl&gt; 0.04043732, 0.03934808, 0.05435776, 0.02295273, 0.04…
## $ DP          &lt;dbl&gt; 0.15875393, 0.19394645, 0.12899689, 0.15444466, 0.30…
## $ KPL         &lt;dbl&gt; 0.015875393, 0.006519208, 0.004385164, 0.011476366, …
## $ LSAP        &lt;dbl&gt; 0.11771754, 0.11455180, 0.08852549, 0.16592103, 0.09…
## $ PIRATEN     &lt;dbl&gt; 0.13928411, 0.03562282, 0.09656496, 0.06516242, 0.04…</code></pre>
<p>For this to work, I need two datasets; one to draw the map (<code>commune_df</code>) and one to draw the
pie charts over each commune, with the data to draw the charts, but also the position of where I
want the pie charts. For this, I will compute the average of the longitude and latitude, which
should be good enough:</p>
<pre class="r"><code>scatterpie_data &lt;- communes_df %&gt;%
    group_by(commune) %&gt;%
    summarise(long = mean(long),
              lat = mean(lat))</code></pre>
<p>Now, let’s join the two datasets:</p>
<pre class="r"><code>final_data &lt;- left_join(scatterpie_data, elections_map, by = &quot;commune&quot;) </code></pre>
<p>I have all the ingredients to finally plot the data:</p>
<pre class="r"><code>ggplot() +
    geom_polygon(data = communes_df, aes(x = long, y = lat, group = commune), colour = &quot;grey&quot;, fill = NA) +
    geom_scatterpie(data = final_data, aes(x=long, y=lat, group=commune), 
                    cols = c(&quot;ADR&quot;, &quot;CSV&quot;, &quot;déi gréng&quot;, &quot;déi Lénk&quot;, &quot;DP&quot;, &quot;KPL&quot;, &quot;LSAP&quot;, &quot;PIRATEN&quot;)) +
    labs(title = &quot;Share of total vote in each commune, 2018 elections&quot;) +
    theme_void() +
    theme(legend.position = &quot;bottom&quot;,
          legend.title = element_blank(),
          legend.text = element_text(colour = &quot;white&quot;),
          plot.background = element_rect(&quot;#272b30&quot;),
          plot.title = element_text(colour = &quot;white&quot;)) +
    scale_fill_manual(values = c(&quot;ADR&quot; = &quot;#009dd1&quot;,
                                 &quot;CSV&quot; = &quot;#ee7d00&quot;,
                                 &quot;déi gréng&quot; = &quot;#45902c&quot;,
                                 &quot;déi Lénk&quot; = &quot;#e94067&quot;,
                                 &quot;DP&quot; = &quot;#002a54&quot;,
                                 &quot;KPL&quot; = &quot;#ff0000&quot;,
                                 &quot;LSAP&quot; = &quot;#ad3648&quot;,
                                 &quot;PIRATEN&quot; = &quot;#ad5ea9&quot;))</code></pre>

<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-17-1.png" width="80%" height="auto" / width="80%" height="auto"></div>

<p>Not too bad, but we can’t really read anything from the pie charts. I will now make their size
proportional to the number of voters in each commune. For this, I need to go back to the Excel
sheets, and look for the right cell:</p>
<p><img src="../assets/img/electeurs_inscrits.png" / width="80%" height="auto"><!-- --></p>
<p>It will be easy to extract this info. It located in cell “E5”:</p>
<pre class="r"><code>elections_raw_2018 &lt;- xlsx_cells(&quot;leg-2018-10-14-22-58-09-737.xlsx&quot;)

electors_commune &lt;- elections_raw_2018 %&gt;%
    filter(!(sheet %in% c(&quot;Le Grand-Duché de Luxembourg&quot;, &quot;Centre&quot;, &quot;Est&quot;, &quot;Nord&quot;, &quot;Sud&quot;, &quot;Sommaire&quot;))) %&gt;%
    filter(address == &quot;E5&quot;) %&gt;%
    select(sheet, numeric) %&gt;%
    rename(commune = sheet,
           electors = numeric)</code></pre>
<p>I can now add this to the data:</p>
<pre class="r"><code>final_data &lt;- final_data %&gt;% 
    full_join(electors_commune) %&gt;%
    mutate(log_electors = log(electors) * 200)</code></pre>
<pre><code>## Joining, by = &quot;commune&quot;</code></pre>
<p>In the last line, I create a new column called <code>log_electors</code> that I then multiply by 200. This
will be useful later.</p>
<p>Now I can add the <code>r</code> argument inside the <code>aes()</code> function on the third line, to make the pie chart
size proportional to the number of electors in that commune:</p>
<pre class="r"><code>ggplot() +
  geom_polygon(data = communes_df, aes(x = long, y = lat, group = commune), colour = &quot;grey&quot;, fill = NA) +
    geom_scatterpie(data = final_data, aes(x=long, y=lat, group = commune, r = electors), 
                    cols = c(&quot;ADR&quot;, &quot;CSV&quot;, &quot;déi gréng&quot;, &quot;déi Lénk&quot;, &quot;DP&quot;, &quot;KPL&quot;, &quot;LSAP&quot;, &quot;PIRATEN&quot;)) +
    labs(title = &quot;Share of total vote in each commune, 2018 elections&quot;) +
    theme_void() +
    theme(legend.position = &quot;bottom&quot;,
          legend.title = element_blank(),
          legend.text = element_text(colour = &quot;white&quot;),
          plot.background = element_rect(&quot;#272b30&quot;),
          plot.title = element_text(colour = &quot;white&quot;)) +
    scale_fill_manual(values = c(&quot;ADR&quot; = &quot;#009dd1&quot;,
                                 &quot;CSV&quot; = &quot;#ee7d00&quot;,
                                 &quot;déi gréng&quot; = &quot;#45902c&quot;,
                                 &quot;déi Lénk&quot; = &quot;#182024&quot;,
                                 &quot;DP&quot; = &quot;#002a54&quot;,
                                 &quot;KPL&quot; = &quot;#ff0000&quot;,
                                 &quot;LSAP&quot; = &quot;#ad3648&quot;,
                                 &quot;PIRATEN&quot; = &quot;#ad5ea9&quot;))</code></pre>
<pre><code>## Warning: Removed 32 rows containing non-finite values (stat_pie).</code></pre>

<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-21-1.png" width="80%" height="auto" / width="80%" height="auto"></div>

<p>Ok, that was not a good idea! Perhaps the best option would be to have one map per circonscription.
For this, I need the list of communes by circonscription. This is available on Wikipedia. Here are
the lists:</p>
<pre class="r"><code>centre &lt;- c(&quot;Bissen&quot;, &quot;Colmar-Berg&quot;, &quot;Fischbach&quot;, &quot;Heffingen&quot;, &quot;Larochette&quot;,
            &quot;Lintgen&quot;, &quot;Lorentzweiler&quot;, &quot;Mersch&quot;, &quot;Nommern&quot;, &quot;Helperknapp&quot;, &quot;Bertrange&quot;, &quot;Contern&quot;, 
            &quot;Hesperange&quot;, &quot;Luxembourg&quot;, &quot;Niederanven&quot;, &quot;Sandweiler&quot;, &quot;Schuttrange&quot;, &quot;Steinsel&quot;, 
            &quot;Strassen&quot;, &quot;Walferdange&quot;, &quot;Weiler-la-Tour&quot;)

est &lt;- c(&quot;Beaufort&quot;, &quot;Bech&quot;, &quot;Berdorf&quot;, &quot;Consdorf&quot;, &quot;Echternach&quot;, &quot;Rosport-Mompach&quot;, &quot;Waldbillig&quot;,
         &quot;Betzdorf&quot;, &quot;Biwer&quot;, &quot;Flaxweiler&quot;, &quot;Grevenmacher&quot;, &quot;Junglinster&quot;, &quot;Manternach&quot;, &quot;Mertert&quot;,
         &quot;Wormeldange&quot;,&quot;Bous&quot;, &quot;Dalheim&quot;, &quot;Lenningen&quot;, &quot;Mondorf-les-Bains&quot;, &quot;Remich&quot;, &quot;Schengen&quot;,
         &quot;Stadtbredimus&quot;, &quot;Waldbredimus&quot;)

nord &lt;- c(&quot;Clervaux&quot;, &quot;Parc Hosingen&quot;, &quot;Troisvierges&quot;, &quot;Weiswampach&quot;, &quot;Wincrange&quot;, &quot;Bettendorf&quot;, 
          &quot;Bourscheid&quot;, &quot;Diekirch&quot;, &quot;Erpeldange-sur-Sûre&quot;, &quot;Ettelbruck&quot;, &quot;Feulen&quot;, &quot;Mertzig&quot;, &quot;Reisdorf&quot;, 
          &quot;Schieren&quot;, &quot;Vallée de l&#39;Ernz&quot;, &quot;Beckerich&quot;, &quot;Ell&quot;, &quot;Grosbous&quot;, &quot;Préizerdaul&quot;, 
          &quot;Rambrouch&quot;, &quot;Redange&quot;, &quot;Saeul&quot;, &quot;Useldange&quot;, &quot;Vichten&quot;, &quot;Wahl&quot;, &quot;Putscheid&quot;, &quot;Tandel&quot;,
          &quot;Vianden&quot;, &quot;Boulaide&quot;, &quot;Esch-sur-Sûre&quot;, &quot;Goesdorf&quot;, &quot;Kiischpelt&quot;, &quot;Lac de la Haute Sûre&quot;,
          &quot;Wiltz&quot;, &quot;Winseler&quot;)

sud &lt;- c(&quot;Dippach&quot;, &quot;Garnich&quot;, &quot;Käerjeng&quot;, &quot;Kehlen&quot;, &quot;Koerich&quot;, &quot;Kopstal&quot;, &quot;Mamer&quot;, 
         &quot;Habscht&quot;, &quot;Steinfort&quot;, &quot;Bettembourg&quot;, &quot;Differdange&quot;, &quot;Dudelange&quot;, &quot;Esch-sur-Alzette&quot;, 
         &quot;Frisange&quot;, &quot;Kayl&quot;, &quot;Leudelange&quot;, &quot;Mondercange&quot;, &quot;Pétange&quot;, &quot;Reckange-sur-Mess&quot;, &quot;Roeser&quot;,
         &quot;Rumelange&quot;, &quot;Sanem&quot;, &quot;Schifflange&quot;)

circonscriptions &lt;- list(&quot;centre&quot; = centre, &quot;est&quot; = est,
                         &quot;nord&quot; = nord, &quot;sud&quot; = sud)</code></pre>
<p>Now, I can make one map per circonscription. First, let’s split the data sets by circonscription:</p>
<pre class="r"><code>communes_df_by_circonscription &lt;- circonscriptions %&gt;%
    map(~filter(communes_df, commune %in% .))

final_data_by_circonscription &lt;- circonscriptions %&gt;%
    map(~filter(final_data, commune %in% .))</code></pre>
<p>By using <code>pmap()</code>, I can reuse the code to generate the plot to each element of the two lists.
This is nice because I do not need to copy and paste the code 4 times:</p>
<pre class="r"><code>pmap(list(x = communes_df_by_circonscription,
          y = final_data_by_circonscription,
          z = names(communes_df_by_circonscription)),
     function(x, y, z){
         ggplot() +
        geom_polygon(data = x, aes(x = long, y = lat, group = commune), 
                     colour = &quot;grey&quot;, fill = NA) +
        geom_scatterpie(data = y, aes(x=long, y=lat, group = commune), 
                        cols = c(&quot;ADR&quot;, &quot;CSV&quot;, &quot;déi gréng&quot;, &quot;déi Lénk&quot;, &quot;DP&quot;, &quot;KPL&quot;, &quot;LSAP&quot;, &quot;PIRATEN&quot;)) +
        labs(title = paste0(&quot;Share of total vote in each commune, 2018 elections for circonscription &quot;, z)) +
        theme_void() +
        theme(legend.position = &quot;bottom&quot;,
              legend.title = element_blank(),
              legend.text = element_text(colour = &quot;white&quot;),
              plot.background = element_rect(&quot;#272b30&quot;),
              plot.title = element_text(colour = &quot;white&quot;)) + 
        scale_fill_manual(values = c(&quot;ADR&quot; = &quot;#009dd1&quot;,
                                     &quot;CSV&quot; = &quot;#ee7d00&quot;,
                                     &quot;déi gréng&quot; = &quot;#45902c&quot;,
                                     &quot;déi Lénk&quot; = &quot;#182024&quot;,
                                     &quot;DP&quot; = &quot;#002a54&quot;,
                                     &quot;KPL&quot; = &quot;#ff0000&quot;,
                                     &quot;LSAP&quot; = &quot;#ad3648&quot;,
                                     &quot;PIRATEN&quot; = &quot;#ad5ea9&quot;))
     }
)</code></pre>
<pre><code>## $centre</code></pre>

<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-24-1.png" width="80%" height="auto" / width="80%" height="auto"></div>

<pre><code>## 
## $est</code></pre>
<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-24-2.png" width="80%" height="auto" / width="80%" height="auto"></div>
<pre><code>## 
## $nord</code></pre>
<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-24-3.png" width="80%" height="auto" / width="80%" height="auto"></div>
<pre><code>## 
## $sud</code></pre>
<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-24-4.png" width="80%" height="auto" / width="80%" height="auto"></div>
<p>I created an anonymous function of three argument, <code>x</code>, <code>y</code> and <code>z</code>. If you are unfamiliar with
<code>pmap()</code>, study the above code closely. If you have questions, do not hesitate to reach out!</p>
<p>The pie charts are still quite small, but if I try to change the size of the pie charts,
I’ll have the same problem as before: inside the same circonscription, some communes have really a
lot of electors, and some a very small number. Perhaps I can try with the log of the electors?</p>
<pre class="r"><code>pmap(list(x = communes_df_by_circonscription,
          y = final_data_by_circonscription,
          z = names(communes_df_by_circonscription)),
     function(x, y, z){
         ggplot() +
        geom_polygon(data = x, aes(x = long, y = lat, group = commune), 
                     colour = &quot;grey&quot;, fill = NA) +
        geom_scatterpie(data = y, aes(x=long, y=lat, group = commune, r = log_electors), 
                        cols = c(&quot;ADR&quot;, &quot;CSV&quot;, &quot;déi gréng&quot;, &quot;déi Lénk&quot;, &quot;DP&quot;, &quot;KPL&quot;, &quot;LSAP&quot;, &quot;PIRATEN&quot;)) +
        labs(title = paste0(&quot;Share of total vote in each commune, 2018 elections for circonscription &quot;, z)) +
        theme_void() +
        theme(legend.position = &quot;bottom&quot;,
              legend.title = element_blank(),
              legend.text = element_text(colour = &quot;white&quot;),
              plot.background = element_rect(&quot;#272b30&quot;),
              plot.title = element_text(colour = &quot;white&quot;)) + 
        scale_fill_manual(values = c(&quot;ADR&quot; = &quot;#009dd1&quot;,
                                     &quot;CSV&quot; = &quot;#ee7d00&quot;,
                                     &quot;déi gréng&quot; = &quot;#45902c&quot;,
                                     &quot;déi Lénk&quot; = &quot;#182024&quot;,
                                     &quot;DP&quot; = &quot;#002a54&quot;,
                                     &quot;KPL&quot; = &quot;#ff0000&quot;,
                                     &quot;LSAP&quot; = &quot;#ad3648&quot;,
                                     &quot;PIRATEN&quot; = &quot;#ad5ea9&quot;))
     }
)</code></pre>
<pre><code>## $centre</code></pre>
<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-25-1.png" width="80%" height="auto" / width="80%" height="auto"></div>
<pre><code>## 
## $est</code></pre>
<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-25-2.png" width="80%" height="auto" / width="80%" height="auto"></div>
<pre><code>## 
## $nord</code></pre>
<pre><code>## Warning: Removed 16 rows containing non-finite values (stat_pie).</code></pre>
<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-25-3.png" width="80%" height="auto" / width="80%" height="auto"></div>
<pre><code>## 
## $sud</code></pre>
<div style="text-align: center;"><img src="../assets/img/lux_elections_analysis-25-4.png" width="80%" height="auto" / width="80%" height="auto"></div>
<p>This looks better now!</p>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>Having data in a machine readable format is really important. The amount of code I had to write
to go from the Excel Workbooks that contained the data to this plots is quite large, but if the
data was in a machine readable format to start with, I could have focused on the plots immediately.</p>
<p>The good thing is that I got to practice my skills and discovered <code>{scatterpie}</code>!</p>
<div id="appendix" class="section level2">
<h2>Appendix</h2>
<p>The following lines of code extract the data (from the 2013 elections) from the Excel Workbooks
that can be found in Luxembourguish <a href="https://data.public.lu/fr/datasets/elections-legislatives-2013-donnees-officieuses/#_">Open Data Portal</a>.</p>
<p>I will not comment them, as they work in a similar way than in the previous blog post where I
extracted the data from the 2018 elections. The only difference, is that the sheet with the
national level data was totally different, so I did not extract it. The first reason is because
I don’t need it for this blog post, the second is because I was lazy. For me, that’s two pretty
good reasons not to do something. If you have a question concerning the code below, don’t
hesitate to reach out though!</p>
<pre class="r"><code>library(&quot;tidyverse&quot;)
library(&quot;tidyxl&quot;)
library(&quot;brotools&quot;)

path &lt;- Sys.glob(&quot;content/blog/2013*xlsx&quot;)[-5]

elections_raw_2013 &lt;- map(path, xlsx_cells) %&gt;%
    map(~filter(., sheet != &quot;Sommaire&quot;))

elections_sheets_2013 &lt;- map(map(path, xlsx_sheet_names), ~`%-l%`(., &quot;Sommaire&quot;))

list_targets &lt;- list(&quot;Centre&quot; = seq(9, 32),
                    &quot;Est&quot; = seq(9, 18),
                    &quot;Nord&quot; = seq(9, 20),
                    &quot;Sud&quot; = seq(9, 34))

position_parties_national &lt;- seq(1, 24, by = 3)

extract_party &lt;- function(dataset, starting_col, target_rows){
    
    almost_clean &lt;- dataset %&gt;%
        filter(row %in% target_rows) %&gt;%
        filter(col %in% c(starting_col, starting_col + 1)) %&gt;%
        select(character, numeric) %&gt;%
        fill(numeric, .direction = &quot;up&quot;) %&gt;%
        filter(!is.na(character))
    
    party_name &lt;- almost_clean$character[1]
    
    almost_clean$character[1] &lt;- &quot;Pourcentage&quot;
    
    almost_clean$party &lt;- party_name
    
    colnames(almost_clean) &lt;- c(&quot;Variables&quot;, &quot;Values&quot;, &quot;Party&quot;)
    
    almost_clean %&gt;%
        mutate(Year = 2013) %&gt;%
        select(Party, Year, Variables, Values)
    
}


# Treat one district

extract_district &lt;- function(dataset, sheets, target_rows, position_parties_national){

    list_data_districts &lt;- map(sheets, ~filter(.data = dataset, sheet == .)) 

    elections_districts_2013 &lt;- map(.x = list_data_districts,
                                    ~map_df(position_parties_national, extract_party, dataset = .x, target_rows = target_rows))

    map2(.y = elections_districts_2013, .x = sheets,
         ~mutate(.y, locality = .x, division = &quot;Commune&quot;, Year = &quot;2013&quot;)) %&gt;%
        bind_rows()
}

elections_2013 &lt;- pmap_dfr(list(x = elections_raw_2013, 
          y = elections_sheets_2013,
          z = list_targets), 
     function(x, y, z){
         map_dfr(position_parties_national, 
             ~extract_district(dataset = x, sheets = y, target_rows = z, position_parties_national = .))
     })

# Correct districts
elections_2013 &lt;- elections_2013 %&gt;%
    mutate(division = case_when(locality == &quot;CENTRE&quot; ~ &quot;Electoral district&quot;,
                                locality == &quot;EST&quot; ~ &quot;Electoral district&quot;,
                                locality == &quot;NORD&quot; ~ &quot;Electoral district&quot;,
                                locality == &quot;SUD&quot; ~ &quot;Electoral district&quot;,
                                TRUE ~ division))</code></pre>
</div>
