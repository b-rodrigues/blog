---
date: 2019-06-04
title: "Using cosine similarity to find matching documents: a tutorial using Seneca's letters to his friend Lucilius"
categories:
  - R
  - data-science
toc: true
execute:
  freeze: auto
---


<div style="text-align:center;">
<p><a href="https://en.wikipedia.org/wiki/Seneca_the_Younger">
<img src="../assets/img/seneca.png" title = "Seneca the Younger" width="400" height="600"></a></p>
</div>
<p>Lately I’ve been interested in trying to cluster documents, and to find similar documents based on their contents.
In this blog post, I will use <a href="https://en.wikisource.org/wiki/Moral_letters_to_Lucilius">Seneca’s <em>Moral letters to Lucilius</em></a>
and compute the pairwise <a href="https://en.wikipedia.org/wiki/Cosine_similarity">cosine similarity</a> of his 124 letters.
Computing the cosine similarity between two vectors returns how similar these vectors are. A cosine
similarity of 1 means that the angle between the two vectors is 0, and thus both vectors have the
same direction.
Seneca’s Moral letters to Lucilius deal mostly with philosophical topics, as Seneca was, among many other
things, a philosopher of the stoic school. The stoic school of philosophy is quite
interesting, but it has been unfortunately misunderstood, especially in modern times. There is now a renewed interest for
this school, see <a href="https://en.wikipedia.org/wiki/Modern_Stoicism">Modern Stoicism</a>.</p>
<p>The first step is to scrape the letters. The code below scrapes the letters, and saves them into a list.
I first start by writing a function that gets the raw text. Note the <code>xpath</code> argument of the <code>html_nodes()</code>
function. I obtained this complex expression by using the <a href="https://selectorgadget.com/">SelectorGadget</a>
extension for Google Chrome, and then selecting the right element of the web page.
See this <a href="https://i.imgur.com/2cntugt.png">screenshot</a> if my description was not very clear.</p>
<p>Then, the <code>extract_text()</code> function extracts the text from the letter. The only line that might be
a bit complex is <code>discard(~`==`(., &quot;&quot;))</code> which removes every empty line.</p>
<p>Finally, there’s the <code>get_letter()</code> function that actually gets the letter by calling the first two
functions. In the last line, I get all the letters into a list by mapping the list of urls to the
<code>get_letter()</code> function.</p>
<pre class="r"><code>library(tidyverse)
library(rvest)

base_url &lt;- &quot;https://en.wikisource.org/wiki/Moral_letters_to_Lucilius/Letter_&quot;

letter_numbers &lt;- seq(1, 124)

letter_urls &lt;- paste0(base_url, letter_numbers)

get_raw_text &lt;- function(base_url, letter_number){
  paste0(base_url, letter_number) %&gt;%
    read_html() %&gt;%
    html_nodes(xpath =&#39;//*[contains(concat( &quot; &quot;, @class, &quot; &quot; ), concat( &quot; &quot;, &quot;mw-parser-output&quot;, &quot; &quot; ))]&#39;) %&gt;%  
    html_text()
}


extract_text &lt;- function(raw_text, letter_number){
  raw_text &lt;- raw_text %&gt;%
    str_split(&quot;\n&quot;) %&gt;%  
    flatten_chr() %&gt;%  
    discard(~`==`(., &quot;&quot;))

  start &lt;- 5

  end &lt;- str_which(raw_text, &quot;Footnotes*&quot;)

  raw_text[start:(end-1)] %&gt;%
    str_remove_all(&quot;\\[\\d{1,}\\]&quot;) %&gt;%
    str_remove_all(&quot;\\[edit\\]&quot;)
}

get_letter &lt;- function(base_url, letter_number){

  raw_text &lt;- get_raw_text(base_url, letter_number)

  extract_text(raw_text, letter_number)
}

letters_to_lucilius &lt;- map2(base_url, letter_numbers, get_letter)</code></pre>
<p>Now that we have the letters saved in a list, we need to process the text a little bit. In order
to compute the cosine similarity between the letters, I need to somehow represent them as vectors.
There are several ways of doing this, and I am going to compute the tf-idf of each letter. The tf-idf
will give me a vector for each letter, with zero and non-zero values. Zero values represent words
that are common to all letters, and thus do not have any <em>predictive power</em>. Non-zero values are
words that are not present in all letters, but maybe only a few. I expect that letters that
discuss death for example, will have the word death in them, and letters that do not discuss death
will not have this word. The word death thus has what I call <em>predictive power</em>, in that it helps
us distinguish the letters discussing death from the other letters that do not discuss it. The same
reasoning can be applied for any topic.</p>
<p>So, to get the tf-idf of each letter, I first need to put them in a tidy dataset. I will use the
<code>{tidytext}</code> package for this. First, I load the required packages, convert each letter to a
dataframe of one column that contains the text, and save the letter’s titles into another list:</p>
<pre class="r"><code>library(tidytext)
library(SnowballC)
library(stopwords)
library(text2vec)

letters_to_lucilius_df &lt;- map(letters_to_lucilius, ~tibble(&quot;text&quot; = .))

letter_titles &lt;- letters_to_lucilius_df %&gt;%
  map(~slice(., 1)) %&gt;%
  map(pull)</code></pre>
<p>Now, I add this title to each dataframe as a new column, called title:</p>
<pre class="r"><code>letters_to_lucilius_df &lt;-  map2(.x = letters_to_lucilius_df, .y = letter_titles,
                                ~mutate(.x, title = .y)) %&gt;%
  map(~slice(., -1))</code></pre>
<p>I can now use <code>unnest_tokens()</code> to transform the datasets. Before, I had the whole text of the letter
in one column. After using <code>unnest_tokens()</code> I now have a dataset with one row per word. This will
make it easy to compute frequencies by letters, or what I am interested in, the tf-idf of each letter:</p>
<pre class="r"><code>tokenized_letters &lt;- letters_to_lucilius_df %&gt;%
  bind_rows() %&gt;%
  group_by(title) %&gt;%
  unnest_tokens(word, text)</code></pre>
<p>I can now remove stopwords, using the data containing in the <code>{stopwords}</code> package:</p>
<pre class="r"><code>stopwords_en &lt;- tibble(&quot;word&quot; = stopwords(&quot;en&quot;, source  = &quot;smart&quot;))

tokenized_letters &lt;- tokenized_letters %&gt;%
  anti_join(stopwords_en) %&gt;%
  filter(!str_detect(word, &quot;\\d{1,}&quot;))</code></pre>
<pre><code>## Joining, by = &quot;word&quot;</code></pre>
<p>Next step, wordstemming, meaning, going from “dogs” to “dog”, or from “was” to “be”. If you do not
do wordstemming, “dogs” and “dog” will be considered different words, even though they are not.
<code>wordStem()</code> is a function from <code>{SnowballC}</code>.</p>
<pre class="r"><code>tokenized_letters &lt;- tokenized_letters %&gt;%
  mutate(word = wordStem(word, language = &quot;en&quot;))</code></pre>
<p>Finally, I can compute the tf-idf of each letter and cast the data as a sparse matrix:</p>
<pre class="r"><code>tfidf_letters &lt;- tokenized_letters %&gt;%
  count(title, word, sort  = TRUE) %&gt;%
  bind_tf_idf(word, title, n)

sparse_matrix &lt;- tfidf_letters %&gt;%
  cast_sparse(title, word, tf)</code></pre>
<p>Let’s take a look at the sparse matrix:</p>
<pre class="r"><code>sparse_matrix[1:10, 1:4]</code></pre>
<pre><code>## 10 x 4 sparse Matrix of class &quot;dgCMatrix&quot;
##                                                                   thing
## CXIII. On the Vitality of the Soul and Its Attributes       0.084835631
## LXVI. On Various Aspects of Virtue                          0.017079890
## LXXXVII. Some Arguments in Favour of the Simple Life        0.014534884
## CXVII. On Real Ethics as Superior to Syllogistic Subtleties 0.025919732
## LXXVI. On Learning Wisdom in Old Age                        0.021588946
## CII. On the Intimations of Our Immortality                  0.014662757
## CXXIV. On the True Good as Attained by Reason               0.010139417
## XCIV. On the Value of Advice                                0.009266409
## LXXXI. On Benefits                                          0.007705479
## LXXXV. On Some Vain Syllogisms                              0.013254786
##                                                                     live
## CXIII. On the Vitality of the Soul and Its Attributes       0.0837751856
## LXVI. On Various Aspects of Virtue                          .           
## LXXXVII. Some Arguments in Favour of the Simple Life        0.0007267442
## CXVII. On Real Ethics as Superior to Syllogistic Subtleties 0.0050167224
## LXXVI. On Learning Wisdom in Old Age                        0.0025906736
## CII. On the Intimations of Our Immortality                  0.0019550342
## CXXIV. On the True Good as Attained by Reason               .           
## XCIV. On the Value of Advice                                0.0023166023
## LXXXI. On Benefits                                          0.0008561644
## LXXXV. On Some Vain Syllogisms                              0.0022091311
##                                                                   good
## CXIII. On the Vitality of the Soul and Its Attributes       0.01166490
## LXVI. On Various Aspects of Virtue                          0.04132231
## LXXXVII. Some Arguments in Favour of the Simple Life        0.04578488
## CXVII. On Real Ethics as Superior to Syllogistic Subtleties 0.04849498
## LXXVI. On Learning Wisdom in Old Age                        0.04663212
## CII. On the Intimations of Our Immortality                  0.05180841
## CXXIV. On the True Good as Attained by Reason               0.06717364
## XCIV. On the Value of Advice                                0.01081081
## LXXXI. On Benefits                                          0.01626712
## LXXXV. On Some Vain Syllogisms                              0.01472754
##                                                                 precept
## CXIII. On the Vitality of the Soul and Its Attributes       .          
## LXVI. On Various Aspects of Virtue                          .          
## LXXXVII. Some Arguments in Favour of the Simple Life        .          
## CXVII. On Real Ethics as Superior to Syllogistic Subtleties .          
## LXXVI. On Learning Wisdom in Old Age                        .          
## CII. On the Intimations of Our Immortality                  .          
## CXXIV. On the True Good as Attained by Reason               0.001267427
## XCIV. On the Value of Advice                                0.020463320
## LXXXI. On Benefits                                          .          
## LXXXV. On Some Vain Syllogisms                              .</code></pre>
<p>We can consider each row of this matrix as the vector representing a letter, and thus compute the
cosine similarity between letters. For this, I am using the <code>sim2()</code> function from the <code>{text2vec}</code>
package. I then create the <code>get_similar_letters()</code> function that returns similar letters for a
given reference letter:</p>
<pre class="r"><code>similarities &lt;- sim2(sparse_matrix, method = &quot;cosine&quot;, norm = &quot;l2&quot;) 

get_similar_letters &lt;- function(similarities, reference_letter, n_recommendations = 3){
  sort(similarities[reference_letter, ], decreasing = TRUE)[1:(2 + n_recommendations)]
}</code></pre>
<pre class="r"><code>get_similar_letters(similarities, 19)</code></pre>
<pre><code>##          XXX. On Conquering the Conqueror 
##                                 1.0000000 
##                  XXIV. On Despising Death 
##                                 0.6781600 
##      LXXXII. On the Natural Fear of Death 
##                                 0.6639736 
## LXX. On the Proper Time to Slip the Cable 
##                                 0.5981706 
## LXXVIII. On the Healing Power of the Mind 
##                                 0.4709679</code></pre>
<pre class="r"><code>get_similar_letters(similarities, 99)</code></pre>
<pre><code>##                              LXI. On Meeting Death Cheerfully 
##                                                     1.0000000 
##                     LXX. On the Proper Time to Slip the Cable 
##                                                     0.5005015 
## XCIII. On the Quality, as Contrasted with the Length, of Life 
##                                                     0.4631796 
##                         CI. On the Futility of Planning Ahead 
##                                                     0.4503093 
##                              LXXVII. On Taking One&#39;s Own Life 
##                                                     0.4147019</code></pre>
<pre class="r"><code>get_similar_letters(similarities, 32)</code></pre>
<pre><code>##                                    LIX. On Pleasure and Joy 
##                                                   1.0000000 
##          XXIII. On the True Joy which Comes from Philosophy 
##                                                   0.4743672 
##                          CIX. On the Fellowship of Wise Men 
##                                                   0.4526835 
## XC. On the Part Played by Philosophy in the Progress of Man 
##                                                   0.4498278 
##         CXXIII. On the Conflict between Pleasure and Virtue 
##                                                   0.4469312</code></pre>
<pre class="r"><code>get_similar_letters(similarities, 101)</code></pre>
<pre><code>##                    X. On Living to Oneself 
##                                  1.0000000 
##          LXXIII. On Philosophers and Kings 
##                                  0.3842292 
##                  XLI. On the God within Us 
##                                  0.3465457 
##                       XXXI. On Siren Songs 
##                                  0.3451388 
## XCV. On the Usefulness of Basic Principles 
##                                  0.3302794</code></pre>
<p>As we can see from these examples, this seems to be working quite well: the first title is the
title of the reference letter, will the next 3 are the suggested letters. The problem is that my
matrix is not in the right order, and thus reference letter 19 does not correspond to letter 19
of Seneca… I have to correct that, but not today.</p>
