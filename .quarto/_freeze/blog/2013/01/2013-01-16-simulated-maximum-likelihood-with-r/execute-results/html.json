{
  "hash": "b4eff136d2ed25d2be500f7af4caa557",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simulated Maximum Likelihood with R\"\ndate: \"2013-12-11\"\ncategories:\n  - R\ntoc: true\nexecute:\n  freeze: auto\n---\n\n\n<head>\n<script src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>\n<script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>\n\n</head>\n\n<body>\n\n<p>This document details section <em>12.4.5. Unobserved Heterogeneity \nExample</em> from Cameron and Trivedi's book - MICROECONOMETRICS: Methods and \nApplications. The original source code giving the results from table 12.2 are \navailable from the authors&#39; site <a \nhref=\"http://cameron.econ.ucdavis.edu/mmabook/mmaprograms.html\">here</a> and \nwritten for Stata. This is an attempt to translate the code to R. I'd like to \nthank Reddit user <a \nhref=\"http://www.reddit.com/user/anonemouse2010\">anonemouse2010</a> for his \nadvice which helped me write the function.</p>\n\n<p>Consult the original source code if you want to read the authors&#39; comments. If you want the R source code without all the commentaries, grab it <a href='/assets/code/simulated_max_lik.R'>here</a>. This is not guaranteed to work, nor to be correct. It could set your pet on fire and/or eat your first born. Use at your own risk. I may, or may not, expand this example. Corrections, constructive criticism are welcome.</p>\n\n<p>The model is $y=\\theta+u+\\varepsilon$ where $\\theta$ is a scalar parameter equal to 1. $u$ is extreme value type 1 (Gumbel distribution), $\\varepsilon \\leadsto \\mathbb{N}(0,1)$. For more details, consult the book.</p>\n\n<h3>Import the data</h3>\n\n<p>You can consult the original source code to see how the authors simulated the data. To get the same results, and verify that I didn&#39;t make mistakes I prefer importing their data directly from their website.</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.table(\"http://cameron.econ.ucdavis.edu/mmabook/mma12p2mslmsm.asc\")\nu <- data[, 1]\ne <- data[, 2]\ny <- data[, 3]\nnumobs <- length(u)\nsimreps <- 10000\n```\n:::\n\n\n<h3>Simulation</h3>\n\n<p>In the code below, the following likelihood function:\n\n$$\\log{\\hat{L}_N(\\theta)} = \\dfrac{1}{N} \\sum_{i=1}^N\\log{\\big( \\dfrac{1}{S}\\sum_{s=1}^S \\dfrac{1}{\\sqrt{2\\pi}} \\exp \\{ -(-y_i-\\theta-u_i^s)^2/2 \\}\\big)}$$\n\nwhich can be found on page 397 is programmed using the function <code>sapply</code>.</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndenssim <- function(theta) {\n    loglik <- mean(sapply(y, function(y) log(mean((1/sqrt(2 * pi)) * exp(-(y - theta + log(-log(runif(simreps))))^2/2)))))\n    return(-loglik)\n}\n```\n:::\n\n\n<p>This likelihood is then maximized:</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(res <- optim(0.1, denssim, method = \"BFGS\", control = list(maxit = simreps)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n  17.05    0.45   17.51 \n```\n\n\n:::\n:::\n\n\n<p>Convergence is achieved pretty rapidly, to </p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$par\n[1] 1.064092\n\n$value\n[1] 1.923841\n\n$counts\nfunction gradient \n     107        9 \n\n$convergence\n[1] 0\n\n$message\nNULL\n```\n\n\n:::\n:::\n\n\n\n<p>which is close to the true value of the parameter 1 (which was used to generate the data). </p>\n\n<p>Let&#39;s try again with another parameter value, for example \\( \\theta=2.5 \\). We have to generate y again:</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny2 <- 2.5 + u + e\n```\n:::\n\n\n<p>and slightly modify the likelihood:</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndenssim2 <- function(theta) {\n  loglik <- mean(\n    sapply(\n      y2,\n      function(y2) log(mean((1/sqrt(2 * pi)) * exp(-(y2 - theta + log(-log(runif(simreps))))^2/2)))))\n  return(-loglik)\n}\n```\n:::\n\n\n<p>which can then be maximized:</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(res2 <- optim(0.1, denssim2, method = \"BFGS\", control = list(maxit = simreps)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n   7.69    0.10    7.94 \n```\n\n\n:::\n:::\n\n\n<p>The value that maximizes the likelihood is: </p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$par\n[1] 0.1\n\n$value\n[1] 3.014571\n\n$counts\nfunction gradient \n      50        3 \n\n$convergence\n[1] 0\n\n$message\nNULL\n```\n\n\n:::\n:::\n\n\n<p>which is close to the true value of the parameter 2.5 (which was used to generate the data). </p>\n\n</body>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}