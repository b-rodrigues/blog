{
  "hash": "00b56a1562fd5989fd906c8b4447a090",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 2025-02-17\ntitle: Why we forked nixpkgs\ncategories:\n  - R\n  - nix\ntoc: true\nexecute:\n  freeze: auto\n---\n\n\n\n<div style=\"text-align: center;\">\n  <p>\n    <a>\n      <img src=\"../assets/img/fork.webp\" style=\"width: 50%; height: auto;\">\n    </a>\n  </p>\n</div>\n\n## Here's why\n\n`nixpkgs` is a GitHub repository that contains tens of thousands of Nix\nexpressions used by the Nix package manager to install software. By default, the\nnix package manager will pull expressions from `NixOS/nixpkgs`, but when using\n`{rix}` our fork `rstats-on-nix/nixpkgs` is used instead.\n\nBecause forks can sometimes be a bit controversial, we decided a blog post was\nin order.\n\nFirst of all, let's make something clear: this doesn't mean that we don't\ncontribute to upstream anymore, quite the contrary. But Nix is first and\nforemost the package manager of a Linux distribution, NixOS, and as such, the\nway it does certain things only make sense in that context. For our needs,\nhaving a fork gives us more flexibility. Let me explain.\n\nAs you’ll know, if you’ve been using `{rix}` and thus Nix, it is possible to use\na commit of the `nixpkgs` GitHub repository as the source for your packages.\nFor example, the\n`6a9bda32519e710a0c0ab8ecfabe9307ab90ef0c` commit of `nixpkgs` will provide\n`{dplyr}` version 1.1.4 while this commit\n`407f8825b321617a38b86a4d9be11fd76d513da2` will provide version 1.0.7.\n\nWhile it is technically possible for Nix to provide many versions of the same\npackage (for example, you can install the latest Emacs by installing the `emacs`\npackage, or Emacs 28 by installing `emacs28`) this ultimately depends on whether\nthe maintainer wishes to do so, or whether it is practical. As you can imagine,\nwith more than 20'000 CRAN and Bioconductor packages, that is not possible for\nus (by \"us\", I mean the maintainers of the R ecosystem for Nix). So for a given\n`nixpkgs` commit, you won't be able to *easily* install a specific version of\n`{dplyr}` that is not included in that particular `nixpkgs` commit. Instead, you\ncan install it from source, and this is possible with `{rix}` by writing\nsomething like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrix(..., r_pkgs = \"dplyr@1.0.7\", ...)\n```\n:::\n\n\n\nbut because this attempts to install the package from source, it can fail if\nthat package needs Nix-specific fixes to work.\n\nAlso, it isn't practical to update the whole of the R packages set on Nix every\nday: so while CRAN and Bioconductor get updates daily, the R packages set on Nix\ngets updated only around new releases of R. Again, this is a consequence of Nix\nbeing first and foremost the package manager of a Linux distribution with its\nown governance and way of doing things.\n\nThis is where the `rstats-on-nix` fork of `nixpkgs` is interesting: because it\nis a fork, we can afford to do things in a way that could not be possible or\npractical for upstream.\n\nThe first thing this fork allows us to do is offer a daily snapshot of CRAN.\nEvery day, thanks to Github Actions, the R packages set gets updated, and the\nresult commited to a dated branch. This has been going on since the 14th of\nDecember 2024 (see\n[here](https://github.com/rstats-on-nix/nixpkgs/tree/2024-12-14)). So when you\nset a date as in `rix(date = \"2024-12-14\", ...)` this the fork that is going to\nget used. But this doesn’t mean that we recommend you use any date from the\n`rstats-on-nix/nixpkgs` fork: instead, each Monday, another action uses this\nfork and tries to build a set of popular packages on Linux and macOS, and only\nif this succeeds is the date added through a PR to the list of available\ndates on `{rix}`!\n\nThe reason this is done like this is to manage another *risk* of the upstream\n`nixpkgs`. As you know, `nixpkgs` is huge, and though the utmost care is taken\nby contributors and the PR review process is very strict, it can happen that\nupdating packages breaks other packages. For example recently RStudio was in a\nbroken state due to an issue in one its dependencies, `boost`. This is not the\nfault of anyone in particular: it's just that packages get updated and packages\nthat depend on them should get updated as well: but if that doesn't happen\nquickly enough, the `nixpkgs` maintainer faces a conundrum. Either he or she\ndoesn't update the package because it breaks others, but not updating a package\ncould be a security vulnerability, or he or she updates the package, but now\nothers, perhaps less critical packages are broken and need to be fixed, either\nby their upstream developers, or by the `nixpkgs` maintainer of said packages.\nIn the case of RStudio a fix was proposed and promptly merged, but if you wanted\nto install RStudio during the time it took to fix it, you would have faced\nan error message, which isn't great if all you want is use Nix shells as\ndevelopment environments.\n\nSo for us, having a fork allows us to backport these fixes and so if you try to\ninstall RStudio using the latest available date, which is `\"2025-02-10\"`, it’s\ngoing to work, whereas if you tried to build it on that date using upstream\n`nixpkgs` you'd be facing an error!\n\nWe spent quite some time backporting fixes: we went back all the way to\n2019. The way this works, is that we start by checking out a `nixpkgs` commit on\nselected dates, then we \"update\" the R packages set by using the Posit CRAN and\nBioconductor daily snapshots. Then, we backport as many fixes as possible, and\nensure that a selection of popular packages work on both x86-linux (which\nincludes Windows, through WSL) and aarch64-darwin (the M-series of Macs). Then\nwe commit everything to a dated branch of the `rstats-on-nix/nixpkgs` fork. You\ncan check out all the available dates by running: `rix::available_dates()`.\nWe're pretty confindent that you should not face any issues when using Nix to\nbuild reproducible environments for R. However, should you face a problem, don't\nhesitate to open an issue!\n\nWe have now packages and R versions working on Linux and macOS from March 2019\nto now. See [this\nrepository](https://github.com/rstats-on-nix/daily_cran/blob/master/readme.md)\nthat contains the scripts that allowed us to do it. Backporting fixes was\nespecially important for Apple Silicon computers, as it took some time for this\nplatform to work correctly on Nix. By backporting fixes, we can now provide\nolders versions of these packages for Apple Silicon as well!\n\nUsing this approach, our fork now contains many more versions of working R\npackages than upstream. `{rix}` will thus likely keep pointing towards our fork\nin the future, and not upstream anymore. This should provide a much better user\nexperience. An issue with our fork though, is that by backporting fixes, we\nessentially create new Nix packages that are not included in upstream, and thus,\nthese are not built by Hydra, Nix's CI platform which builds binary packages. In\npractice this means that anyone using our fork will have to compile many\npackages from source. Now this is pretty bad, as building packages from source\ntakes quite some time. But fear not, because thanks to\n[Cachix](https://www.cachix.org/) we now also have a dedicated binary cache of\npackages that complements the default, public Nix cache! We provide instructions\non how to use Cachix, it's very easy, it's just running 2 additional commands\nafter installing Nix. Using Cachix speeds up the installation process of\npackages tremendously. I want to give my heartfelt thanks to\n[Domen Kožar](https://www.cachix.org/about) for sponsoring the cache!\n\nAnother thing we do with our fork is run an action every day at midnight, that\nmonitors the *health* of the R packages set. Of course, we don't build every\nCRAN package, merely a handful, but these are among the most popular or the most\n*at-risk* of being in a broken state. See\n[here](https://github.com/rstats-on-nix/monitor_health/actions).\n\n## Also, there's a new rix release on CRAN\n\n`{rix}` now handles remote packages that have remote dependencies (themselves\nwith remote dependencies) much better thanks to code by\n[Michael Heming](https://github.com/mihem).\n\nWe also spent quite some time making `{rix}` work better with IDEs and have also\ndocumented that in a\n[new vignette](https://docs.ropensci.org/rix/articles/e-configuring-ide.html).\nThe difference with previous releases of `{rix}`, is that now when a user\nsupplies an IDE name to the `ide` argument of the `rix()` function, that IDE\nwill get installed by Nix, which was previously not the case. This only really\naffects VS Code, as before, setting `ide = \"code\"` would only add the\n`{languageserver}` server package to the list of R packages to install. That was\nconfusing, because if `ide = \"rstudio\"`, then RStudio would be installed. So we\ndecided that if `ide = \"some editor\"`, then that editor should be installed by\nNix. The vignette linked above explains in great detail how you can configure\nyour editor to work with Nix shells.\n\nIf you decide to give `{rix}` a try, please let us know how it goes!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}