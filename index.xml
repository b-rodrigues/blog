<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Econometrics and Free Software</title>
<link>https://b-rodrigues.github.io/</link>
<atom:link href="https://b-rodrigues.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.37</generator>
<lastBuildDate>Thu, 09 Jan 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>github pages setup for this website</title>
  <link>https://b-rodrigues.github.io/posts/2025-01-09-github_pages_setup_with_quarto.html</link>
  <description><![CDATA[ 




<section id="desired-setup" class="level1">
<h1>Desired setup</h1>
<p>Setting up a Quarto website on github pages is fairly straightforward: <a href="https://quarto.org/docs/publishing/github-pages.html">you just need to follow the docs</a>! But in case you need some help, I’m sharing here all the steps I’ve went through.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>quarto</category>
  <category>github pages</category>
  <guid>https://b-rodrigues.github.io/posts/2025-01-09-github_pages_setup_with_quarto.html</guid>
  <pubDate>Thu, 09 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>huhu</title>
  <link>https://b-rodrigues.github.io/posts/2024-12-09-huhu.html</link>
  <description><![CDATA[ 




<section id="undesired-setup" class="level1">
<h1>Undesired setup</h1>
<p>Setting up a Quarto website on github pages is fairly straightforward: <a href="https://quarto.org/docs/publishing/github-pages.html">you just need to follow the docs</a>! But in case you need some help, I’m sharing here all the steps I’ve went through.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>quarto</category>
  <category>github pages</category>
  <guid>https://b-rodrigues.github.io/posts/2024-12-09-huhu.html</guid>
  <pubDate>Mon, 09 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>November blog post</title>
  <link>https://b-rodrigues.github.io/posts/2024-11-09-haha.html</link>
  <description><![CDATA[ 




<section id="undesired-setup" class="level1">
<h1>Undesired setup</h1>
<p>Setting up a Quarto website on github pages is fairly straightforward: <a href="https://quarto.org/docs/publishing/github-pages.html">you just need to follow the docs</a>! But in case you need some help, I’m sharing here all the steps I’ve went through.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>quarto</category>
  <category>github pages</category>
  <guid>https://b-rodrigues.github.io/posts/2024-11-09-haha.html</guid>
  <pubDate>Sat, 09 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Predicting job search by training a random forest on an unbalanced dataset</title>
  <link>https://b-rodrigues.github.io/posts/2018-02-11-census-random_forest.html</link>
  <description><![CDATA[ 




<p>
Update 2022: there some literature advising against using techniques to artificially balance a dataset, for example <a href="https://academic.oup.com/jamia/advance-article/doi/10.1093/jamia/ocac093/6605096?searchresult=1&amp;login=false#">one</a>. Use at your own risks!
</p>
<p>
In this blog post, I am going to train a random forest on census data from the US to predict the probability that someone is looking for a job. To this end, I downloaded the US 1990 census data from the UCI <a href="https://archive.ics.uci.edu/ml/datasets/US+Census+Data+%281990%29">Machine Learning Repository</a>. Having a background in economics, I am always quite interested by such datasets. I downloaded the raw data which is around 820mb uncompressed. You can download it from this folder <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/census1990-mld/">here</a>.
</p>
<p>
Before training a random forest on it, some preprocessing is needed. First problem: the columns in the data do not have names. Actually, training a random forest on unamed variables is possible, but I like my columns to have names. The names are on a separate file, called <code>USCensus1990raw.attributes.txt</code>. This is how this file looks like:
</p>
<pre><code>VAR:        TYP:   DES:    LEN:   CAT:    VARIABLE/CATEGORY LABEL:
__________________________________________________________________________________
HISPANIC     C       X      3             Detailed Hispanic Origin Code See Append
                                  000     Not Hispanic 006 199
                                  001     Mexican, Mex Am 210 220
                                  002     Puerto Rican 261 270
                                  003     Cuban 271 274
                                  004     Other Hispanic 200 209, 250 260, 290 401

VAR:        TYP:   DES:    LEN:   CAT:    VARIABLE/CATEGORY LABEL:
__________________________________________________________________________________
HOUR89       C       X      2             Usual Hrs. Worked Per Week Last Yr. 1989
                                  00      N/a Less Than 16 Yrs. Old/did Not Work i
                                  99      99 or More Usual Hrs.

VAR:        TYP:   DES:    LEN:   CAT:    VARIABLE/CATEGORY LABEL:
__________________________________________________________________________________
HOURS        C       X      2             Hrs. Worked Last Week
                                  00      N/a Less Than 16 Yrs. Old/not At Work/un
                                  99      99 or More Hrs. Worked Last Week

VAR:        TYP:   DES:    LEN:   CAT:    VARIABLE/CATEGORY LABEL:
__________________________________________________________________________________
IMMIGR       C       X      2             Yr. of Entry
                                  00      Born in the U.S.
                                  01      1987 to 1990
                                  02      1985 to 1986
                                  03      1982 to 1984


                                  04      1980 or 1981
                                  05      1975 to 1979
                                  06      1970 to 1974
                                  07      1965 to 1969
                                  08      1960 to 1964
                                  09      1950 to 1959
                                  10      Before 1950</code></pre>
<p>
The variable names are always written in upper case and sometimes end with some numbers. Regular expressions will help extract these column names:
</p>
<pre class="r"><code>library(tidyverse)

census_raw = import("USCensus1990raw.data.txt")

attributes_raw = readLines("USCensus1990raw.attributes.txt")

column_names = str_extract_all(attributes_raw, "^[A-Z]+(\\d{1,}|[A-Z])\\s+") %&gt;%
  flatten %&gt;%
  str_trim %&gt;%
  tolower</code></pre>
<p>
Using <code>readLines</code> I load this text file into R. Then with <code>stringr::str_extract_all</code>, I can extract the variable names from this text file. The regular expression, <code><sup>1</sup>+(\d{1,}|[A-Z])\s+</code> can seem complicated, but by breaking it up, it’ll be clear:
</p>
<ul>
<li>
<code><sup>2</sup>+</code>: matches one or more uppercase letter, at the beginning of the line (hence the <code>^</code>)
</li>
<li>
<code>\d{1,}</code>: matches one or more digits
</li>
<li>
<code>[A-Z]\s+</code>: matches one uppercase letter, followed by one or more spaces
</li>
<li>
<code>(\d{1,}|[A-Z])\s+</code>: matches one or more digits OR (the <code>|</code>) matches one uppercase letter, followed by one or more spaces
</li>
</ul>
<p>
This regular expression matches only the variable names. By using <code>^</code> I only limit myself to the uppercase letters at the start of the line, which already removes a lot of unneeded lines from the text. Then, by matching numbers or letters, followed by spaces, I avoid matching strings such as <code>VAR:</code>. There’s probably a shorter way to write this regular expression, but since this one works, I stopped looking for another solution.
</p>
<p>
Now that I have a vector called <code>column_names</code>, I can baptize the columns in my dataset:
</p>
<pre class="r"><code>colnames(census_raw) &lt;- column_names</code></pre>
<p>
I also add a column called <code>caseid</code> to the dataset, but it’s actually not really needed. But it made me look for and find <code>rownames_to_column()</code>, which can be useful:
</p>
<pre class="r"><code>census = census_raw %&gt;%
  rownames_to_column("caseid")</code></pre>
<p>
Now I select the variables I need. I use <code>dplyr::select()</code> to select the columns I need (actually, I will remove some of these later for the purposes of the blog post, but will continue exploring them. Maybe write a part 2?):
</p>
<pre class="r"><code>census %&lt;&gt;%
  select(caseid, age, citizen, class, disabl1, disabl2, lang1, looking, fertil, hour89, hours, immigr,
         industry, means, occup, powpuma, powstate, pwgt1, race, ragechld, rearning,
         relat1, relat2, remplpar, rlabor, rpincome, rpob, rspouse, rvetserv, school, sex, tmpabsnt,
         travtime, week89, work89, worklwk, yearsch, yearwrk, yrsserv)</code></pre>
<p>
Now, I convert factor variables to factors and only relevel the <code>race</code> variable:
</p>
<pre class="r"><code>census %&lt;&gt;%
  mutate(race = case_when(race == 1 ~ "white",
                          race == 2 ~ "black",
                          !(race %in% c(1, 2)) ~ "other",
                          is.na(race) ~ NA_character_)) %&gt;%
  filter(looking != 0) %&gt;%
  mutate_at(vars(class, disabl1, disabl2, lang1, looking, fertil, immigr, industry, means,
                 occup, powstate, race, ragechld, remplpar, rlabor, rpob, rspouse,
                 rvetserv, school, sex, tmpabsnt, work89, worklwk, yearwrk),
            as.factor) %&gt;%
  select(looking, age, class, disabl1, disabl2, lang1, fertil, immigr,
         race, ragechld, remplpar, rlabor, rpob, rspouse,
         rvetserv, school, sex, tmpabsnt, work89, worklwk, yearwrk, rpincome, rearning,
         travtime, week89, work89, hours, yearsch, yrsserv) %&gt;%
  as_tibble

export(census, "regression_data.rds")</code></pre>
<p>
So the variable I want to predict is <code>looking</code> which has 2 levels (I removed the level <code>0</code>, which stands for <code>NA</code>). I convert all the variables that are supposed to be factors into factors using <code>mutate_at()</code> and then reselect a subsample of the columns. <code>census</code> is now a tibble with 39 columns and 2458285 rows. I will train the forest on a subsample only, because with cross validation it would take forever on the whole dataset.
</p>
<p>
I run the training on another script, that I will then run using the <code>Rscript</code> command instead of running it from Spacemacs (yes, I don’t use RStudio at home but Spacemacs + ESS). Here’s the script:
</p>
<pre class="r"><code>library(caret)
library(doParallel)
library(rio)

reg_data = import("regression_data.rds")</code></pre>
<pre class="r"><code>janitor::tabyl(reg_data$looking)</code></pre>
<pre class="r"><code>reg_data$looking      n   percent
1                1  75792 0.1089562
2                2 619827 0.8910438</code></pre>
<p>
90% of the individuals in the sample are not looking for a new job. For training purposes, I will only use 50000 observations instead of the whole sample. I’m already thinking about writing another blog post where I show how to use the whole data. But 50000 observations should be more than enough to have a pretty nice model. However, having 90% of observations belonging to a single class can cause problems with the model; the model might predict that everyone should belong to class 2 and in doing so, the model would be 90% accurate! Let’s ignore this for now, but later I am going to tackle this issue with a procedure calleds SMOTE.
</p>
<pre class="r"><code>set.seed(1234)
sample_df = sample_n(reg_data, 50000)</code></pre>
<p>
Now, using <code>caret::trainIndex()</code>, I partition the data into a training sample and a testing sample:
</p>
<pre class="r"><code>trainIndex = createDataPartition(sample_df$looking, p = 0.8,
                                 list = FALSE,
                                 times = 1)

train_data = sample_df[trainIndex, ]
test_data = sample_df[-trainIndex, ]</code></pre>
<p>
I also save the testing data to disk, because when the training is done I’ll lose my R session (remember, I’ll run the training using Rscript):
</p>
<pre class="r"><code>saveRDS(test_data, "test_data.rds")</code></pre>
<p>
Before training the model, I’ll change some options; I’ll do 5-fold cross validation that I repeat 5 times. This will further split the training set into training/testing sets which will increase my confidence in the metrics that I get from the training. This will ensure that the best model really is the best, and not a fluke resulting from the splitting of the data that I did beforehand. Then, I will test the best model on the testing data from above:
</p>
<pre class="r"><code>fitControl &lt;- trainControl(
  method = "repeatedcv",
  number = 5,
  repeats = 5)</code></pre>
<p>
A very nice feature from the <code>caret</code> package is the possibility to make the training in parallel. For this, load the <code>doParallel</code> package (which I did above), and then register the number of cores you want to use for training with <code>makeCluster()</code>. You can replace <code>detectCores()</code> by the number of cores you want to use:
</p>
<pre class="r"><code>cl = makeCluster(detectCores())
registerDoParallel(cl)</code></pre>
<p>
Finally, we can train the model:
</p>
<pre class="r"><code>fit_caret = train(looking ~ .,
                  data = train_data,
                  trainControl = fitControl)</code></pre>
<p>
Because it takes around 1 and a half hours to train, I save the model to disk using <code>saveRDS()</code>:
</p>
<pre class="r"><code>saveRDS(fit_caret, "model_unbalanced.rds")</code></pre>
<p>
The picture below shows all the cores from my computer running and RAM usage being around 20gb during the training process:
</p>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/training_cpu.png" class="img-fluid"></p>
</div>
<p>
And this the results of training the random forest on the unbalanced data:
</p>
<pre class="r"><code>model_unbalanced = readRDS("model_unbalanced.rds")

test_data = readRDS("test_data.rds")

plot(model_unbalanced)

preds = predict.train(model_unbalanced, newdata = test_data)

confusionMatrix(preds, reference = test_data$looking)</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/plot_acc_unbalanced.png" class="img-fluid"></p>
</div>
<pre class="r"><code>Confusion Matrix and Statistics

Reference
Prediction     1     2
1  1287   112
2   253 12348

Accuracy : 0.9739
95% CI : (0.9712, 0.9765)
    No Information Rate : 0.89
    P-Value [Acc &gt; NIR] : &lt; 2.2e-16

                  Kappa : 0.8613
 Mcnemar's Test P-Value : 2.337e-13

            Sensitivity : 0.83571
            Specificity : 0.99101
         Pos Pred Value : 0.91994
         Neg Pred Value : 0.97992
             Prevalence : 0.11000
         Detection Rate : 0.09193
   Detection Prevalence : 0.09993
      Balanced Accuracy : 0.91336

       'Positive' Class : 1</code></pre>
<p>
If someone really is looking for a job, the model is able to predict it correctly 92% of the times and 98% of the times if that person is not looking for a job. It’s slightly better than simply saying than no one is looking for a job, which would be right 90% of the times, but not great either.
</p>
<p>
To train to make the model more accurate in predicting class 1, I will resample the training set, but by downsampling class 2 and upsampling class 1. This can be done with the function <code>SMOTE()</code> from the <code>{DMwR}</code> package. However, the testing set should have the same distribution as the population, so I should not apply <code>SMOTE()</code> to the testing set. I will resplit the data, but this time with a 95/5 % percent split; this way I have 5% of the original dataset used for testing, I can use <code>SMOTE()</code> on the 95% remaining training set. Because <code>SMOTE</code>ing takes some time, I save the <em>SMOTE</em>d training set using <code>readRDS()</code> for later use:
</p>
<pre class="r"><code>reg_data = import("regression_data.rds")


set.seed(1234)
trainIndex = createDataPartition(reg_data$looking, p = 0.95,
                                 list = FALSE,
                                 times = 1)

test_data = reg_data[-trainIndex, ]

saveRDS(test_data, "test_smote.rds")


# Balance training set
train_data = reg_data[trainIndex, ]

train_smote = DMwR::SMOTE(looking ~ ., train_data, perc.over = 100, perc.under=200)

saveRDS(train_smote, "train_smote.rds")</code></pre>
<p>
The testing set has 34780 observations and below you can see the distribution of the target variable, <code>looking</code>:
</p>
<pre class="r"><code>janitor::tabyl(test_data$looking)
  test_data$looking     n   percent
1                 1  3789 0.1089419
2                 2 30991 0.8910581</code></pre>
<p>
Here are the results:
</p>
<pre class="r"><code>model_smote = readRDS("model_smote.rds")

test_smote = readRDS("test_smote.rds")

plot(model_smote)

preds = predict.train(model_smote, newdata = test_smote)

confusionMatrix(preds, reference = test_smote$looking)</code></pre>
<pre class="r"><code>Confusion Matrix and Statistics

Reference
Prediction     1     2
1  3328  1142
2   461 29849

Accuracy : 0.9539
95% CI : (0.9517, 0.9561)
    No Information Rate : 0.8911
    P-Value [Acc &gt; NIR] : &lt; 2.2e-16

                  Kappa : 0.78
 Mcnemar's Test P-Value : &lt; 2.2e-16

            Sensitivity : 0.87833
            Specificity : 0.96315
         Pos Pred Value : 0.74452
         Neg Pred Value : 0.98479
             Prevalence : 0.10894
         Detection Rate : 0.09569
   Detection Prevalence : 0.12852
      Balanced Accuracy : 0.92074

       'Positive' Class : 1</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/plot_acc_unbalanced.png" class="img-fluid"></p>
</div>
<p>
The balanced accuracy is higher, but unlike what I expected (and hoped), this model is worse in predicting class 1! I will be trying one last thing; since I have a lot of data at my disposal, I will simply sample 25000 observations where the target variable <code>looking</code> equals 1, and then sample another 25000 observations where the target variable equals 2 (without using <code>SMOTE()</code>). Then I’ll simply bind the rows and train the model on that:
</p>
<pre class="r"><code>reg_data = import("regression_data.rds")


set.seed(1234)
trainIndex = createDataPartition(reg_data$looking, p = 0.95,
                                 list = FALSE,
                                 times = 1)

test_data = reg_data[-trainIndex, ]

saveRDS(test_data, "test_up_down.rds")


# Balance training set
train_data = reg_data[trainIndex, ]

train_data1 = train_data %&gt;%
  filter(looking == 1)

set.seed(1234)
train_data1 = sample_n(train_data1, 25000)


train_data2 = train_data %&gt;%
  filter(looking == 2)

set.seed(1234)
train_data2 = sample_n(train_data2, 25000)

train_up_down = bind_rows(train_data1, train_data2)


fitControl &lt;- trainControl(
  method = "repeatedcv",
  number = 5,
  repeats = 5)

cl = makeCluster(detectCores())
registerDoParallel(cl)

fit_caret = train(looking ~ .,
                  data = train_up_down,
                  trControl = fitControl,
                  preProcess = c("center", "scale"))

saveRDS(fit_caret, "model_up_down.rds")</code></pre>
<p>
And here are the results:
</p>
<pre class="r"><code>model_up_down = readRDS("model_up_down.rds")

test_up_down = readRDS("test_up_down.rds")

plot(model_up_down)

preds = predict.train(model_up_down, newdata = test_up_down)

confusionMatrix(preds, reference = test_up_down$looking)</code></pre>
<pre class="r"><code>Confusion Matrix and Statistics

Reference
Prediction     1     2
1  3403  1629
2   386 29362

Accuracy : 0.9421
95% CI : (0.9396, 0.9445)
    No Information Rate : 0.8911
    P-Value [Acc &gt; NIR] : &lt; 2.2e-16

                  Kappa : 0.7391
 Mcnemar's Test P-Value : &lt; 2.2e-16

            Sensitivity : 0.89813
            Specificity : 0.94744
         Pos Pred Value : 0.67627
         Neg Pred Value : 0.98702
             Prevalence : 0.10894
         Detection Rate : 0.09784
   Detection Prevalence : 0.14468
      Balanced Accuracy : 0.92278

       'Positive' Class : 1</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/plot_acc_up_down.png" class="img-fluid"></p>
</div>
<p>
Looks like it’s not much better than using <code>SMOTE()</code>!
</p>
<p>
There are several ways I could achieve better predictions; tuning the model is one possibility, or perhaps going with another type of model altogether. I will certainly come back to this dataset in future blog posts!
</p>
<p>
Using the best model, let’s take a look at which variables are the most important for predicting job search:
</p>
<pre class="r"><code>&gt; varImp(model_unbalanced)
rf variable importance

only 20 most important variables shown (out of 109)

Overall
rlabor3   100.0000
rlabor6    35.2702
age         6.3758
rpincome    6.2964
tmpabsnt1   5.8047
rearning    5.3560
week89      5.2863
tmpabsnt2   4.0195
yearsch     3.4892
tmpabsnt3   1.7434
work892     1.3231
racewhite   0.9002
class1      0.7866
school2     0.7117
yearwrk2    0.6970
sex1        0.6955
disabl12    0.6809
lang12      0.6619
rpob23      0.6507
rspouse6    0.6330</code></pre>
<p>
It’s also possible to have a plot of the above:
</p>
<pre class="r"><code>plot(varImp(model_unbalanced))</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/varimp.png" class="img-fluid"></p>
</div>
<p>
To make sense of this, we have to read the description of the features <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/census1990-mld/USCensus1990raw.attributes.txt">here</a>.
</p>
<p>
<code>rlabor3</code> is the most important variable, and means that the individual is unemployed. <code>rlabor6</code> means not in the labour force. Then the age of the individual as well as the individual’s income play a role. <code>tmpabsnt</code> is a variable that equals 1 if the individual is temporary absent from work, due to a layoff. All these variables having an influence on the probability of looking for a job make sense, but looks like a very simple model focusing on just a couple of variables would make as good a job as the random forest.
</p>
<p>
If you found this blog post useful, you might want to follow me on <a href="https://www.twitter.com/brodriguesco">twitter</a> for blog post updates.
</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A-Z↩︎</p></li>
<li id="fn2"><p>A-Z↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2018-02-11-census-random_forest.html</guid>
  <pubDate>Sun, 11 Feb 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Mapping a list of functions to a list of datasets with a list of columns as arguments</title>
  <link>https://b-rodrigues.github.io/posts/2018-01-19-mapping_functions_with_any_cols.html</link>
  <description><![CDATA[ 




<p>
This week I had the opportunity to teach R at my workplace, again. This course was the “advanced R” course, and unlike the one I taught at the end of last year, I had one more day (so 3 days in total) where I could show my colleagues the joys of the <code>tidyverse</code> and R.
</p>
<p>
To finish the section on programming with R, which was the very last section of the whole 3 day course I wanted to blow their minds; I had already shown them packages from the <code>tidyverse</code> in the previous days, such as <code>dplyr</code>, <code>purrr</code> and <code>stringr</code>, among others. I taught them how to use <code>ggplot2</code>, <code>broom</code> and <code>modelr</code>. They also liked <code>janitor</code> and <code>rio</code> very much. I noticed that it took them a bit more time and effort for them to digest <code>purrr::map()</code> and <code>purrr::reduce()</code>, but they all seemed to see how powerful these functions were. To finish on a very high note, I showed them the ultimate <code>purrr::map()</code> use case.
</p>
<p>
Consider the following; imagine you have a situation where you are working on a list of datasets. These datasets might be the same, but for different years, or for different countries, or they might be completely different datasets entirely. If you used <code>rio::import_list()</code> to read them into R, you will have them in a nice list. Let’s consider the following list as an example:
</p>
<pre class="r"><code>library(tidyverse)</code></pre>
<pre class="r"><code>data(mtcars)
data(iris)

data_list = list(mtcars, iris)</code></pre>
<p>
I made the choice to have completely different datasets. Now, I would like to map some functions to the columns of these datasets. If I only worked on one, for example on <code>mtcars</code>, I would do something like:
</p>
<pre class="r"><code>my_summarise_f = function(dataset, cols, funcs){
  dataset %&gt;%
    summarise_at(vars(!!!cols), funs(!!!funcs))
}</code></pre>
<p>
And then I would use my function like so:
</p>
<pre class="r"><code>mtcars %&gt;%
  my_summarise_f(quos(mpg, drat, hp), quos(mean, sd, max))</code></pre>
<pre><code>##   mpg_mean drat_mean  hp_mean   mpg_sd   drat_sd    hp_sd mpg_max drat_max
## 1 20.09062  3.596563 146.6875 6.026948 0.5346787 68.56287    33.9     4.93
##   hp_max
## 1    335</code></pre>
<p>
<code>my_summarise_f()</code> takes a dataset, a list of columns and a list of functions as arguments and uses tidy evaluation to apply <code>mean()</code>, <code>sd()</code>, and <code>max()</code> to the columns <code>mpg</code>, <code>drat</code> and <code>hp</code> of <code>mtcars</code>. That’s pretty useful, but not useful enough! Now I want to apply this to the list of datasets I defined above. For this, let’s define the list of columns I want to work on:
</p>
<pre class="r"><code>cols_mtcars = quos(mpg, drat, hp)
cols_iris = quos(Sepal.Length, Sepal.Width)

cols_list = list(cols_mtcars, cols_iris)</code></pre>
<p>
Now, let’s use some <code>purrr</code> magic to apply the functions I want to the columns I have defined in <code>list_cols</code>:
</p>
<pre class="r"><code>map2(data_list,
     cols_list,
     my_summarise_f, funcs = quos(mean, sd, max))</code></pre>
<pre><code>## [[1]]
##   mpg_mean drat_mean  hp_mean   mpg_sd   drat_sd    hp_sd mpg_max drat_max
## 1 20.09062  3.596563 146.6875 6.026948 0.5346787 68.56287    33.9     4.93
##   hp_max
## 1    335
## 
## [[2]]
##   Sepal.Length_mean Sepal.Width_mean Sepal.Length_sd Sepal.Width_sd
## 1          5.843333         3.057333       0.8280661      0.4358663
##   Sepal.Length_max Sepal.Width_max
## 1              7.9             4.4</code></pre>
<p>
That’s pretty useful, but not useful enough! I want to also use different functions to different datasets!
</p>
<p>
Well, let’s define a list of functions then:
</p>
<pre class="r"><code>funcs_mtcars = quos(mean, sd, max)
funcs_iris = quos(median, min)

funcs_list = list(funcs_mtcars, funcs_iris)</code></pre>
<p>
Because there is no <code>map3()</code>, we need to use <code>pmap()</code>:
</p>
<pre class="r"><code>pmap(
  list(
    dataset = data_list,
    cols = cols_list,
    funcs = funcs_list
  ),
  my_summarise_f)</code></pre>
<pre><code>## [[1]]
##   mpg_mean drat_mean  hp_mean   mpg_sd   drat_sd    hp_sd mpg_max drat_max
## 1 20.09062  3.596563 146.6875 6.026948 0.5346787 68.56287    33.9     4.93
##   hp_max
## 1    335
## 
## [[2]]
##   Sepal.Length_median Sepal.Width_median Sepal.Length_min Sepal.Width_min
## 1                 5.8                  3              4.3               2</code></pre>
<p>
Now I’m satisfied! Let me tell you, this blew their minds 😄!
</p>
<p>
To be able to use things like that, I told them to always solve a problem for a single example, and from there, try to generalize their solution using functional programming tools found in <code>purrr</code>.
</p>
<p>
If you found this blog post useful, you might want to follow me on <a href="https://www.twitter.com/brodriguesco">twitter</a> for blog post updates.
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2018-01-19-mapping_functions_with_any_cols.html</guid>
  <pubDate>Fri, 19 Jan 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>It’s lists all the way down, part 2: We need to go deeper</title>
  <link>https://b-rodrigues.github.io/posts/2018-01-05-lists_all_the_way2.html</link>
  <description><![CDATA[ 




<p>
Shortly after my <a href="http://www.brodrigues.co/blog/2018-01-03-lists_all_the_way/">previous blog post</a>, I saw this tweet on my timeline:
</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
The purrr resolution for 2018 - learn at least one purrr function per week - is officially launched with encouragement and inspiration from <a href="https://twitter.com/statwonk?ref_src=twsrc%5Etfw"><span class="citation" data-cites="statwonk">@statwonk</span></a> and <a href="https://twitter.com/hadleywickham?ref_src=twsrc%5Etfw"><span class="citation" data-cites="hadleywickham">@hadleywickham</span></a>. We start with modify_depth: <a href="https://t.co/dCMnSHP7Pl">https://t.co/dCMnSHP7Pl</a>. Please join to learn and share. <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a>
</p>
— Isabella R. Ghement (<span class="citation" data-cites="IsabellaGhement">@IsabellaGhement</span>) <a href="https://twitter.com/IsabellaGhement/status/948685418731487232?ref_src=twsrc%5Etfw">January 3, 2018</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>
This is a great initiative, and a big coincidence, as I just had blogged about nested lists and how to map over them. I also said this in my previous blog post:
</p>
<blockquote class="blockquote">
<p>
There is also another function that you might want to study, modify_depth() which solves related issues but I will end the blog post here. I might talk about it in a future blog post.
</p>
</blockquote>
<p>
And so after I got this reply from <a href="https://twitter.com/IsabellaGhement"><code><span class="citation" data-cites="IsabellaGhement">@IsabellaGhement</span></code></a>:
</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Bruno, I would love it if you would chime in with an explicit contrast between nested map calls (which I personally find a bit clunky) and alternatives. In other words, present solutions side-by-side and highlight pros and cons. That would be very useful! 🤗
</p>
— Isabella R. Ghement (<span class="citation" data-cites="IsabellaGhement">@IsabellaGhement</span>) <a href="https://twitter.com/IsabellaGhement/status/949029796788367361?ref_src=twsrc%5Etfw">January 4, 2018</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>
What else was I supposed to do than blog about <code>purrr::modify_depth()</code>?
</p>
<p>
Bear in mind that I was not really familiar with this function before writing my last blog post; and even then, I decided to keep it for another blog post, which is this one. Which came much faster than what I had originally planned. So I might have missed some functionality; if that’s the case don’t hesitate to tweet me an example or send me an email! (bruno at brodrigues dot co)
</p>
<p>
So what is this blog post about? It’s about lists, nested lists, and some things that you can do with them. Let’s use the same example as in my last post:
</p>
<pre class="r"><code>library(tidyverse)</code></pre>
<pre class="r"><code>data(mtcars)

nice_function = function(df, param1, param2){
  df = df %&gt;%
    filter(cyl == param1, am == param2) %&gt;%
    mutate(result = mpg * param1 * (2 - param2))

  return(df)
}

nice_function(mtcars, 4, 0)</code></pre>
<pre><code>##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0</code></pre>
<pre class="r"><code>values_cyl = c(4, 6, 8)

values_am = c(0, 1)</code></pre>
<p>
Now that we’re here, we would like to apply <code>nice_function()</code> to each element of <code>values_cyl</code> and <code>values_am</code>. In essence, loop over these values. But because loops are not really easy to manipulate, (as explained, in part, <a href="http://blog.rdata.lu/post/2017-12-21-skip-errors-in-r-by-not-writing-loops/">here</a>) I use the <code>map*</code> family of functions included in <code>purrr</code> (When I teach R, I only show loops in the <em>advanced topics</em> chapter of my notes). So let’s “loop” over <code>values_cyl</code> and <code>values_am</code> with <code>map()</code> (and not <code>map_df()</code>; there is a reason for this, bear with me):
</p>
<pre class="r"><code>(result = map(values_am, ~map(values_cyl, nice_function, df = mtcars, param2 = .)))</code></pre>
<pre><code>## [[1]]
## [[1]][[1]]
##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0
## 
## [[1]][[2]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8
## 2 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2
## 3 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4
## 4 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6
## 
## [[1]][[3]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2
## 2  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8
## 3  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4
## 4  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8
## 5  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2
## 6  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4
## 7  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4
## 8  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2
## 9  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0
## 10 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2
## 11 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8
## 12 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2
## 
## 
## [[2]]
## [[2]][[1]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2
## 2 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6
## 3 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6
## 4 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6
## 5 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2
## 6 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0
## 7 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6
## 8 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6
## 
## [[2]][[2]]
##    mpg cyl disp  hp drat    wt  qsec vs am gear carb result
## 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4  126.0
## 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4  126.0
## 3 19.7   6  145 175 3.62 2.770 15.50  0  1    5    6  118.2
## 
## [[2]][[3]]
##    mpg cyl disp  hp drat   wt qsec vs am gear carb result
## 1 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4  126.4
## 2 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8  120.0</code></pre>
<p>
Until now, nothing new compared to my previous post (so if you have a hard time to follow what I’m doing here, go read it <a href="http://www.brodrigues.co/blog/2018-01-03-lists_all_the_way/">here</a>).
</p>
<p>
As far as I know, there is no way, in this example, to avoid this nested map call. However, suppose now that you want to apply a function to each single data frame contained in the list <code>result</code>. Of course, here, you could simply use <code>bind_rows()</code> to have a single data frame and then apply your function to it. But suppose that you want to keep this list structure; at the end, I will give an example of why you might want that, using another <code>purrr</code> function, <code>walk()</code> and Thomas’ J. Leeper brilliant <a href="https://github.com/leeper/rio"><code>rio</code></a> package.
</p>
<p>
So suppose you want to use this function here:
</p>
<pre class="r"><code>double_col = function(dataset, col){
  col = enquo(col)
  col_name = paste0("double_", quo_name(col))
  dataset %&gt;%
    mutate(!!col_name := 2*(!!col))
}</code></pre>
<p>
to double the values of a column of a dataset. It uses <code>tidyeval</code>’s <code>enquo()</code>, <code>quo_name()</code> and <code>!!()</code> functions to make it work with <code>tidyverse</code> functions such as <code>mutate()</code>. You can use it like this:
</p>
<pre class="r"><code>double_col(mtcars, hp)</code></pre>
<pre><code>##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb double_hp
## 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4       220
## 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4       220
## 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1       186
## 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1       220
## 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2       350
## 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1       210
## 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4       490
## 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2       124
## 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2       190
## 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4       246
## 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4       246
## 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3       360
## 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3       360
## 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3       360
## 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4       410
## 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4       430
## 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4       460
## 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1       132
## 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2       104
## 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1       130
## 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1       194
## 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2       300
## 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2       300
## 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4       490
## 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2       350
## 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1       132
## 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2       182
## 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2       226
## 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4       528
## 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6       350
## 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8       670
## 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2       218</code></pre>
<p>
Nice, but you want to use this function on all of the data frames contained in your <code>result</code> list. You can use a nested <code>map()</code> as before:
</p>
<pre class="r"><code>map(result, ~map(., .f = double_col, col = disp))</code></pre>
<pre><code>## [[1]]
## [[1]][[1]]
##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result double_disp
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2       293.4
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4       281.6
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0       240.2
## 
## [[1]][[2]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8       516.0
## 2 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2       450.0
## 3 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4       335.2
## 4 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6       335.2
## 
## [[1]][[3]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2       720.0
## 2  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8       720.0
## 3  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4       551.6
## 4  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8       551.6
## 5  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2       551.6
## 6  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4       944.0
## 7  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4       920.0
## 8  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2       880.0
## 9  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0       636.0
## 10 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2       608.0
## 11 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8       700.0
## 12 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2       800.0
## 
## 
## [[2]]
## [[2]][[1]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2       216.0
## 2 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6       157.4
## 3 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6       151.4
## 4 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6       142.2
## 5 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2       158.0
## 6 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0       240.6
## 7 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6       190.2
## 8 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6       242.0
## 
## [[2]][[2]]
##    mpg cyl disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4  126.0         320
## 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4  126.0         320
## 3 19.7   6  145 175 3.62 2.770 15.50  0  1    5    6  118.2         290
## 
## [[2]][[3]]
##    mpg cyl disp  hp drat   wt qsec vs am gear carb result double_disp
## 1 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4  126.4         702
## 2 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8  120.0         602</code></pre>
<p>
but there’s an easier solution, which is using <code>modify_depth()</code>:
</p>
<pre class="r"><code>(result = modify_depth(result, .depth = 2, double_col, col = disp))</code></pre>
<pre><code>## [[1]]
## [[1]][[1]]
##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result double_disp
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2       293.4
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4       281.6
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0       240.2
## 
## [[1]][[2]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8       516.0
## 2 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2       450.0
## 3 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4       335.2
## 4 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6       335.2
## 
## [[1]][[3]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2       720.0
## 2  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8       720.0
## 3  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4       551.6
## 4  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8       551.6
## 5  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2       551.6
## 6  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4       944.0
## 7  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4       920.0
## 8  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2       880.0
## 9  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0       636.0
## 10 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2       608.0
## 11 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8       700.0
## 12 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2       800.0
## 
## 
## [[2]]
## [[2]][[1]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2       216.0
## 2 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6       157.4
## 3 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6       151.4
## 4 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6       142.2
## 5 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2       158.0
## 6 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0       240.6
## 7 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6       190.2
## 8 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6       242.0
## 
## [[2]][[2]]
##    mpg cyl disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4  126.0         320
## 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4  126.0         320
## 3 19.7   6  145 175 3.62 2.770 15.50  0  1    5    6  118.2         290
## 
## [[2]][[3]]
##    mpg cyl disp  hp drat   wt qsec vs am gear carb result double_disp
## 1 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4  126.4         702
## 2 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8  120.0         602</code></pre>
<p>
So how does it work? <code>modify_depth()</code> needs a list and a <code>.depth</code> argument, which corresponds to where you you want to apply your function. The following lines of code might help you understand:
</p>
<pre class="r"><code># Depth of 1:

result[[1]]</code></pre>
<pre><code>## [[1]]
##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result double_disp
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2       293.4
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4       281.6
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0       240.2
## 
## [[2]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8       516.0
## 2 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2       450.0
## 3 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4       335.2
## 4 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6       335.2
## 
## [[3]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result double_disp
## 1  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2       720.0
## 2  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8       720.0
## 3  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4       551.6
## 4  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8       551.6
## 5  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2       551.6
## 6  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4       944.0
## 7  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4       920.0
## 8  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2       880.0
## 9  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0       636.0
## 10 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2       608.0
## 11 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8       700.0
## 12 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2       800.0</code></pre>
<p>
In this example, a depth of 1 corresponds to a list of three data frame. Can you use your function <code>double_col()</code> on a list of three data frames? No, because the domain of <code>double_col()</code> is the set of data frames, not the set of lists of data frames. So you need to go deeper:
</p>
<pre class="r"><code># Depth of 2:

result[[1]][[1]] # or try result[[1]][[2]] or result[[1]][[3]]</code></pre>
<pre><code>##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result double_disp
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2       293.4
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4       281.6
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0       240.2</code></pre>
<p>
At the depth of 2, you’re dealing with data frames! So you can use your function <code>double_col()</code>. With a depth of 2, one might not see the added value of <code>modify_depth()</code> over nested map calls, but if you have to go even deeper, nested map calls are very confusing and verbose.
</p>
<p>
Now for the last part; why doing all this, and not simply bind all the rows, apply <code>double_col()</code> and call it a day? Well, suppose that there is a reason you have these data frames inside lists; for example, the first element, i.e., <code>result[[1]]</code> might be data for, say, Portugal, for 3 different years. <code>result[[2]]</code> however, is data for France, for the same years. Suppose also that you have to give this data, after having worked on it, to a colleague (or to another institution) in the Excel format; one Excel workbook per country, one sheet per year. This example might seem contrived, but I have been confronted to this exact situation very often. Well, if you bind all the rows together, how are you going to save the data in the workbooks like you are required to?
</p>
<p>
Well, thanks to <code>rio</code>, one line of code is enough:
</p>
<pre class="r"><code>library(rio)

walk2(result, list("portugal.xlsx", "france.xlsx"), export)</code></pre>
<p>
I know what you’re thinking; <em>Bruno, that’s two lines of code!</em>. Yes, but I had to load <code>rio</code>. Also, <code>walk()</code> (and <code>walk2()</code>) are basically the same as <code>map()</code>, but you use <code>walk()</code> over <code>map()</code> when you are only interested in the side effect of the function you are applying over your list; here, <code>export()</code> which is <code>rio</code>’s function to write data to disk. The side effect of this function is… writing data to disk! You could have used <code>map2()</code> just the same, but I wanted to show you <code>walk2()</code> (however, you cannot replace <code>map()</code> by <code>walk()</code> in most cases; try it and see what happens).
</p>
<p>
Here’s what it looks like:
</p>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/deeper_xlsx.gif" class="img-fluid"></p>
</div>
<p>
I have two Excel workbooks, (one per list), where each sheet is a data frame!
</p>
<p>
If you enjoy these blog posts, you can follow me on <a href="https://twitter.com/brodriguesco">twitter</a>.
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2018-01-05-lists_all_the_way2.html</guid>
  <pubDate>Fri, 05 Jan 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>It’s lists all the way down</title>
  <link>https://b-rodrigues.github.io/posts/2018-01-03-lists_all_the_way.html</link>
  <description><![CDATA[ 




<p>
<em>There’s a part 2 to this post: read it <a href="http://www.brodrigues.co/blog/2018-01-05-lists_all_the_way2/">here</a>.</em>
</p>
<p>
Today, I had the opportunity to help someone over at the R for Data Science Slack group (read more about this group <a href="https://medium.com/@kierisi/r4ds-the-next-iteration-d51e0a1b0b82">here</a>) and I thought that the question asked could make for an interesting blog post, so here it is!
</p>
<p>
Disclaimer: the way I’m doing things here is totally not optimal, but I want to illustrate how to map functions over nested lists. But I show the optimal way at the end, so for the people that are familiar with <code>purrr</code> don’t get mad at me.
</p>
<p>
Suppose you have to do certain data transformation tasks on a data frame, and you write a nice function that does that for you:
</p>
<pre class="r"><code>library(tidyverse)</code></pre>
<pre class="r"><code>data(mtcars)

nice_function = function(df, param1, param2){
  df = df %&gt;%
    filter(cyl == param1, am == param2) %&gt;%
    mutate(result = mpg * param1 * (2 - param2))

  return(df)
}

nice_function(mtcars, 4, 0)</code></pre>
<pre><code>##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0</code></pre>
<p>
This might seem like a silly function and not a nice function, but it will illustrate the point I want to make (and the question that was asked) very well. This function is completely useless, but bear with me. Now, suppose that you want to do these operations for each value of <code>cyl</code> and <code>am</code> (of course you can do that without using <code>nice_function()</code>…). First, you might want to fix the value of <code>am</code> to 0, and then loop over the values of <code>cyl</code>. But as I have explained in this <a href="http://blog.rdata.lu/post/2017-12-21-skip-errors-in-r-by-not-writing-loops/">other blog post</a> I prefer using the <code>map()</code> functions included in <code>purrr</code>. For example:
</p>
<pre class="r"><code>values_cyl = c(4, 6, 8)

(result = map(values_cyl, nice_function, df = mtcars, param2 = 0))</code></pre>
<pre><code>## [[1]]
##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0
## 
## [[2]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8
## 2 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2
## 3 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4
## 4 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6
## 
## [[3]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2
## 2  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8
## 3  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4
## 4  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8
## 5  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2
## 6  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4
## 7  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4
## 8  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2
## 9  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0
## 10 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2
## 11 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8
## 12 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2</code></pre>
<p>
What you get here is a list for each value in <code>values_cyl</code>; so one list for <code>4</code>, one for <code>6</code> and one for <code>8</code>. Suppose now that you are feeling adventurous, and want to loop over the values of <code>am</code> too:
</p>
<pre class="r"><code>values_am = c(0, 1)</code></pre>
<p>
So first, we need to map a function to each element of <code>values_am</code>. But which function? Well, for <em>given</em> value of <code>am</code>, our problem is the same as before; we need to map <code>nice_function()</code> to each value of <code>cyl</code>. So, that’s what we’re going to do:
</p>
<pre class="r"><code>(result = map(values_am, ~map(values_cyl, nice_function, df = mtcars, param2 = .)))</code></pre>
<pre><code>## [[1]]
## [[1]][[1]]
##    mpg cyl  disp hp drat    wt  qsec vs am gear carb result
## 1 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2  195.2
## 2 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2  182.4
## 3 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1  172.0
## 
## [[1]][[2]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8
## 2 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2
## 3 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4
## 4 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6
## 
## [[1]][[3]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2
## 2  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8
## 3  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4
## 4  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8
## 5  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2
## 6  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4
## 7  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4
## 8  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2
## 9  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0
## 10 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2
## 11 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8
## 12 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2
## 
## 
## [[2]]
## [[2]][[1]]
##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2
## 2 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6
## 3 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6
## 4 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6
## 5 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2
## 6 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0
## 7 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6
## 8 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6
## 
## [[2]][[2]]
##    mpg cyl disp  hp drat    wt  qsec vs am gear carb result
## 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4  126.0
## 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4  126.0
## 3 19.7   6  145 175 3.62 2.770 15.50  0  1    5    6  118.2
## 
## [[2]][[3]]
##    mpg cyl disp  hp drat   wt qsec vs am gear carb result
## 1 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4  126.4
## 2 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8  120.0</code></pre>
<p>
We now have a list of size 2 (for each value of <code>am</code>) where each element is itself a list of size 3 (for each value of <code>cyl</code>) where each element is a data frame. Are you still with me? Also, notice that the second map is given as a formula (notice the <code>~</code> in front of the second map). This creates an anonymous function, where the parameter is given by the <code>.</code> (think of the <code>.</code> as being the <code>x</code> in <code>f(x)</code>). So the <code>.</code> is the stand-in for the values contained inside <code>values_am</code>.
</p>
<p>
The people that are familiar with the <code>map()</code> functions must be fuming right now; there is a way to avoid this nested hell. I will talk about it soon, but first I want to play around with this list of lists.
</p>
<p>
If you have a list of data frames, you can bind their rows together with <code>reduce(list_of_dfs, rbind)</code>. You would like to this here, but because your lists of data frames are contained inside another list… you guessed it, you have to map over it!
</p>
<pre class="r"><code>(result2 = map(result, ~reduce(., rbind)))</code></pre>
<pre><code>## [[1]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2  195.2
## 2  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2  182.4
## 3  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1  172.0
## 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8
## 5  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2
## 6  19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4
## 7  17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6
## 8  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2
## 9  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8
## 10 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4
## 11 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8
## 12 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2
## 13 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4
## 14 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4
## 15 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2
## 16 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0
## 17 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2
## 18 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8
## 19 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2
## 
## [[2]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2
## 2  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6
## 3  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6
## 4  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6
## 5  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2
## 6  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0
## 7  30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6
## 8  21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6
## 9  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4  126.0
## 10 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4  126.0
## 11 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6  118.2
## 12 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4  126.4
## 13 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8  120.0</code></pre>
<p>
Here again, I pass <code>reduce()</code> as a formula to <code>map()</code> to create an anonymous function. Again, the <code>.</code> is used as the stand-in for each element contained in <code>result</code>; a list of data frames, where <code>reduce(., rbind)</code> knows what to do. Now that we have this we can use <code>reduce()</code> with <code>rbind()</code> again to get a single data frame:
</p>
<pre class="r"><code>(result3 = reduce(result2, rbind))</code></pre>
<pre><code>##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2  195.2
## 2  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2  182.4
## 3  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1  172.0
## 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8
## 5  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2
## 6  19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4
## 7  17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6
## 8  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2
## 9  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8
## 10 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4
## 11 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8
## 12 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2
## 13 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4
## 14 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4
## 15 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2
## 16 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0
## 17 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2
## 18 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8
## 19 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2
## 20 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2
## 21 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6
## 22 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6
## 23 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6
## 24 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2
## 25 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0
## 26 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6
## 27 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6
## 28 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4  126.0
## 29 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4  126.0
## 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6  118.2
## 31 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4  126.4
## 32 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8  120.0</code></pre>
<p>
Of course, since <code>reduce(list_of_dfs, rbind)</code> is such a common operation, you could have simply used <code>dplyr::bind_rows</code>, which does exactly this:
</p>
<pre class="r"><code>(result2 = map(result, bind_rows))</code></pre>
<pre><code>## [[1]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2  195.2
## 2  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2  182.4
## 3  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1  172.0
## 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8
## 5  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2
## 6  19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4
## 7  17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6
## 8  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2
## 9  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8
## 10 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4
## 11 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8
## 12 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2
## 13 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4
## 14 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4
## 15 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2
## 16 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0
## 17 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2
## 18 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8
## 19 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2
## 
## [[2]]
##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2
## 2  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6
## 3  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6
## 4  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6
## 5  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2
## 6  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0
## 7  30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6
## 8  21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6
## 9  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4  126.0
## 10 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4  126.0
## 11 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6  118.2
## 12 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4  126.4
## 13 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8  120.0</code></pre>
<p>
and then:
</p>
<pre class="r"><code>(result3 = bind_rows(result2))</code></pre>
<pre><code>##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2  195.2
## 2  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2  182.4
## 3  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1  172.0
## 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8
## 5  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2
## 6  19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4
## 7  17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6
## 8  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2
## 9  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8
## 10 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4
## 11 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8
## 12 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2
## 13 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4
## 14 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4
## 15 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2
## 16 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0
## 17 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2
## 18 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8
## 19 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2
## 20 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2
## 21 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6
## 22 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6
## 23 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6
## 24 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2
## 25 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0
## 26 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6
## 27 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6
## 28 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4  126.0
## 29 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4  126.0
## 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6  118.2
## 31 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4  126.4
## 32 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8  120.0</code></pre>
<p>
Of course, things are even simpler: you can avoid this deeply nested monstrosity by using <code>map_df()</code> instead of <code>map()</code>! <code>map_df()</code> works just like <code>map()</code> but return a data frame (hence the <code>_df</code> in the name) instead of a list:
</p>
<pre class="r"><code>(result_df = map_df(values_am, ~map_df(values_cyl, nice_function, df = mtcars, param2 = .)))</code></pre>
<pre><code>##     mpg cyl  disp  hp drat    wt  qsec vs am gear carb result
## 1  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2  195.2
## 2  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2  182.4
## 3  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1  172.0
## 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  256.8
## 5  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  217.2
## 6  19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  230.4
## 7  17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  213.6
## 8  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  299.2
## 9  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  228.8
## 10 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  262.4
## 11 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  276.8
## 12 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  243.2
## 13 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  166.4
## 14 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  166.4
## 15 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  235.2
## 16 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  248.0
## 17 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  243.2
## 18 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  212.8
## 19 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  307.2
## 20 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   91.2
## 21 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  129.6
## 22 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  121.6
## 23 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  135.6
## 24 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  109.2
## 25 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  104.0
## 26 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  121.6
## 27 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   85.6
## 28 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4  126.0
## 29 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4  126.0
## 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6  118.2
## 31 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4  126.4
## 32 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8  120.0</code></pre>
<p>
If you look at the source code of <code>map_df()</code> you see that <code>dplyr::bind_rows</code> gets called at the end:
</p>
<pre class="r"><code>map_df</code></pre>
<pre><code>## function (.x, .f, ..., .id = NULL) 
## {
##     if (!is_installed("dplyr")) {
##         abort("`map_df()` requires dplyr")
##     }
##     .f &lt;- as_mapper(.f, ...)
##     res &lt;- map(.x, .f, ...)
##     dplyr::bind_rows(res, .id = .id)
## }
## &lt;bytecode: 0x55dad486e6a0&gt;
## &lt;environment: namespace:purrr&gt;</code></pre>
<p>
So moral of the story? There are a lot of variants of the common <code>purrr::map()</code> functions (as well as of <code>dplyr</code> verbs, such as <code>filter_at</code>, <code>select_if</code>, etc…) and learning about them can save you from a lot of pain! However, if you need to apply a function to nested lists this is still possible; you just have to think about the structure of the nested list for a bit. There is also another function that you might want to study, <code>modify_depth()</code> which solves related issues but I will end the blog post here. I might talk about it in a future blog post.
</p>
<p>
Also, if you want to learn more about R and the tidyverse, do read the link I posted in the introduction of the post and join the R4ds slack group! There are a lot of very nice people there that want to help you get better with your R-fu. Also, this is where I got the inspiration to write this blog post and I am thankful to the people there for the discussions; I feel comfortable with R, but I still learn new tips and tricks every day!
</p>
<p>
If you enjoy these blog posts, you can follow me on <a href="https://twitter.com/brodriguesco">twitter</a>. And happy new yeaR!
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2018-01-03-lists_all_the_way.html</guid>
  <pubDate>Wed, 03 Jan 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building formulae</title>
  <link>https://b-rodrigues.github.io/posts/2017-12-27-build_formulae.html</link>
  <description><![CDATA[ 




<p>
<a href="https://stackoverflow.com/questions/47957081/k-fold-cross-validation-in-purr-and-model">This</a> Stackoverflow question made me think about how to build formulae. For example, you might want to programmatically build linear model formulae and then map these models on data. For example, suppose the following (output suppressed):
</p>
<pre class="r"><code>data(mtcars)

lm(mpg ~ hp, data = mtcars)
lm(mpg ~I(hp^2), data = mtcars)
lm(mpg ~I(hp^3), data = mtcars)
lm(mpg ~I(hp^4), data = mtcars)
lm(mpg ~I(hp^5), data = mtcars)
lm(mpg ~I(hp^6), data = mtcars)</code></pre>
<p>
To avoid doing this, one can write a function that builds the formulae:
</p>
<pre class="r"><code>create_form = function(power){
  rhs = substitute(I(hp^pow), list(pow=power))
  rlang::new_formula(quote(mpg), rhs)
}</code></pre>
<p>
If you are not familiar with <code>substitute()</code>, try the following to understand what it does:
</p>
<pre class="r"><code>substitute(y ~ x, list(x = 1))</code></pre>
<pre><code>## y ~ 1</code></pre>
<p>
Then using <code>rlang::new_formula()</code> I build a formula by providing the left hand side, which is <code>quote(mpg)</code> here, and the right hand side, which I built using <code>substitute()</code>. Now I can create a list of formulae:
</p>
<pre class="r"><code>library(tidyverse)

list_formulae = map(seq(1, 6), create_form)

str(list_formulae)</code></pre>
<pre><code>## List of 6
##  $ :Class 'formula'  language mpg ~ I(hp^1L)
##   .. ..- attr(*, ".Environment")=&lt;environment: 0x55605f897ca0&gt; 
##  $ :Class 'formula'  language mpg ~ I(hp^2L)
##   .. ..- attr(*, ".Environment")=&lt;environment: 0x55605f891418&gt; 
##  $ :Class 'formula'  language mpg ~ I(hp^3L)
##   .. ..- attr(*, ".Environment")=&lt;environment: 0x55605da76098&gt; 
##  $ :Class 'formula'  language mpg ~ I(hp^4L)
##   .. ..- attr(*, ".Environment")=&lt;environment: 0x55605da6a600&gt; 
##  $ :Class 'formula'  language mpg ~ I(hp^5L)
##   .. ..- attr(*, ".Environment")=&lt;environment: 0x55605da68980&gt; 
##  $ :Class 'formula'  language mpg ~ I(hp^6L)
##   .. ..- attr(*, ".Environment")=&lt;environment: 0x55605da66d38&gt;</code></pre>
<p>
As you can see, <code>power</code> got replaced by 1, 2, 3,… and each element of the list is a nice formula. Exactly what <code>lm()</code> needs. So now it’s easy to map <code>lm()</code> to this list of formulae:
</p>
<pre class="r"><code>data(mtcars)

map(list_formulae, lm, data = mtcars)</code></pre>
<pre><code>## [[1]]
## 
## Call:
## .f(formula = .x[[i]], data = ..1)
## 
## Coefficients:
## (Intercept)      I(hp^1)  
##    30.09886     -0.06823  
## 
## 
## [[2]]
## 
## Call:
## .f(formula = .x[[i]], data = ..1)
## 
## Coefficients:
## (Intercept)      I(hp^2)  
##  24.3887252   -0.0001649  
## 
## 
## [[3]]
## 
## Call:
## .f(formula = .x[[i]], data = ..1)
## 
## Coefficients:
## (Intercept)      I(hp^3)  
##   2.242e+01   -4.312e-07  
## 
## 
## [[4]]
## 
## Call:
## .f(formula = .x[[i]], data = ..1)
## 
## Coefficients:
## (Intercept)      I(hp^4)  
##   2.147e+01   -1.106e-09  
## 
## 
## [[5]]
## 
## Call:
## .f(formula = .x[[i]], data = ..1)
## 
## Coefficients:
## (Intercept)      I(hp^5)  
##   2.098e+01   -2.801e-12  
## 
## 
## [[6]]
## 
## Call:
## .f(formula = .x[[i]], data = ..1)
## 
## Coefficients:
## (Intercept)      I(hp^6)  
##   2.070e+01   -7.139e-15</code></pre>
<p>
This is still a new topic for me there might be more elegant ways to do that, using tidyeval to remove the hardcoding of the columns in <code>create_form()</code>. I might continue exploring this.
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-12-27-build_formulae.html</guid>
  <pubDate>Wed, 27 Dec 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Teaching the tidyverse to beginners</title>
  <link>https://b-rodrigues.github.io/posts/2017-12-17-teaching_tidyverse.html</link>
  <description><![CDATA[ 




<p>
End October I tweeted this:
</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
will teach <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> soon again but this time following <a href="https://twitter.com/drob?ref_src=twsrc%5Etfw"><span class="citation" data-cites="drob">@drob</span></a> 's suggestion of the tidyverse first as laid out here: <a href="https://t.co/js8SsUs8Nv">https://t.co/js8SsUs8Nv</a>
</p>
— Bruno Rodrigues (<span class="citation" data-cites="brodriguesco">@brodriguesco</span>) <a href="https://twitter.com/brodriguesco/status/922741554992812032?ref_src=twsrc%5Etfw">October 24, 2017</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>
and it generated some discussion. Some people believe that this is the right approach, and some others think that one should first present <em>base</em> R and then show how the <code>tidyverse</code> complements it. This year, I taught three classes; a 12-hour class to colleagues that work with me, a 15-hour class to master’s students and 3 hours again to some of my colleagues. Each time, I decided to focus on the <code>tidyverse</code>(almost) entirely, and must say that I am not disappointed with the results!
</p>
<p>
The 12 hour class was divided in two 6 hours days. It was a bit intense, especially the last 3 hours that took place Friday afternoon. The crowd was composed of some economists that had experience with STATA, some others that were mostly using Excel and finally some colleagues from the IT department that sometimes need to dig into some data themselves. Apart from 2 people, all the other never had any experience with R.
</p>
<p>
We went from 0 to being able to do the plot below after the end of the first day (so 6 hours in). Keep in mind that practically none of them even had opened RStudio before. I show the code so you can see the progress made in just a few hours:
</p>
<pre><code>library(Ecdat)
library(tidyverse)
library(ggthemes)</code></pre>
<pre class="r"><code>data(Bwages)
bwages = Bwages %&gt;%
  mutate(educ_level = case_when(educ == 1 ~ "Primary School",
                                educ == 2 ~ "High School",
                                educ == 3 ~ "Some university",
                                educ == 4 ~ "Master's degree",
                                educ == 5 ~ "Doctoral degree"))

ggplot(bwages) +
  geom_smooth(aes(exper, wage, colour = educ_level)) +
  theme_minimal() +
  theme(legend.position = "bottom", legend.title = element_blank())</code></pre>
<pre><code>## `geom_smooth()` using method = 'loess'</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/teaching-tidyverse-3-1.png" class="img-fluid"></p>
</div>
<p>
Of course some of them needed some help here and there, and I also gave them hints (for example I told them about <code>case_when()</code> and try to use it inside <code>mutate()</code> instead of nested ifs) but it was mostly due to lack of experience and because they hadn’t had the time to fully digest R’s syntax which was for most people involved completely new.
</p>
<p>
On the second day I showed <code>purrr::map()</code> and <code>purrr::reduce()</code> and overall it went quite well too. I even showed list-columns, and this is where I started losing some of them; I did not insist too much on it though, only wanted to show them the flexibility of <code>data.frame</code> objects. Some of them were quite impressed by list-columns! Then I started showing (for and while) loops and writing functions. I even showed them <code>tidyeval</code> and again, it went relatively well. Once they had the opportunity to play a bit around with it, I think it clicked (plus they have lots of code examples to go back too).
</p>
<p>
At the end, people seemed to have enjoyed the course, but told me that Friday was heavy; indeed it was, but I feel that it was mostly because 12 hours spread on 2 days is not the best format for this type of material, but we all had time constraints.
</p>
<p>
The 15 hour Master’s course was spread over 4 days, and covered basically the same. I just used the last 3 hours to show the students some basic functions for model estimation (linear, count, logit/probit and survival models). Again, the students were quite impressed by how easily they could get descriptive statistics by first grouping by some variables. Through their questions, I even got to show them scoped versions of <code>dplyr</code> verbs, such as <code>select_if()</code> and <code>summarise_at()</code>. I was expecting to lose them there, but actually most of them got these scoped versions quite fast. These students already had some experience with R though, but none with the <code>tidyverse</code>.
</p>
<p>
Finally the 3 hour course was perhaps the most interesting; I only had 100% total beginners. Some just knew R by name and had never heard/seen/opened RStudio (with the exception of one person)! I did not show them any loops, function definitions and no plots. I only showed them how RStudio looked and worked, what were (and how to install) packages (as well as the CRAN Task Views) and then how to import data with <code>rio</code> and do descriptive statistics only with <code>dplyr</code>. They were really interested and quite impressed by <code>rio</code> (“what do you mean I can use the same code for importing any dataset, in any format?”) but also by the simplicity of <code>dplyr</code>.
</p>
<p>
In all the courses, I did show the <code>$</code> primitive to refer to columns inside a <code>data.frame</code>. First I showed them lists which is where I introduced <code>$</code>. Then it was easy to explain to them why it was the same for a column inside a <code>data.frame</code>; a <code>data.frame</code> is simply a list! This is also the distinction I made from the previous years; I simply mentioned (and showed really quickly) matrices and focused almost entirely on lists. Most participants, if not all, had learned to program statistics by thinking about linear algebra and matrices. Nothing wrong with that, but I feel that R really shines when you focus on lists and on how to work with them.
</p>
<p>
Overall as the teacher, I think that focusing on the <code>tidyverse</code> might be a very good strategy. I might have to do some adjustments here and there for the future courses, but my hunch is that the difficulties that some participants had were not necessarily due to the <code>tidyverse</code> but simply to lack of time to digest what was shown, as well as a total lack of experience with R. I do not think that these participants would have better understood a more traditional, <code>base</code>, matrix-oriented course.
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-12-17-teaching_tidyverse.html</guid>
  <pubDate>Sun, 17 Dec 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Peace of mind with purrr</title>
  <link>https://b-rodrigues.github.io/posts/2017-11-14-peace_r.html</link>
  <description><![CDATA[ 




<p>I think what I enjoy the most about functional programming is the peace of mind that comes with it. With functional programming, there’s a lot of stuff you don’t need to think about. You can write functions that are general enough so that they solve a variety of problems. For example, imagine for a second that R does not have the <code>sum()</code> function anymore. If you want to compute the sum of, say, the first 100 integers, you could write a loop that would do that for you:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>){</span>
<span id="cb1-4">  numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> numbers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i</span>
<span id="cb1-5">}</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5050</code></pre>
</div>
</div>
<p>The problem with this approach, is that you cannot reuse any of the code there, even if you put it inside a function. For instance, what if you want to merge 4 datasets together? You would need something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(mtcars)</span>
<span id="cb7-2"></span>
<span id="cb7-3">mtcars1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6">mtcars2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9">mtcars3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>)</span>
<span id="cb7-11"></span>
<span id="cb7-12">mtcars4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>)</span>
<span id="cb7-14"></span>
<span id="cb7-15">datasets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(mtcars1, mtcars2, mtcars3, mtcars4)</span>
<span id="cb7-16"></span>
<span id="cb7-17">temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> datasets[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>){</span>
<span id="cb7-20">  temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_join</span>(temp, datasets[[i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb7-21">}</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear,
carb, id)`</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear,
carb, id)`
Joining with `by = join_by(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear,
carb, id)`</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(temp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 128
Columns: 12
$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…
$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…
$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…
$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…
$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…
$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…
$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…
$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…
$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…
$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…
$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…
$ id   &lt;chr&gt; "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", …</code></pre>
</div>
</div>
<p>Of course, the logic is very similar as before, but you need to think carefully about the structure holding your elements (which can be numbers, datasets, characters, etc…) as well as be careful about indexing correctly… and depending on the type of objects you are working on, you might need to tweak the code further.</p>
<p>How would a functional programming approach make this easier? Of course, you could use <code>purrr::reduce()</code> to solve these problems. However, since I assumed that <code>sum()</code> does not exist, I will also assume that <code>purrr::reduce()</code> does not exist either and write my own, clumsy implementation. Here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">my_reduce <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(a_list, a_func, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">init =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...){</span>
<span id="cb12-2"></span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(init)){</span>
<span id="cb12-4">    init <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(a_list, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-5">    a_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(a_list, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-6">  }</span>
<span id="cb12-7"></span>
<span id="cb12-8">  car <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(a_list, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-9">  cdr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(a_list, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-10">  init <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">a_func</span>(init, car, ...)</span>
<span id="cb12-11"></span>
<span id="cb12-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cdr) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>){</span>
<span id="cb12-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_reduce</span>(cdr, a_func, init, ...)</span>
<span id="cb12-14">  }</span>
<span id="cb12-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb12-16">    init</span>
<span id="cb12-17">  }</span>
<span id="cb12-18">}</span></code></pre></div>
</div>
<p>This can look much more complicated than before, but the idea is quite simple; if you know about recursive functions (recursive functions are functions that call themselves). I won’t explain how the function works, because it is not the main point of the article (but if you’re curious, I encourage you to play around with it). The point is that now, I can do the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_reduce</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_reduce</span>(datasets, full_join) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> glimpse</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear,
carb, id)`
Joining with `by = join_by(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear,
carb, id)`
Joining with `by = join_by(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear,
carb, id)`</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 128
Columns: 12
$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…
$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…
$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…
$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…
$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…
$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…
$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…
$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…
$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…
$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…
$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…
$ id   &lt;chr&gt; "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", …</code></pre>
</div>
</div>
<p>But since <code>my_reduce()</code> is very general, I can even do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_reduce</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span>), paste)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1 2 3 4 5"</code></pre>
</div>
</div>
<p>Of course, <code>paste()</code> is vectorized, so you could just as well do <code>paste(1, 2, 3, 4, 5)</code>, but again, I want to insist on the fact that writing functions, even if they look a bit complicated, can save you a huge amount of time in the long run.</p>
<p>Because I know that my function is quite general, I can be confident that it will work in a lot of different situations; as long as the <code>a_func</code> argument is a binary operator that combines the elements inside <code>a_list</code>, it’s going to work. And I don’t need to think about indexing, about having temporary variables or thinking about the structure that will hold my results.</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-11-14-peace_r.html</guid>
  <pubDate>Mon, 13 Nov 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Easy peasy STATA-like marginal effects with R</title>
  <link>https://b-rodrigues.github.io/posts/2017-10-26-margins_r.html</link>
  <description><![CDATA[ 




<p>
Model interpretation is essential in the social sciences. If one wants to know the effect of variable <code>x</code> on the dependent variable <code>y</code>, marginal effects are an easy way to get the answer. STATA includes a <code>margins</code> command that has been ported to R by <a href="http://thomasleeper.com/">Thomas J. Leeper</a> of the London School of Economics and Political Science. You can find the source code of the package <a href="https://github.com/leeper/margins">on github</a>. In this short blog post, I demo some of the functionality of <code>margins</code>.
</p>
<p>
First, let’s load some packages:
</p>
<pre class="r"><code>library(ggplot2)
library(tibble)
library(broom)
library(margins)
library(Ecdat)</code></pre>
<p>
As an example, we are going to use the <code>Participation</code> data from the <code>Ecdat</code> package:
</p>
<pre class="r"><code>data(Participation)</code></pre>
<pre class="r"><code>?Participation</code></pre>
<pre><code>Labor Force Participation

Description

a cross-section

number of observations : 872

observation : individuals

country : Switzerland

Usage

data(Participation)
Format

A dataframe containing :

lfp
labour force participation ?

lnnlinc
the log of nonlabour income

age
age in years divided by 10

educ
years of formal education

nyc
the number of young children (younger than 7)

noc
number of older children

foreign
foreigner ?

Source

Gerfin, Michael (1996) “Parametric and semiparametric estimation of the binary response”, Journal of Applied Econometrics, 11(3), 321-340.

References

Davidson, R. and James G. MacKinnon (2004) Econometric Theory and Methods, New York, Oxford University Press, http://www.econ.queensu.ca/ETM/, chapter 11.

Journal of Applied Econometrics data archive : http://qed.econ.queensu.ca/jae/.</code></pre>
<p>
The variable of interest is <code>lfp</code>: whether the individual participates in the labour force or not. To know which variables are relevant in the decision to participate in the labour force, one could estimate a logit model, using <code>glm()</code>.
</p>
<pre class="r"><code>logit_participation = glm(lfp ~ ., data = Participation, family = "binomial")</code></pre>
<p>
Now that we ran the regression, we can take a look at the results. I like to use <code>broom::tidy()</code> to look at the results of regressions, as <code>tidy()</code> returns a nice <code>data.frame</code>, but you could use <code>summary()</code> if you’re only interested in reading the output:
</p>
<pre class="r"><code>tidy(logit_participation)</code></pre>
<pre><code>##          term    estimate  std.error  statistic      p.value
## 1 (Intercept) 10.37434616 2.16685216  4.7877499 1.686617e-06
## 2     lnnlinc -0.81504064 0.20550116 -3.9661122 7.305449e-05
## 3         age -0.51032975 0.09051783 -5.6378920 1.721444e-08
## 4        educ  0.03172803 0.02903580  1.0927211 2.745163e-01
## 5         nyc -1.33072362 0.18017027 -7.3859224 1.514000e-13
## 6         noc -0.02198573 0.07376636 -0.2980454 7.656685e-01
## 7  foreignyes  1.31040497 0.19975784  6.5599678 5.381941e-11</code></pre>
<p>
From the results above, one can only interpret the sign of the coefficients. To know how much a variable influences the labour force participation, one has to use <code>margins()</code>:
</p>
<pre class="r"><code>effects_logit_participation = margins(logit_participation) 

print(effects_logit_participation)</code></pre>
<pre><code>## Average marginal effects</code></pre>
<pre><code>## glm(formula = lfp ~ ., family = "binomial", data = Participation)</code></pre>
<pre><code>##  lnnlinc     age     educ     nyc       noc foreignyes
##  -0.1699 -0.1064 0.006616 -0.2775 -0.004584     0.2834</code></pre>
<p>
Using <code>summary()</code> on the object returned by <code>margins()</code> provides more details:
</p>
<pre class="r"><code>summary(effects_logit_participation)</code></pre>
<pre><code>##      factor     AME     SE       z      p   lower   upper
##         age -0.1064 0.0176 -6.0494 0.0000 -0.1409 -0.0719
##        educ  0.0066 0.0060  1.0955 0.2733 -0.0052  0.0185
##  foreignyes  0.2834 0.0399  7.1102 0.0000  0.2053  0.3615
##     lnnlinc -0.1699 0.0415 -4.0994 0.0000 -0.2512 -0.0887
##         noc -0.0046 0.0154 -0.2981 0.7656 -0.0347  0.0256
##         nyc -0.2775 0.0333 -8.3433 0.0000 -0.3426 -0.2123</code></pre>
<p>
And it is also possible to plot the effects with base graphics:
</p>
<pre class="r"><code>plot(effects_logit_participation)</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/margins-9-1.png" class="img-fluid"></p>
</div>
<p>
This uses the basic R plotting capabilities, which is useful because it is a simple call to the function <code>plot()</code> but if you’ve been using <code>ggplot2</code> and want this graph to have the same look as the others made with <code>ggplot2</code> you first need to save the summary in a variable. Let’s overwrite this <code>effects_logit_participation</code> variable with its summary:
</p>
<pre class="r"><code>effects_logit_participation = summary(effects_logit_participation)</code></pre>
<p>
And now it is possible to use <code>ggplot2</code> to create the same plot:
</p>
<pre class="r"><code>ggplot(data = effects_logit_participation) +
  geom_point(aes(factor, AME)) +
  geom_errorbar(aes(x = factor, ymin = lower, ymax = upper)) +
  geom_hline(yintercept = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45))</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/margins-11-1.png" class="img-fluid"></p>
</div>
<p>
So an infinitesimal increase, in say, non-labour income (<code>lnnlinc</code>) of 0.001 is associated with a decrease of the probability of labour force participation by 0.001*17 percentage points.
</p>
<p>
You can also extract the marginal effects of a single variable, with <code>dydx()</code>:
</p>
<pre class="r"><code>head(dydx(Participation, logit_participation, "lnnlinc"))</code></pre>
<pre><code>##   dydx_lnnlinc
## 1  -0.15667764
## 2  -0.20014487
## 3  -0.18495109
## 4  -0.05377262
## 5  -0.18710476
## 6  -0.19586986</code></pre>
<p>
Which makes it possible to extract the effects for a list of individuals that you can create yourself:
</p>
<pre class="r"><code>my_subjects = tribble(
    ~lfp,  ~lnnlinc, ~age, ~educ, ~nyc, ~noc, ~foreign,
    "yes",   10.780,  7.0,     4,    1,    1,    "yes",
     "no",     1.30,  9.0,     1,    4,    1,    "yes"
)

dydx(my_subjects, logit_participation, "lnnlinc")</code></pre>
<pre><code>##   dydx_lnnlinc
## 1  -0.09228119
## 2  -0.17953451</code></pre>
<p>
I used the <code>tribble()</code> function from the <code>tibble</code> package to create this test data set, row by row. Then, using <code>dydx()</code>, I get the marginal effect of variable <code>lnnlinc</code> for these two individuals. No doubt that this package will be a huge help convincing more social scientists to try out R and make a potential transition from STATA easier.
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2017-10-26-margins_r.html</guid>
  <pubDate>Thu, 26 Oct 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I find tidyeval useful</title>
  <link>https://b-rodrigues.github.io/posts/2017-08-27-why_tidyeval.html</link>
  <description><![CDATA[ 




<p>
First thing’s first: maybe you shouldn’t care about <code>tidyeval</code>. Maybe you don’t need it. If you exclusively work interactively, I don’t think that learning about <code>tidyeval</code> is important. I can only speak for me, and explain to you why I personally find <code>tidyeval</code> useful.
</p>
<p>
I wanted to write this blog post after reading this <a href="https://twitter.com/dataandme/status/901429535266267136">twitter thread</a> and specifically <a href="https://twitter.com/Kwarizmi/status/901457435948236801">this question</a>.
</p>
<p>
<a href="https://twitter.com/dataandme">Mara Averick</a> then wrote <a href="http://maraaverick.rbind.io/2017/08/tidyeval-resource-roundup/">this blogpost</a> linking to 6 other blog posts that give some <code>tidyeval</code> examples. Reading them, plus the <a href="http://dplyr.tidyverse.org/articles/programming.html">Programming with dplyr</a> vignette should help you get started with <code>tidyeval</code>.
</p>
<p>
But maybe now you know how to use it, but not why and when you should use it… Basically, whenever you want to write a function that looks something like this:
</p>
<pre class="r"><code>my_function(my_data, one_column_inside_data)</code></pre>
<p>
is when you want to use the power of <code>tidyeval</code>.
</p>
<p>
I work at <a href="http://www.statistiques.public.lu/en/index.html">STATEC</a>, Luxembourg’s national institute of statistics. I work on all kinds of different projects, and when data gets updated (for example because a new round of data collection for some survey finished), I run my own scripts on the fresh data to make the data nice and tidy for analysis. Because surveys get updated, sometimes column names change a little bit, and this can cause some issues.
</p>
<p>
Very recently, a dataset I work with got updated. Data collection was finished, so I just loaded my hombrewed package written for this project, changed the path from last year’s script to this year’s fresh data path, ran the code, and watched as the folders got populated with new <code>ggplot2</code> graphs and LaTeX tables with descriptive statistics and regression results. This is then used to generate this year’s report. However, by looking at the graphs, I noticed something weird; some graphs were showing some very strange patterns. It turns out that one column got its name changed, and also one of its values got changed too.
</p>
<p>
Last year, this column, let’s call it <code>spam</code>, had values <code>1</code> for <code>good</code> and <code>0</code> for <code>bad</code>. This year the column is called <code>Spam</code> and the values are <code>1</code> and <code>2</code>. When I found out that this was the source of the problem, I just had to change the arguments of my functions from
</p>
<pre class="r"><code>generate_spam_plot(dataset = data2016, column = spam, value = 1)
generate_spam_plot(dataset = data2016, column = spam, value = 0)</code></pre>
<p>
to
</p>
<pre class="r"><code>generate_spam_plot(dataset = data2017, column = Spam, value = 1)
generate_spam_plot(dataset = data2017, column = Spam, value = 2)</code></pre>
<p>
without needing to change anything else. This is why I use <code>tidyeval</code>; without it, writing a function such as <code>genereta_spam_plot</code> would not be easy. It would be possible, but not easy.
</p>
<p>
If you want to know more about <code>tidyeval</code> and working programmatically with R, I shamelessly invite you to read a book I’ve been working on: <a href="https://b-rodrigues.github.io/fput/" class="uri">https://b-rodrigues.github.io/fput/</a> It’s still a WIP, but maybe you’ll find it useful. I plan on finishing it by the end of the year, but there’s already some content to keep you busy!
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-08-27-why_tidyeval.html</guid>
  <pubDate>Sun, 27 Aug 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>tidyr::spread() and dplyr::rename_at() in action</title>
  <link>https://b-rodrigues.github.io/posts/2017-07-27-spread_rename_at.html</link>
  <description><![CDATA[ 




<p>
I was recently confronted to a situation that required going from a long dataset to a wide dataset, but with a small twist: there were two datasets, which I had to merge into one. You might wonder what kinda crappy twist that is, right? Well, let’s take a look at the data:
</p>
<pre class="r"><code>data1; data2</code></pre>
<pre><code>## # A tibble: 20 x 4
##    country date       variable_1       value
##    &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;            &lt;int&gt;
##  1 lu      01/01/2005 maybe               22
##  2 lu      01/07/2005 maybe               13
##  3 lu      01/01/2006 maybe               40
##  4 lu      01/07/2006 maybe               25
##  5 lu      01/01/2005 totally_agree       42
##  6 lu      01/07/2005 totally_agree       17
##  7 lu      01/01/2006 totally_agree       25
##  8 lu      01/07/2006 totally_agree       16
##  9 lu      01/01/2005 totally_disagree    39
## 10 lu      01/07/2005 totally_disagree    17
## 11 lu      01/01/2006 totally_disagree    23
## 12 lu      01/07/2006 totally_disagree    21
## 13 lu      01/01/2005 kinda_disagree      69
## 14 lu      01/07/2005 kinda_disagree      12
## 15 lu      01/01/2006 kinda_disagree      10
## 16 lu      01/07/2006 kinda_disagree       9
## 17 lu      01/01/2005 kinda_agree         38
## 18 lu      01/07/2005 kinda_agree         31
## 19 lu      01/01/2006 kinda_agree         19
## 20 lu      01/07/2006 kinda_agree         12</code></pre>
<pre><code>## # A tibble: 20 x 4
##    country date       variable_2       value
##    &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;            &lt;int&gt;
##  1 lu      01/01/2005 kinda_agree         22
##  2 lu      01/07/2005 kinda_agree         13
##  3 lu      01/01/2006 kinda_agree         40
##  4 lu      01/07/2006 kinda_agree         25
##  5 lu      01/01/2005 totally_agree       42
##  6 lu      01/07/2005 totally_agree       17
##  7 lu      01/01/2006 totally_agree       25
##  8 lu      01/07/2006 totally_agree       16
##  9 lu      01/01/2005 totally_disagree    39
## 10 lu      01/07/2005 totally_disagree    17
## 11 lu      01/01/2006 totally_disagree    23
## 12 lu      01/07/2006 totally_disagree    21
## 13 lu      01/01/2005 maybe               69
## 14 lu      01/07/2005 maybe               12
## 15 lu      01/01/2006 maybe               10
## 16 lu      01/07/2006 maybe                9
## 17 lu      01/01/2005 kinda_disagree      38
## 18 lu      01/07/2005 kinda_disagree      31
## 19 lu      01/01/2006 kinda_disagree      19
## 20 lu      01/07/2006 kinda_disagree      12</code></pre>
<p>
As explained in <a href="http://vita.had.co.nz/papers/tidy-data.html">Hadley (2014)</a>, this is how you should keep your data… But for a particular purpose, I had to transform these datasets. What I was asked to do was to merge these into a single wide data frame. Doing this for one dataset is easy:
</p>
<pre class="r"><code>data1 %&gt;%
  spread(variable_1, value)</code></pre>
<pre><code>## # A tibble: 4 x 7
##   country date       kinda_agree kinda_disagree maybe totally_agree
##   &lt;chr&gt;   &lt;chr&gt;            &lt;int&gt;          &lt;int&gt; &lt;int&gt;         &lt;int&gt;
## 1 lu      01/01/2005          38             69    22            42
## 2 lu      01/01/2006          19             10    40            25
## 3 lu      01/07/2005          31             12    13            17
## 4 lu      01/07/2006          12              9    25            16
## # ... with 1 more variable: totally_disagree &lt;int&gt;</code></pre>
<p>
But because <code>data1</code> and <code>data2</code> have the same levels for <code>variable_1</code> and <code>variable_2</code>, this would not work. So the solution I found online, in this <a href="https://stackoverflow.com/questions/43578723/conditional-replacement-of-column-name-in-tibble-using-dplyr">SO thread</a> was to use <code>tidyr::spread()</code> with <code>dplyr::rename_at()</code> like this:
</p>
<pre class="r"><code>data1 &lt;- data1 %&gt;%
  spread(variable_1, value) %&gt;%
  rename_at(vars(-country, -date), funs(paste0("variable1:", .)))

glimpse(data1)</code></pre>
<pre><code>## Observations: 4
## Variables: 7
## $ country                      &lt;chr&gt; "lu", "lu", "lu", "lu"
## $ date                         &lt;chr&gt; "01/01/2005", "01/01/2006", "01/0...
## $ `variable1:kinda_agree`      &lt;int&gt; 38, 19, 31, 12
## $ `variable1:kinda_disagree`   &lt;int&gt; 69, 10, 12, 9
## $ `variable1:maybe`            &lt;int&gt; 22, 40, 13, 25
## $ `variable1:totally_agree`    &lt;int&gt; 42, 25, 17, 16
## $ `variable1:totally_disagree` &lt;int&gt; 39, 23, 17, 21</code></pre>
<pre class="r"><code>data2 &lt;- data2 %&gt;%
  spread(variable_2, value) %&gt;%
  rename_at(vars(-country, -date), funs(paste0("variable2:", .)))

glimpse(data2)</code></pre>
<pre><code>## Observations: 4
## Variables: 7
## $ country                      &lt;chr&gt; "lu", "lu", "lu", "lu"
## $ date                         &lt;chr&gt; "01/01/2005", "01/01/2006", "01/0...
## $ `variable2:kinda_agree`      &lt;int&gt; 22, 40, 13, 25
## $ `variable2:kinda_disagree`   &lt;int&gt; 38, 19, 31, 12
## $ `variable2:maybe`            &lt;int&gt; 69, 10, 12, 9
## $ `variable2:totally_agree`    &lt;int&gt; 42, 25, 17, 16
## $ `variable2:totally_disagree` &lt;int&gt; 39, 23, 17, 21</code></pre>
<p>
<code>rename_at()</code> needs variables which you pass to <code>vars()</code>, a helper function to select variables, and a function that will do the renaming, passed to <code>funs()</code>. The function I use is simply <code>paste0()</code>, which pastes a string, for example “variable1:” with the name of the columns, given by the single ‘.’, a dummy argument. Now these datasets can be merged:
</p>
<pre class="r"><code>data1 %&gt;%
  full_join(data2) %&gt;%
  glimpse()</code></pre>
<pre><code>## Joining, by = c("country", "date")</code></pre>
<pre><code>## Observations: 4
## Variables: 12
## $ country                      &lt;chr&gt; "lu", "lu", "lu", "lu"
## $ date                         &lt;chr&gt; "01/01/2005", "01/01/2006", "01/0...
## $ `variable1:kinda_agree`      &lt;int&gt; 38, 19, 31, 12
## $ `variable1:kinda_disagree`   &lt;int&gt; 69, 10, 12, 9
## $ `variable1:maybe`            &lt;int&gt; 22, 40, 13, 25
## $ `variable1:totally_agree`    &lt;int&gt; 42, 25, 17, 16
## $ `variable1:totally_disagree` &lt;int&gt; 39, 23, 17, 21
## $ `variable2:kinda_agree`      &lt;int&gt; 22, 40, 13, 25
## $ `variable2:kinda_disagree`   &lt;int&gt; 38, 19, 31, 12
## $ `variable2:maybe`            &lt;int&gt; 69, 10, 12, 9
## $ `variable2:totally_agree`    &lt;int&gt; 42, 25, 17, 16
## $ `variable2:totally_disagree` &lt;int&gt; 39, 23, 17, 21</code></pre>
<p>
Hope this post helps you understand the difference between long and wide datasets better, as well as <code>dplyr::rename_at()</code>!
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-07-27-spread_rename_at.html</guid>
  <pubDate>Thu, 27 Jul 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Lesser known dplyr 0.7* tricks</title>
  <link>https://b-rodrigues.github.io/posts/2017-07-02-dplyr-0-70-tutorial.html</link>
  <description><![CDATA[ 




<p>
This blog post is an update to an older <a href="http://www.brodrigues.co/blog/2017-02-17-lesser_known_tricks/">one</a> I wrote in March. In the post from March, <code>dplyr</code> was at version 0.50, but since then a major update introduced some changes that make some of the tips in that post obsolete. So here I revisit the blog post from March by using <code>dplyr</code> 0.70.
</p>
<section id="create-new-columns-with-mutate-and-case_when" class="level2">
<h2 class="anchored" data-anchor-id="create-new-columns-with-mutate-and-case_when">
Create new columns with <code>mutate()</code> and <code>case_when()</code>
</h2>
<p>
The basic things such as selecting columns, renaming them, filtering, etc did not change with this new version. What did change however is creating new columns using <code>case_when()</code>. First, load <code>dplyr</code> and the <code>mtcars</code> dataset:
</p>
<pre class="r"><code>library("dplyr")
data(mtcars)</code></pre>
<p>
This was how it was done in version 0.50 (notice the ’.<img src="https://latex.codecogs.com/png.latex?%E2%80%99%20symbol%20before%20the%20variable%20%E2%80%98carb%E2%80%99):%3C/p%3E%0A%3Cpre%20class=%22r%22%3E%3Ccode%3Emtcars%20%25&amp;gt;%25%0A%20%20%20%20mutate(carb_new%20=%20case_when(.">carb == 1 ~ "one", .<img src="https://latex.codecogs.com/png.latex?carb%20==%202%20~%20&amp;quot;two&amp;quot;,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.">carb == 4 ~ "four", TRUE ~ "other")) %&gt;% head(5)

</p><pre><code>##    mpg cyl disp  hp drat    wt  qsec vs am gear carb carb_new
## 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4     four
## 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4     four
## 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1      one
## 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1      one
## 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2      two</code></pre>
<p>
This has been simplified to:
</p>
<pre class="r"><code>mtcars %&gt;%
    mutate(carb_new = case_when(carb == 1 ~ "one",
                                carb == 2 ~ "two",
                                carb == 4 ~ "four",
                                TRUE ~ "other")) %&gt;%
    head(5)</code></pre>
<pre><code>##    mpg cyl disp  hp drat    wt  qsec vs am gear carb carb_new
## 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4     four
## 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4     four
## 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1      one
## 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1      one
## 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2      two</code></pre>
<p>
No need for <code>.$</code> anymore.
</p>
</section> ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-07-02-dplyr-0-70-tutorial.html</guid>
  <pubDate>Sun, 02 Jul 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Make ggplot2 purrr</title>
  <link>https://b-rodrigues.github.io/posts/2017-03-29-make-ggplot2-purrr.html</link>
  <description><![CDATA[ 




<p>
<em>Update</em>: I’ve included another way of saving a separate plot by group in this article, as pointed out by <a href="https://twitter.com/monitus/status/849033025631297536"><code><span class="citation" data-cites="monitus">@monitus</span></code></a>. Actually, this is the preferred solution; using <code>dplyr::do()</code> is deprecated, according to Hadley Wickham <a href="https://twitter.com/hadleywickham/status/719542847045636096">himself</a>.
</p>
<p>
I’ll be honest: the title is a bit misleading. I will not use <code>purrr</code> that much in this blog post. Actually, I will use one single <code>purrr</code> function, at the very end. I use <code>dplyr</code> much more. However <em>Make ggplot2 purrr</em> sounds better than <em>Make ggplot dplyr</em> or whatever the verb for <code>dplyr</code> would be.
</p>
<p>
Also, this blog post was inspired by a stackoverflow question and in particular one of the <a href="http://stackoverflow.com/a/29035145/1298051">answers</a>. So I don’t bring anything new to the table, but I found this stackoverflow answer so useful and so underrated (only 16 upvotes as I’m writing this!) that I wanted to write something about it.
</p>
<p>
Basically the idea of this blog post is to show how to create graphs using <code>ggplot2</code>, but by grouping by a factor variable beforehand. To illustrate this idea, let’s use the data from the <a href="http://www.rug.nl/ggdc/productivity/pwt/">Penn World Tables 9.0</a>. The easiest way to get this data is to install the package called <code>pwt9</code> with:
</p>
<pre class="r"><code>install.packages("pwt9")</code></pre>
<p>
and then load the data with:
</p>
<pre class="r"><code>data("pwt9.0")</code></pre>
<p>
Now, let’s load the needed packages. I am also using <code>ggthemes</code> which makes themeing your ggplots very easy. I’ll be making <a href="https://en.wikipedia.org/wiki/Edward_Tufte">Tufte</a>-style plots.
</p>
<pre class="r"><code>library(ggplot2)
library(ggthemes)
library(dplyr)
library(tidyr)
library(purrr)
library(pwt9)</code></pre>
<p>
First let’s select a list of countries:
</p>
<pre class="r"><code>country_list &lt;- c("France", "Germany", "United States of America", "Luxembourg", "Switzerland", "Greece")

small_pwt &lt;- pwt9.0 %&gt;%
  filter(country %in% country_list)</code></pre>
<p>
Let’s us also order the countries in the data frame as I have written them in <code>country_list</code>:
</p>
<pre class="r"><code>small_pwt &lt;- small_pwt %&gt;%
  mutate(country = factor(country, levels = country_list, ordered = TRUE))</code></pre>
<p>
You might be wondering why this is important. At the end of the article, we are going to save the plots to disk. If we do not re-order the countries inside the data frame as in <code>country_list</code>, the name of the files will not correspond to the correct plots!
</p>
<p>
<em>Update</em>: While this can still be interesting to know, especially if you want to order the bars of a barplot made with <code>ggplot2</code>, I included a suggestion by <a href="https://twitter.com/expersso/status/846986357792739328"><code><span class="citation" data-cites="expersso">@expersso</span></code></a> that does not require your data to be ordered!
</p>
<p>
Now when you want to plot the same variable by countries, say <code>avh</code> (<em>Average annual hours worked by persons engaged</em>), the usual way to do this is with one of <code>facet_wrap()</code> or <code>facet_grid()</code>:
</p>
<pre class="r"><code>ggplot(data = small_pwt) + theme_tufte() +
  geom_line(aes(y = avh, x = year)) +
  facet_wrap(~country)</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/make-ggplot2-purrr-6-1.png" class="img-fluid"></p>
</div>
<pre class="r"><code>ggplot(data = small_pwt) + theme_tufte() +
  geom_line(aes(y = avh, x = year)) +
  facet_grid(country~.)</code></pre>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/make-ggplot2-purrr-7-1.png" class="img-fluid"></p>
</div>
<p>
As you can see, for this particular example, <code>facet_grid()</code> is not very useful, but do notice its argument, <code>country~.</code>, which is different from <code>facet_wrap()</code>’s argument. This way, I get the graphs stacked horizontally. If I had used <code>facet_grid(~country)</code> the graphs would be side by side and completely unreadable.
</p>
<p>
Now, let’s go to the meat of this post: what if you would like to have one single graph for each country? You’d probably think of using <code>dplyr::group_by()</code> to form the groups and then the graphs. This is the way to go, but you also have to use <code>dplyr::do()</code>. This is because as far as I understand, <code>ggplot2</code> is not <code>dplyr</code>-aware, and using an arbitrary function with groups is only possible with <code>dplyr::do()</code>.
</p>
<p>
<em>Update</em>: As explained in the intro above, I also added the solution that uses <code>tidyr::nest()</code>:
</p>
<pre class="r"><code># Ancient, deprecated way of doing this
plots &lt;- small_pwt %&gt;%
  group_by(country) %&gt;%
  do(plot = ggplot(data = .) + theme_tufte() +
       geom_line(aes(y = avh, x = year)) +
       ggtitle(unique(.$country)) +
       ylab("Year") +
       xlab("Average annual hours worked by persons engaged"))</code></pre>
<p>
And this is the approach that uses <code>tidyr::nest()</code>:
</p>
<pre class="r"><code># Preferred approach
plots &lt;- small_pwt %&gt;%
  group_by(country) %&gt;%
  nest() %&gt;%
  mutate(plot = map2(data, country, ~ggplot(data = .x) + theme_tufte() +
       geom_line(aes(y = avh, x = year)) +
       ggtitle(.y) +
       ylab("Year") +
       xlab("Average annual hours worked by persons engaged")))</code></pre>
<p>
If you know <code>dplyr</code> at least a little bit, the above lines should be easy for you to understand. But notice how we get the title of the graphs, with <code>ggtitle(unique(.$country))</code>, which was actually the point of the stackoverflow question.
</p>
<p>
<em>Update:</em> The modern version uses <code>tidyr::nest()</code>. Its documentation tells us:
</p>
<p>
<em>There are many possible ways one could choose to nest columns inside a data frame. <code>nest()</code> creates a list of data frames containing all the nested variables: this seems to be the most useful form in practice.</em> Let’s take a closer look at what it does exactly:
</p>
<pre class="r"><code>small_pwt %&gt;%
  group_by(country) %&gt;%
  nest() %&gt;%
  head()</code></pre>
<pre><code>## # A tibble: 6 x 2
##   country                  data              
##   &lt;ord&gt;                    &lt;list&gt;            
## 1 Switzerland              &lt;tibble [65 × 46]&gt;
## 2 Germany                  &lt;tibble [65 × 46]&gt;
## 3 France                   &lt;tibble [65 × 46]&gt;
## 4 Greece                   &lt;tibble [65 × 46]&gt;
## 5 Luxembourg               &lt;tibble [65 × 46]&gt;
## 6 United States of America &lt;tibble [65 × 46]&gt;</code></pre>
<p>
This is why I love lists in R; we get a <code>tibble</code> where each element of the column <code>data</code> is itself a <code>tibble</code>. We can now apply any function that we know works on lists.
</p>
<p>
What might be surprising though, is the object that is created by this code. Let’s take a look at <code>plots</code>:
</p>
<pre class="r"><code>print(plots)</code></pre>
<pre><code>## # A tibble: 6 x 3
##   country                  data               plot    
##   &lt;ord&gt;                    &lt;list&gt;             &lt;list&gt;  
## 1 Switzerland              &lt;tibble [65 × 46]&gt; &lt;S3: gg&gt;
## 2 Germany                  &lt;tibble [65 × 46]&gt; &lt;S3: gg&gt;
## 3 France                   &lt;tibble [65 × 46]&gt; &lt;S3: gg&gt;
## 4 Greece                   &lt;tibble [65 × 46]&gt; &lt;S3: gg&gt;
## 5 Luxembourg               &lt;tibble [65 × 46]&gt; &lt;S3: gg&gt;
## 6 United States of America &lt;tibble [65 × 46]&gt; &lt;S3: gg&gt;</code></pre>
<p>
As <code>dplyr::do()</code>’s documentation tells us, the return values get stored inside a list. And this is exactly what we get back; a list of plots! Lists are a very flexible and useful class, and you cannot spell <em>list</em> without <code>purrr</code> (at least not when you’re a ne<code>R</code>d).
</p>
<p>
Here are the final lines that use <code>purrr::map2()</code> to save all these plots at once inside your working directory:
</p>
<p>
<em>Update</em>: I have changed the code below which does not require your data frame to be ordered according to the variable <code>country_list</code>.
</p>
<pre class="r"><code># file_names &lt;- paste0(country_list, ".pdf")

map2(paste0(plots$country, ".pdf"), plots$plot, ggsave)</code></pre>
<p>
As I said before, if you do not re-order the countries inside the data frame, the names of the files and the plots will not match. Try running all the code without re-ordering, you’ll see!
</p>
<p>
I hope you found this post useful. You can follow me on <a href="https://www.twitter.com/brodriguesco">twitter</a> for blog updates.
</p>
<p>
<em>Update</em>: Many thanks to the readers of this article and for their useful suggestions. I love the R community; everyday I learn something new and useful!
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-03-29-make-ggplot2-purrr.html</guid>
  <pubDate>Wed, 29 Mar 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducing brotools</title>
  <link>https://b-rodrigues.github.io/posts/2017-03-27-introducing_brotools.html</link>
  <description><![CDATA[ 




<p>
I’m happy to announce my first R package, called <code>brotools</code>. This is a package that contains functions that are specific to my needs but that you might find also useful. I blogged about some of these functions, so if you follow my blog you might already be familiar with some of them. It is not on CRAN and might very well never be. The code is hosted on <a href="https://bitbucket.org/b-rodrigues/brotools">bitbucket</a> and you can install the package with
</p>
<pre class="r"><code>devtools::install_bitbucket("b-rodrigues/brotools")</code></pre>
<p>
Hope you’ll find the <code>brotools</code> useful!
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-03-27-introducing_brotools.html</guid>
  <pubDate>Mon, 27 Mar 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Lesser known purrr tricks</title>
  <link>https://b-rodrigues.github.io/posts/2017-03-24-lesser_known_purrr.html</link>
  <description><![CDATA[ 




<p>
<code>purrr</code> is a package that extends R’s functional programming capabilities. It brings a lot of new stuff to the table and in this post I show you some of the most useful (at least to me) functions included in <code>purrr</code>.
</p>
<section id="getting-rid-of-loops-with-map" class="level2">
<h2 class="anchored" data-anchor-id="getting-rid-of-loops-with-map">
Getting rid of loops with <code>map()</code>
</h2>
<pre class="r"><code>library(purrr)

numbers &lt;- list(11, 12, 13, 14)

map_dbl(numbers, sqrt)</code></pre>
<pre><code>## [1] 3.316625 3.464102 3.605551 3.741657</code></pre>
<p>
You might wonder why this might be preferred to a for loop? It’s a lot less verbose, and you do not need to initialise any kind of structure to hold the result. If you google “create empty list in R” you will see that this is very common. However, with the <code>map()</code> family of functions, there is no need for an initial structure. <code>map_dbl()</code> returns an atomic list of real numbers, but if you use <code>map()</code> you will get a list back. Try them all out!
</p>
</section>
<section id="map-conditionally" class="level2">
<h2 class="anchored" data-anchor-id="map-conditionally">
Map conditionally
</h2>
<section id="map_if" class="level4">
<h4 class="anchored" data-anchor-id="map_if">
map_if()
</h4>
<pre class="r"><code># Create a helper function that returns TRUE if a number is even
is_even &lt;- function(x){
  !as.logical(x %% 2)
}

map_if(numbers, is_even, sqrt)</code></pre>
<pre><code>## [[1]]
## [1] 11
## 
## [[2]]
## [1] 3.464102
## 
## [[3]]
## [1] 13
## 
## [[4]]
## [1] 3.741657</code></pre>
</section>
<section id="map_at" class="level4">
<h4 class="anchored" data-anchor-id="map_at">
map_at()
</h4>
<pre class="r"><code>map_at(numbers, c(1,3), sqrt)</code></pre>
<pre><code>## [[1]]
## [1] 3.316625
## 
## [[2]]
## [1] 12
## 
## [[3]]
## [1] 3.605551
## 
## [[4]]
## [1] 14</code></pre>
<p>
<code>map_if()</code> and <code>map_at()</code> have a further argument than <code>map()</code>; in the case of <code>map_if()</code>, a predicate function ( a function that returns <code>TRUE</code> or <code>FALSE</code>) and a vector of positions for <code>map_at()</code>. This allows you to map your function only when certain conditions are met, which is also something that a lot of people google for.
</p>
</section>
</section>
<section id="map-a-function-with-multiple-arguments" class="level2">
<h2 class="anchored" data-anchor-id="map-a-function-with-multiple-arguments">
Map a function with multiple arguments
</h2>
<pre class="r"><code>numbers2 &lt;- list(1, 2, 3, 4)

map2(numbers, numbers2, `+`)</code></pre>
<pre><code>## [[1]]
## [1] 12
## 
## [[2]]
## [1] 14
## 
## [[3]]
## [1] 16
## 
## [[4]]
## [1] 18</code></pre>
<p>
You can map two lists to a function which takes two arguments using <code>map_2()</code>. You can even map an arbitrary number of lists to any function using <code>pmap()</code>.
</p>
<p>
By the way, try this in: <code><code>+</code>(1,3)</code> and see what happens.
</p>
</section>
<section id="dont-stop-execution-of-your-function-if-something-goes-wrong" class="level2">
<h2 class="anchored" data-anchor-id="dont-stop-execution-of-your-function-if-something-goes-wrong">
Don’t stop execution of your function if something goes wrong
</h2>
<pre class="r"><code>possible_sqrt &lt;- possibly(sqrt, otherwise = NA_real_)

numbers_with_error &lt;- list(1, 2, 3, "spam", 4)

map(numbers_with_error, possible_sqrt)</code></pre>
<pre><code>## [[1]]
## [1] 1
## 
## [[2]]
## [1] 1.414214
## 
## [[3]]
## [1] 1.732051
## 
## [[4]]
## [1] NA
## 
## [[5]]
## [1] 2</code></pre>
<p>
Another very common issue is to keep running your loop even when something goes wrong. In most cases the loop simply stops at the error, but you would like it to continue and see where it failed. Try to google “skip error in a loop” or some variation of it and you’ll see that a lot of people really just want that. This is possible by combining <code>map()</code> and <code>possibly()</code>. Most solutions involve the use of <code>tryCatch()</code> which I personally do not find very easy to use.
</p>
</section>
<section id="dont-stop-execution-of-your-function-if-something-goes-wrong-and-capture-the-error" class="level2">
<h2 class="anchored" data-anchor-id="dont-stop-execution-of-your-function-if-something-goes-wrong-and-capture-the-error">
Don’t stop execution of your function if something goes wrong and capture the error
</h2>
<pre class="r"><code>safe_sqrt &lt;- safely(sqrt, otherwise = NA_real_)

map(numbers_with_error, safe_sqrt)</code></pre>
<pre><code>## [[1]]
## [[1]]$result
## [1] 1
## 
## [[1]]$error
## NULL
## 
## 
## [[2]]
## [[2]]$result
## [1] 1.414214
## 
## [[2]]$error
## NULL
## 
## 
## [[3]]
## [[3]]$result
## [1] 1.732051
## 
## [[3]]$error
## NULL
## 
## 
## [[4]]
## [[4]]$result
## [1] NA
## 
## [[4]]$error
## <simpleerror in="" sqrt(x="x):" non-numeric="" argument="" to="" mathematical="" function&gt;="" ##="" [[5]]="" [[5]]$result="" [1]="" 2="" [[5]]$error="" null<="" code=""></simpleerror></code></pre><code>
<p>
<code>safely()</code> is very similar to <code>possibly()</code> but it returns a list of lists. An element is thus a list of the result and the accompagnying error message. If there is no error, the error component is <code>NULL</code> if there is an error, it returns the error message.
</p>
</code></section><code>
<section id="transpose-a-list" class="level2">
<h2 class="anchored" data-anchor-id="transpose-a-list">
Transpose a list
</h2>
<pre class="r"><code>safe_result_list &lt;- map(numbers_with_error, safe_sqrt)

transpose(safe_result_list)</code></pre>
<pre><code>## $result
## $result[[1]]
## [1] 1
## 
## $result[[2]]
## [1] 1.414214
## 
## $result[[3]]
## [1] 1.732051
## 
## $result[[4]]
## [1] NA
## 
## $result[[5]]
## [1] 2
## 
## 
## $error
## $error[[1]]
## NULL
## 
## $error[[2]]
## NULL
## 
## $error[[3]]
## NULL
## 
## $error[[4]]
## <simpleerror in="" sqrt(x="x):" non-numeric="" argument="" to="" mathematical="" function&gt;="" ##="" $error[[5]]="" null<="" code=""></simpleerror></code></pre><code>
<p>
Here we transposed the above list. This means that we still have a list of lists, but where the first list holds all the results (which you can then access with <code>safe_result_list$result</code>) and the second list holds all the errors (which you can access with <code>safe_result_list$error</code>). This can be quite useful!
</p>
</code></section><code>
<section id="apply-a-function-to-a-lower-depth-of-a-list" class="level2">
<h2 class="anchored" data-anchor-id="apply-a-function-to-a-lower-depth-of-a-list">
Apply a function to a lower depth of a list
</h2>
<pre class="r"><code>transposed_list &lt;- transpose(safe_result_list)

transposed_list %&gt;%
    at_depth(2, is_null)</code></pre>
<pre><code>## Warning: at_depth() is deprecated, please use `modify_depth()` instead</code></pre>
<pre><code>## $result
## $result[[1]]
## [1] FALSE
## 
## $result[[2]]
## [1] FALSE
## 
## $result[[3]]
## [1] FALSE
## 
## $result[[4]]
## [1] FALSE
## 
## $result[[5]]
## [1] FALSE
## 
## 
## $error
## $error[[1]]
## [1] TRUE
## 
## $error[[2]]
## [1] TRUE
## 
## $error[[3]]
## [1] TRUE
## 
## $error[[4]]
## [1] FALSE
## 
## $error[[5]]
## [1] TRUE</code></pre>
<p>
Sometimes working with lists of lists can be tricky, especially when we want to apply a function to the sub-lists. This is easily done with <code>at_depth()</code>!
</p>
</section>
<section id="set-names-of-list-elements" class="level2">
<h2 class="anchored" data-anchor-id="set-names-of-list-elements">
Set names of list elements
</h2>
<pre class="r"><code>name_element &lt;- c("sqrt()", "ok?")

set_names(transposed_list, name_element)</code></pre>
<pre><code>## $`sqrt()`
## $`sqrt()`[[1]]
## [1] 1
## 
## $`sqrt()`[[2]]
## [1] 1.414214
## 
## $`sqrt()`[[3]]
## [1] 1.732051
## 
## $`sqrt()`[[4]]
## [1] NA
## 
## $`sqrt()`[[5]]
## [1] 2
## 
## 
## $`ok?`
## $`ok?`[[1]]
## NULL
## 
## $`ok?`[[2]]
## NULL
## 
## $`ok?`[[3]]
## NULL
## 
## $`ok?`[[4]]
## <simpleerror in="" sqrt(x="x):" non-numeric="" argument="" to="" mathematical="" function&gt;="" ##="" $`ok?`[[5]]="" null<="" code=""></simpleerror></code></pre><code>
</code></section><code>
<section id="reduce-a-list-to-a-single-value" class="level2">
<h2 class="anchored" data-anchor-id="reduce-a-list-to-a-single-value">
Reduce a list to a single value
</h2>
<pre class="r"><code>reduce(numbers, `*`)</code></pre>
<pre><code>## [1] 24024</code></pre>
<p>
<code>reduce()</code> applies the function <code>*</code> iteratively to the list of numbers. There’s also <code>accumulate()</code>:
</p>
<pre class="r"><code>accumulate(numbers, `*`)</code></pre>
<pre><code>## [1]    11   132  1716 24024</code></pre>
<p>
which keeps the intermediary results.
</p>
<p>
This function is very general, and you can reduce anything:
</p>
<p>
Matrices:
</p>
<pre class="r"><code>mat1 &lt;- matrix(rnorm(10), nrow = 2)
mat2 &lt;- matrix(rnorm(10), nrow = 2)
mat3 &lt;- matrix(rnorm(10), nrow = 2)</code></pre>
<pre class="r"><code>list_mat &lt;- list(mat1, mat2, mat3)

reduce(list_mat, `+`)</code></pre>
<pre><code>##             [,1]       [,2]       [,3]     [,4]      [,5]
## [1,] -2.48530177  1.0110049  0.4450388 1.280802 1.3413979
## [2,]  0.07596679 -0.6872268 -0.6579242 1.615237 0.8231933</code></pre>
<p>
even data frames:
</p>
<pre class="r"><code>df1 &lt;- as.data.frame(mat1)
df2 &lt;- as.data.frame(mat2)
df3 &lt;- as.data.frame(mat3)

list_df &lt;- list(df1, df2, df3)

reduce(list_df, dplyr::full_join)</code></pre>
<pre><code>## Joining, by = c("V1", "V2", "V3", "V4", "V5")
## Joining, by = c("V1", "V2", "V3", "V4", "V5")</code></pre>
<pre><code>##           V1         V2          V3          V4         V5
## 1 -0.6264538 -0.8356286  0.32950777  0.48742905  0.5757814
## 2  0.1836433  1.5952808 -0.82046838  0.73832471 -0.3053884
## 3 -0.8969145  1.5878453 -0.08025176  0.70795473  1.9844739
## 4  0.1848492 -1.1303757  0.13242028 -0.23969802 -0.1387870
## 5 -0.9619334  0.2587882  0.19578283  0.08541773 -1.2188574
## 6 -0.2925257 -1.1521319  0.03012394  1.11661021  1.2673687</code></pre>
<p>
Hope you enjoyed this list of useful functions! If you enjoy the content of my blog, you can follow me on <a href="https://www.twitter.com/brodriguesco">twitter</a>.
</p>
</section>



</code></code></code> ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-03-24-lesser_known_purrr.html</guid>
  <pubDate>Fri, 24 Mar 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Lesser known dplyr tricks</title>
  <link>https://b-rodrigues.github.io/posts/2017-03-08-lesser_known_tricks.html</link>
  <description><![CDATA[ 




<p>
In this blog post I share some lesser-known (at least I believe they are) tricks that use mainly functions from <code>dplyr</code>.
</p>
<section id="removing-unneeded-columns" class="level2">
<h2 class="anchored" data-anchor-id="removing-unneeded-columns">
Removing unneeded columns
</h2>
<p>
Did you know that you can use <code>-</code> in front of a column name to remove it from a data frame?
</p>
<pre class="r"><code>mtcars %&gt;% 
    select(-disp) %&gt;% 
    head()</code></pre>
<pre><code>##                    mpg cyl  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6 105 2.76 3.460 20.22  1  0    3    1</code></pre>
</section>
<section id="re-ordering-columns" class="level2">
<h2 class="anchored" data-anchor-id="re-ordering-columns">
Re-ordering columns
</h2>
<p>
Still using <code>select()</code>, it is easy te re-order columns in your data frame:
</p>
<pre class="r"><code>mtcars %&gt;% 
    select(cyl, disp, hp, everything()) %&gt;% 
    head()</code></pre>
<pre><code>##                   cyl disp  hp  mpg drat    wt  qsec vs am gear carb
## Mazda RX4           6  160 110 21.0 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag       6  160 110 21.0 3.90 2.875 17.02  0  1    4    4
## Datsun 710          4  108  93 22.8 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive      6  258 110 21.4 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout   8  360 175 18.7 3.15 3.440 17.02  0  0    3    2
## Valiant             6  225 105 18.1 2.76 3.460 20.22  1  0    3    1</code></pre>
<p>
As its name implies <code>everything()</code> simply means all the other columns.
</p>
</section>
<section id="renaming-columns-with-rename" class="level2">
<h2 class="anchored" data-anchor-id="renaming-columns-with-rename">
Renaming columns with <code>rename()</code>
</h2>
<pre class="r"><code>mtcars &lt;- rename(mtcars, spam_mpg = mpg)
mtcars &lt;- rename(mtcars, spam_disp = disp)
mtcars &lt;- rename(mtcars, spam_hp = hp)

head(mtcars)</code></pre>
<pre><code>##                   spam_mpg cyl spam_disp spam_hp drat    wt  qsec vs am
## Mazda RX4             21.0   6       160     110 3.90 2.620 16.46  0  1
## Mazda RX4 Wag         21.0   6       160     110 3.90 2.875 17.02  0  1
## Datsun 710            22.8   4       108      93 3.85 2.320 18.61  1  1
## Hornet 4 Drive        21.4   6       258     110 3.08 3.215 19.44  1  0
## Hornet Sportabout     18.7   8       360     175 3.15 3.440 17.02  0  0
## Valiant               18.1   6       225     105 2.76 3.460 20.22  1  0
##                   gear carb
## Mazda RX4            4    4
## Mazda RX4 Wag        4    4
## Datsun 710           4    1
## Hornet 4 Drive       3    1
## Hornet Sportabout    3    2
## Valiant              3    1</code></pre>
</section>
<section id="selecting-columns-with-a-regexp" class="level2">
<h2 class="anchored" data-anchor-id="selecting-columns-with-a-regexp">
Selecting columns with a regexp
</h2>
<p>
It is easy to select the columns that start with “spam” with some helper functions:
</p>
<pre class="r"><code>mtcars %&gt;% 
    select(contains("spam")) %&gt;% 
    head()</code></pre>
<pre><code>##                   spam_mpg spam_disp spam_hp
## Mazda RX4             21.0       160     110
## Mazda RX4 Wag         21.0       160     110
## Datsun 710            22.8       108      93
## Hornet 4 Drive        21.4       258     110
## Hornet Sportabout     18.7       360     175
## Valiant               18.1       225     105</code></pre>
<p>
take also a look at <code>starts_with()</code>, <code>ends_with()</code>, <code>contains()</code>, <code>matches()</code>, <code>num_range()</code>, <code>one_of()</code> and <code>everything()</code>.
</p>
</section>
<section id="create-new-columns-with-mutate-and-if_else" class="level2">
<h2 class="anchored" data-anchor-id="create-new-columns-with-mutate-and-if_else">
Create new columns with <code>mutate()</code> and <code>if_else()</code>
</h2>
<pre class="r"><code>mtcars %&gt;% 
    mutate(vs_new = if_else(
        vs == 1, 
        "one", 
        "zero", 
        NA_character_)) %&gt;% 
    head()</code></pre>
<pre><code>##   spam_mpg cyl spam_disp spam_hp drat    wt  qsec vs am gear carb vs_new
## 1     21.0   6       160     110 3.90 2.620 16.46  0  1    4    4   zero
## 2     21.0   6       160     110 3.90 2.875 17.02  0  1    4    4   zero
## 3     22.8   4       108      93 3.85 2.320 18.61  1  1    4    1    one
## 4     21.4   6       258     110 3.08 3.215 19.44  1  0    3    1    one
## 5     18.7   8       360     175 3.15 3.440 17.02  0  0    3    2   zero
## 6     18.1   6       225     105 2.76 3.460 20.22  1  0    3    1    one</code></pre>
<p>
You might want to create a new variable conditionally on several values of another column:
</p>
<pre class="r"><code>mtcars %&gt;% 
    mutate(carb_new = case_when(.$carb == 1 ~ "one",
                                .$carb == 2 ~ "two",
                                .$carb == 4 ~ "four",
                                 TRUE ~ "other")) %&gt;% 
    head(15)</code></pre>
<pre><code>##    spam_mpg cyl spam_disp spam_hp drat    wt  qsec vs am gear carb
## 1      21.0   6     160.0     110 3.90 2.620 16.46  0  1    4    4
## 2      21.0   6     160.0     110 3.90 2.875 17.02  0  1    4    4
## 3      22.8   4     108.0      93 3.85 2.320 18.61  1  1    4    1
## 4      21.4   6     258.0     110 3.08 3.215 19.44  1  0    3    1
## 5      18.7   8     360.0     175 3.15 3.440 17.02  0  0    3    2
## 6      18.1   6     225.0     105 2.76 3.460 20.22  1  0    3    1
## 7      14.3   8     360.0     245 3.21 3.570 15.84  0  0    3    4
## 8      24.4   4     146.7      62 3.69 3.190 20.00  1  0    4    2
## 9      22.8   4     140.8      95 3.92 3.150 22.90  1  0    4    2
## 10     19.2   6     167.6     123 3.92 3.440 18.30  1  0    4    4
## 11     17.8   6     167.6     123 3.92 3.440 18.90  1  0    4    4
## 12     16.4   8     275.8     180 3.07 4.070 17.40  0  0    3    3
## 13     17.3   8     275.8     180 3.07 3.730 17.60  0  0    3    3
## 14     15.2   8     275.8     180 3.07 3.780 18.00  0  0    3    3
## 15     10.4   8     472.0     205 2.93 5.250 17.98  0  0    3    4
##    carb_new
## 1      four
## 2      four
## 3       one
## 4       one
## 5       two
## 6       one
## 7      four
## 8       two
## 9       two
## 10     four
## 11     four
## 12    other
## 13    other
## 14    other
## 15     four</code></pre>
<p>
Mind the <code>.$</code> before the variable <code>carb</code>. There is a <a href="https://github.com/hadley/dplyr/issues/1965">github issue</a> about this, and it is already fixed in the development version of <code>dplyr</code>, which means that in the next version of <code>dplyr</code>, <code>case_when()</code> will work as any other specialized <code>dplyr</code> function inside <code>mutate()</code>.
</p>
</section>
<section id="apply-a-function-to-certain-columns-only-by-rows" class="level2">
<h2 class="anchored" data-anchor-id="apply-a-function-to-certain-columns-only-by-rows">
Apply a function to certain columns only, by rows
</h2>
<pre class="r"><code>mtcars %&gt;%
    select(am, gear, carb) %&gt;%
    purrr::by_row(sum, .collate = "cols", .to = "sum_am_gear_carb") -&gt; mtcars2
head(mtcars2)</code></pre>
<p>
For this, I had to use <code>purrr</code>’s <code>by_row()</code> function. You can then add this column to your original data frame:
</p>
<pre class="r"><code>mtcars &lt;- cbind(mtcars, "sum_am_gear_carb" = mtcars2$sum_am_gear_carb)
head(mtcars)</code></pre>
<pre><code>##                   spam_mpg cyl spam_disp spam_hp drat    wt  qsec vs am
## Mazda RX4             21.0   6       160     110 3.90 2.620 16.46  0  1
## Mazda RX4 Wag         21.0   6       160     110 3.90 2.875 17.02  0  1
## Datsun 710            22.8   4       108      93 3.85 2.320 18.61  1  1
## Hornet 4 Drive        21.4   6       258     110 3.08 3.215 19.44  1  0
## Hornet Sportabout     18.7   8       360     175 3.15 3.440 17.02  0  0
## Valiant               18.1   6       225     105 2.76 3.460 20.22  1  0
##                   gear carb sum_am_gear_carb
## Mazda RX4            4    4                9
## Mazda RX4 Wag        4    4                9
## Datsun 710           4    1                6
## Hornet 4 Drive       3    1                4
## Hornet Sportabout    3    2                5
## Valiant              3    1                4</code></pre>
</section>
<section id="use-do-to-do-any-arbitrary-operation" class="level2">
<h2 class="anchored" data-anchor-id="use-do-to-do-any-arbitrary-operation">
Use <code>do()</code> to do any arbitrary operation
</h2>
<pre class="r"><code>mtcars %&gt;% 
    group_by(cyl) %&gt;% 
    do(models = lm(spam_mpg ~ drat + wt, data = .)) %&gt;% 
    broom::tidy(models)</code></pre>
<pre><code>## # A tibble: 9 x 6
## # Groups:   cyl [3]
##     cyl term        estimate std.error statistic p.value
##   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
## 1     4 (Intercept)   33.2      17.1       1.94  0.0877 
## 2     4 drat           1.32      3.45      0.384 0.711  
## 3     4 wt            -5.24      2.22     -2.37  0.0456 
## 4     6 (Intercept)   30.7       7.51      4.08  0.0151 
## 5     6 drat          -0.444     1.17     -0.378 0.725  
## 6     6 wt            -2.99      1.57     -1.91  0.129  
## 7     8 (Intercept)   29.7       7.09      4.18  0.00153
## 8     8 drat          -1.47      1.63     -0.903 0.386  
## 9     8 wt            -2.45      0.799    -3.07  0.0107</code></pre>
<p>
<code>do()</code> is useful when you want to use any R function (user defined functions work too!) with <code>dplyr</code> functions. First I grouped the observations by <code>cyl</code> and then ran a linear model for each group. Then I converted the output to a tidy data frame using <code>broom::tidy()</code>.
</p>
</section>
<section id="using-dplyr-functions-inside-your-own-functions" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr-functions-inside-your-own-functions">
Using <code>dplyr</code> functions inside your own functions
</h2>
<pre class="r"><code>extract_vars &lt;- function(data, some_string){
    
  data %&gt;%
    select_(lazyeval::interp(~contains(some_string))) -&gt; data
    
  return(data)
}

extract_vars(mtcars, "spam")</code></pre>
<pre><code>##                     spam_mpg spam_disp spam_hp
## Mazda RX4               21.0     160.0     110
## Mazda RX4 Wag           21.0     160.0     110
## Datsun 710              22.8     108.0      93
## Hornet 4 Drive          21.4     258.0     110
## Hornet Sportabout       18.7     360.0     175
## Valiant                 18.1     225.0     105
## Duster 360              14.3     360.0     245
## Merc 240D               24.4     146.7      62
## Merc 230                22.8     140.8      95
## Merc 280                19.2     167.6     123
## Merc 280C               17.8     167.6     123
## Merc 450SE              16.4     275.8     180
## Merc 450SL              17.3     275.8     180
## Merc 450SLC             15.2     275.8     180
## Cadillac Fleetwood      10.4     472.0     205
## Lincoln Continental     10.4     460.0     215
## Chrysler Imperial       14.7     440.0     230
## Fiat 128                32.4      78.7      66
## Honda Civic             30.4      75.7      52
## Toyota Corolla          33.9      71.1      65
## Toyota Corona           21.5     120.1      97
## Dodge Challenger        15.5     318.0     150
## AMC Javelin             15.2     304.0     150
## Camaro Z28              13.3     350.0     245
## Pontiac Firebird        19.2     400.0     175
## Fiat X1-9               27.3      79.0      66
## Porsche 914-2           26.0     120.3      91
## Lotus Europa            30.4      95.1     113
## Ford Pantera L          15.8     351.0     264
## Ferrari Dino            19.7     145.0     175
## Maserati Bora           15.0     301.0     335
## Volvo 142E              21.4     121.0     109</code></pre>
<p>
About this last point, you can read more about it <a href="2016-07-18-data-frame-columns-as-arguments-to-dplyr-functions.html">here</a>.
</p>
<p>
Hope you liked this small list of tricks!
</p>
</section>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-03-08-lesser_known_tricks.html</guid>
  <pubDate>Wed, 08 Mar 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use jailbreakr</title>
  <link>https://b-rodrigues.github.io/posts/2017-02-17-how_to_use_jailbreakr.html</link>
  <description><![CDATA[ 




<section id="what-is-jailbreakr" class="level2">
<h2 class="anchored" data-anchor-id="what-is-jailbreakr">
What is <code>jailbreakr</code>
</h2>
<p>
The <code>jailbreakr</code> package is probably one of the most interesting packages I came across recently. This package makes it possible to extract messy data from spreadsheets. What is meant by messy? I am sure you already had to deal with spreadsheets that contained little tables inside a single sheet for example. As far as I know, there is no simple way of extracting these tables without having to fiddle around a lot. This is now over with <code>jailbreakr</code>. Well not entirely, because <code>jailbreakr</code> is still in development, but it works well already. If you want to know more about the planned features, you can watch the following <a href="https://channel9.msdn.com/Events/useR-international-R-User-conference/useR2016/jailbreakr-Get-out-of-Excel-free">video</a> by Jenny Bryan, one of the package’s authors.
</p>
</section>
<section id="installation-and-data" class="level2">
<h2 class="anchored" data-anchor-id="installation-and-data">
Installation and data
</h2>
<p>
You will have to install the package from Github, as it is not on CRAN yet. <a href="https://github.com/rsheets/jailbreakr">Here is the Github link</a>. To install the package, just run the following commands in an R console:
</p>
<pre class="r"><code>devtools::install_github(c("hadley/xml2",
                           "rsheets/linen",
                           "rsheets/cellranger",
                           "rsheets/rexcel",
                           "rsheets/jailbreakr"))</code></pre>
<p>
If you get the following error:
</p>
<pre><code>devtools::install_github("hadley/xml2")
Downloading GitHub repo hadley/xml2@master
from URL https://api.github.com/repos/hadley/xml2/zipball/master
Error in system(full, intern = quiet, ignore.stderr = quiet, ...) :
    error in running command</code></pre>
<p>
and if you’re on a GNU+Linux distribution try to run the following command:
</p>
<pre class="r"><code>options(unzip = "internal")</code></pre>
<p>
and then run <code>github_install()</code> again.
</p>
<p>
As you can see, you need some other packages to make it work. Now we are going to get some data. We are going to download some time series from the European Commission, data I had to deal with recently. Download the data by clicking <a href="http://ec.europa.eu/economy_finance/db_indicators/surveys/documents/series/nace2_ecfin_1701/investment_total_nsa_nace2.zip">here</a> and look for the spreadsheet titled <code>Investment_total_factors_nace2.xlsx</code>. The data we are interested in is on the second sheet, named <code>TOT</code>. You cannot import this sheet easily into R because there are four tables on the same sheet. Let us use <code>jailbreakr</code> to get these tables out of the sheet and into nice, tidy, data frames.
</p>
</section>
<section id="jailbreakr-to-the-rescue" class="level2">
<h2 class="anchored" data-anchor-id="jailbreakr-to-the-rescue">
<code>jailbreakr</code> to the rescue
</h2>
<p>
The first step is to read the data in. For this, we are going to use the <code>rexcel</code> package, which is also part of the <code>rsheets</code> organization on Github that was set up by Jenny Brian and Rich Fitzjohn, the authors of these packages. <code>rexcel</code> imports the sheet you want but not in a way that is immediately useful to you. It just gets the sheet into R, which makes it then possible to use <code>jailbreakr</code>’s magic on it. First, let’s import the packages we need:
</p>
<pre class="r"><code>library("rexcel")
library("jailbreakr")</code></pre>
<p>
We need to check which sheet to import. There are two sheets, and we want to import the one called <code>TOT</code>, the second one. But is it really the second one? I have noticed that sometimes, there are hidden sheets which makes importing the one you want impossible. So first, let use use another package, <code>readxl</code> and its function <code>excel_sheets()</code> to make sure we are extracting the sheet we really need:
</p>
<pre class="r"><code>sheets &lt;- readxl::excel_sheets(path_to_data)

tot_sheet &lt;- which(sheets == "TOT")

print(tot_sheet)</code></pre>
<pre><code>## [1] 3</code></pre>
<p>
As you can see, the sheet we want is not the second, but the third! Let us import this sheet into R now (this might take more time than you think; on my computer it takes around 10 seconds):
</p>
<pre class="r"><code>my_sheet &lt;- rexcel_read(path_to_data, sheet = tot_sheet)</code></pre>
<p>
Now we can start using <code>jailbreakr</code>. The function <code>split_sheet()</code> is the one that splits the sheet into little tables:
</p>
<pre class="r"><code>tables &lt;- split_sheet(my_sheet)
str(tables)</code></pre>
<pre><code>## List of 4
##  $ :Classes 'worksheet_view', 'R6' &lt;worksheet_view&gt;
##   Public:
##     cells: active binding
##     clone: function (deep = FALSE) 
##     data: NULL
##     dim: 34 28
##     header: NULL
##     idx: list
##     initialize: function (sheet, xr, filter, header, data) 
##     lookup: active binding
##     lookup2: active binding
##     merged: active binding
##     sheet: worksheet, R6
##     table: function (col_names = TRUE, ...) 
##     values: function () 
##     xr: cell_limits, list 
##  $ :Classes 'worksheet_view', 'R6' &lt;worksheet_view&gt;
##   Public:
##     cells: active binding
##     clone: function (deep = FALSE) 
##     data: NULL
##     dim: 33 28
##     header: NULL
##     idx: list
##     initialize: function (sheet, xr, filter, header, data) 
##     lookup: active binding
##     lookup2: active binding
##     merged: active binding
##     sheet: worksheet, R6
##     table: function (col_names = TRUE, ...) 
##     values: function () 
##     xr: cell_limits, list 
##  $ :Classes 'worksheet_view', 'R6' &lt;worksheet_view&gt;
##   Public:
##     cells: active binding
##     clone: function (deep = FALSE) 
##     data: NULL
##     dim: 32 28
##     header: NULL
##     idx: list
##     initialize: function (sheet, xr, filter, header, data) 
##     lookup: active binding
##     lookup2: active binding
##     merged: active binding
##     sheet: worksheet, R6
##     table: function (col_names = TRUE, ...) 
##     values: function () 
##     xr: cell_limits, list 
##  $ :Classes 'worksheet_view', 'R6' &lt;worksheet_view&gt;
##   Public:
##     cells: active binding
##     clone: function (deep = FALSE) 
##     data: NULL
##     dim: 33 28
##     header: NULL
##     idx: list
##     initialize: function (sheet, xr, filter, header, data) 
##     lookup: active binding
##     lookup2: active binding
##     merged: active binding
##     sheet: worksheet, R6
##     table: function (col_names = TRUE, ...) 
##     values: function () 
##     xr: cell_limits, list</code></pre>
<p>
<code>tables</code> is actually a list containing <code>worksheet_view</code> objects. Take a look at the <code>dim</code> attribute: you see the dimensions of the tables there. When I started using <code>jailbreakr</code> I was stuck here. I was looking for the function that would extract the data frames and could not find it. Then I watched the video and I understood what I had to do: a <code>worksheet_view</code> object has a <code>values()</code> method that does the extraction for you. This is a bit unusual in R (it made me feel like I was using Python); maybe in future versions this <code>values()</code> method will become a separate function of its own in the package. What happens when we use <code>values()</code>?
</p>
<pre class="r"><code>library("purrr")
list_of_data &lt;-  map(tables, (function(x)(x$values())))
map(list_of_data, head)</code></pre>
<pre><code>## [[1]]
##      [,1]     [,2]    [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10]
## [1,] "TOT"    NA      NA    NA    NA    NA    NA    NA    NA    NA   
## [2,] "DEMAND" 33603   33969 34334 34699 35064 35430 35795 36160 36525
## [3,] "FDEMT"  "FDEMN" NA    NA    NA    NA    NA    NA    NA    NA   
## [4,] "EU"     ":"     16.9  -1.4  20.2  34.5  31.4  37.5  39    37.3 
## [5,] "EA"     ":"     15.5  -13.1 14.8  30.9  25.1  35.2  39.2  37.1 
## [6,] "BE"     ":"     ":"   ":"   ":"   ":"   ":"   ":"   42.3  43.1 
##      [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
## [1,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [2,] 36891 37256 37621 37986 38352 38717 39082 39447 39813 40178 40543
## [3,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [4,] 39.2  27.5  20.6  21.4  29.8  26.4  32.5  47.1  19    -1.3  23.5 
## [5,] 39.5  25.3  18.2  18.9  27.4  23    28.2  46.1  12.3  -9.3  19.3 
## [6,] 45.8  42.2  42.9  43.8  45.8  47.4  49.1  50.9  48.2  46.9  46.3 
##      [,22] [,23] [,24] [,25] [,26] [,27] [,28] 
## [1,] NA    NA    NA    NA    NA    NA    NA    
## [2,] 40908 41274 41639 42004 42369 42735 43100 
## [3,] NA    NA    NA    NA    NA    NA    NA    
## [4,] 29    22    21.1  25.6  31.8  22.9  "30.7"
## [5,] 26.2  18.6  15.7  21.7  28.8  17.3  26.6  
## [6,] 46.8  47.1  48.2  50.1  49.2  34.5  34.4  
## 
## [[2]]
##      [,1]        [,2]    [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10]
## [1,] "FINANCIAL" 33603   33969 34334 34699 35064 35430 35795 36160 36525
## [2,] "FFINT"     "FFINN" NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] "EU"        ":"     -5.1  -6.2  2.7   6.7   9     14.4  13.9  14   
## [4,] "EA"        ":"     -8.8  -13.5 -3.4  2.6   5.7   12.5  13.2  13.1 
## [5,] "BE"        ":"     ":"   ":"   ":"   ":"   ":"   ":"   21.5  22.4 
## [6,] "BG"        ":"     ":"   ":"   ":"   ":"   ":"   ":"   ":"   ":"  
##      [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
## [1,] 36891 37256 37621 37986 38352 38717 39082 39447 39813 40178 40543
## [2,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] 16.4  9.4   7.4   8.1   12.4  8.4   13.6  23.4  4.1   -4    10.9 
## [4,] 16.5  8     6.8   5.1   9.9   4.8   8.4   24.3  -2.8  -10.5 9.3  
## [5,] 20.9  22.3  32.2  33.5  33.8  34.8  35    34.5  37.2  33.5  32.7 
## [6,] ":"   ":"   20.8  24    27.1  28.3  33.4  37.5  37.7  26.6  30.4 
##      [,22] [,23] [,24] [,25] [,26] [,27] [,28] 
## [1,] 40908 41274 41639 42004 42369 42735 43100 
## [2,] NA    NA    NA    NA    NA    NA    NA    
## [3,] 12.4  10.2  8.8   13.4  17.4  6.2   "12.3"
## [4,] 9     7.2   5     11    13.1  -1    6.5   
## [5,] 31.5  32.3  33    31.7  32.2  19.9  20.5  
## [6,] 33.8  35.6  36    41.5  41.6  44.2  43.8  
## 
## [[3]]
##      [,1]        [,2]    [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10]
## [1,] "TECHNICAL" 33603   33969 34334 34699 35064 35430 35795 36160 36525
## [2,] "FTECT"     "FTECN" NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] "EU"        ":"     39.2  37.6  38.3  40    40.7  42.8  43.5  43.8 
## [4,] "EA"        ":"     39.7  36.2  37.5  41.2  40    44    44.8  44.9 
## [5,] "BE"        ":"     ":"   ":"   ":"   ":"   ":"   ":"   58.8  58.5 
## [6,] "BG"        ":"     ":"   ":"   ":"   ":"   ":"   ":"   ":"   ":"  
##      [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
## [1,] 36891 37256 37621 37986 38352 38717 39082 39447 39813 40178 40543
## [2,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] 37    31.1  27.2  30.9  30.4  30.3  27.4  40.5  25.8  23.1  27.4 
## [4,] 37    30.3  27.4  31    29.9  29.7  24.8  41    23.4  19.5  26.4 
## [5,] 58.3  58.4  57.7  59.2  59.6  59.4  60.2  59.5  60.5  57.9  56.3 
## [6,] ":"   ":"   17.3  17.5  21.1  21.5  25.3  28.2  26.1  21    25.3 
##      [,22] [,23] [,24] [,25] [,26] [,27] [,28] 
## [1,] 40908 41274 41639 42004 42369 42735 43100 
## [2,] NA    NA    NA    NA    NA    NA    NA    
## [3,] 28.9  26.3  31.3  32.1  32.1  30.2  "34.6"
## [4,] 28.5  25.9  32.1  32.4  33.1  30.2  36    
## [5,] 56.7  57.7  57.9  58.6  59.1  13.1  13.1  
## [6,] 24.6  26.8  30.4  31.9  34.1  34.8  33.7  
## 
## [[4]]
##      [,1]    [,2]    [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10] [,11]
## [1,] "OTHER" 33603   33969 34334 34699 35064 35430 35795 36160 36525 36891
## [2,] "FOTHT" "FOTHN" NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] "EU"    ":"     2.9   -0.5  3.9   3.9   1     4.1   4.7   7     7.2  
## [4,] "EA"    ":"     2.3   -4.9  1.4   1.3   -2.4  1.1   3.2   5.8   7    
## [5,] "BE"    ":"     ":"   ":"   ":"   ":"   ":"   ":"   14    14.9  15.9 
## [6,] "BG"    ":"     ":"   ":"   ":"   ":"   ":"   ":"   ":"   ":"   ":"  
##      [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
## [1,] 37256 37621 37986 38352 38717 39082 39447 39813 40178 40543 40908
## [2,] NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
## [3,] -1.5  6.2   8.1   7.6   1.4   2.4   13.7  -1.9  -3.2  1.1   1.1  
## [4,] -3.7  5.5   7.1   7.2   -2.2  0.4   15.5  -4.6  -8.4  0.3   -3.3 
## [5,] 16.3  22.8  23.1  22.4  24.5  25.3  25.5  26.6  26.6  24.7  24.6 
## [6,] ":"   -2.3  -0.8  2.4   2.9   3.5   4.8   5.5   2.2   3.3   3.2  
##      [,23] [,24] [,25] [,26] [,27] [,28]
## [1,] 41274 41639 42004 42369 42735 43100
## [2,] NA    NA    NA    NA    NA    NA   
## [3,] -1.6  0.9   2.7   1.9   -3.3  "2.1"
## [4,] -2.3  0.6   2.5   2.1   -5.4  1.7  
## [5,] 26.4  25.9  25    25.3  4.7   5.2  
## [6,] 5.9   7     8.2   9.6   9.4   9.1</code></pre>
<p>
We are getting really close to something useful! Now we can get the first table and do some basic cleaning to have a tidy dataset:
</p>
<pre class="r"><code>dataset1 &lt;- list_of_data[[1]]

dataset1 &lt;- dataset1[-c(1:3), ]
dataset1[dataset1 == ":"] &lt;- NA
colnames(dataset1) &lt;- c("country", seq(from = 1991, to = 2017))

head(dataset1)</code></pre>
<pre><code>##      country 1991 1992 1993  1994 1995 1996 1997 1998 1999 2000 2001 2002
## [1,] "EU"    NA   16.9 -1.4  20.2 34.5 31.4 37.5 39   37.3 39.2 27.5 20.6
## [2,] "EA"    NA   15.5 -13.1 14.8 30.9 25.1 35.2 39.2 37.1 39.5 25.3 18.2
## [3,] "BE"    NA   NA   NA    NA   NA   NA   NA   42.3 43.1 45.8 42.2 42.9
## [4,] "BG"    NA   NA   NA    NA   NA   NA   NA   NA   NA   NA   NA   39.6
## [5,] "CZ"    NA   NA   NA    NA   NA   NA   NA   NA   NA   NA   NA   54.9
## [6,] "DK"    49.5 45   50    59.5 62.5 55.5 60.5 57.5 56   61.5 57.5 59.5
##      2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016
## [1,] 21.4 29.8 26.4 32.5 47.1 19   -1.3 23.5 29   22   21.1 25.6 31.8 22.9
## [2,] 18.9 27.4 23   28.2 46.1 12.3 -9.3 19.3 26.2 18.6 15.7 21.7 28.8 17.3
## [3,] 43.8 45.8 47.4 49.1 50.9 48.2 46.9 46.3 46.8 47.1 48.2 50.1 49.2 34.5
## [4,] 43   42.8 45.5 49.1 52.6 50.7 39.5 45.5 47.4 45.6 50.5 51.4 49.9 53.2
## [5,] 37   48.5 67.9 66.4 66.8 69.3 64.7 61   56   47.5 53   53.5 67.5 58  
## [6,] 53.5 50   59   64   63   56   33.5 57   47   48   52   45.5 40.5 36.5
##      2017  
## [1,] "30.7"
## [2,] 26.6  
## [3,] 34.4  
## [4,] 52.8  
## [5,] 59.5  
## [6,] 37.5</code></pre>
<p>
Et voilà! We went from a messy spreadsheet to a tidy dataset in a matter of minutes. Even though this package is still in early development and not all the features that are planned are available, the basics are there and can save you a lot of pain!
</p>
</section>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-02-17-how_to_use_jailbreakr.html</guid>
  <pubDate>Fri, 17 Feb 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My free book has a cover!</title>
  <link>https://b-rodrigues.github.io/posts/2017-01-07-my-free-book-has-a-cover.html</link>
  <description><![CDATA[ 




<p>I’m currently writing a book as a hobby. It’s titled <em>Functional programming and unit testing for data munging with R</em> and you can get it for free <a href="https://leanpub.com/fput/">here</a>. You can also read it online for free on my <a href="http://www.brodrigues.co/fput">webpage</a> What’s the book about?</p>
<p>Here’s the teaser text:</p>
<blockquote class="blockquote">
<p>Learn the basics of functional programming, unit testing and package development for the R programming language in order to make your data tidy!</p>
</blockquote>
<p>The book now has a beautiful cover thanks to <a href="https://twitter.com/putosaure"><span class="citation" data-cites="putosaure">@putosaure</span></a>. Putosaure is a Paris based graphic designer who also reviews video games. He is also a very good friend of mine and I am very happy he made this beautiful cover for my book:</p>
<div style="text-align:center;">
<p><img src="https://b-rodrigues.github.io/assets/img/cover.png" class="img-fluid"></p>
</div>
<p>In it, we see a guy holding a shield with the Greek letter lambda, which also happens to be the letter to designate functional programming. I’ve added the title with the <a href="http://www.dafont.com/komika-title.font">Komika Title</a> font.</p>
<p>Consider this cover in beta, it’ll probably evolve some more. But I couldn’t wait to use it!</p>
<p>I love it. Hope you’ll love it too!</p>



 ]]></description>
  <category>R</category>
  <category>book</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2017-01-07-my-free-book-has-a-cover.html</guid>
  <pubDate>Sat, 07 Jan 2017 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
