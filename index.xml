<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Econometrics and Free Software</title>
<link>https://b-rodrigues.github.io/</link>
<atom:link href="https://b-rodrigues.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.37</generator>
<lastBuildDate>Wed, 30 Dec 2020 00:00:00 GMT</lastBuildDate>
<item>
  <title>A year in review</title>
  <link>https://b-rodrigues.github.io/posts/2020-12-30-year_review.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<link href="../rmarkdown-libs/anchor-sections/anchor-sections.css" rel="stylesheet">
<script src="../rmarkdown-libs/anchor-sections/anchor-sections.js"></script>
<div style="text-align:center;">
<p>
<a href=""> <img src="https://b-rodrigues.github.io/assets/img/2020_review.png" title="It wasn't the worst year ever, but it was quite crap." width="80%" height="auto"></a>
</p>
</div>
<script src="https://www.sciencemag.org/news/2018/11/why-536-was-worst-year-be-alive"></script>
<p>
This blog post just contains the links I mention in my video that you can watch <a href="https://youtu.be/Z5xNALiILzg">here</a>.
</p>
<p>
I mention the following books, packages, and people in my video:
</p>
<ul>
<li>
<a href="https://echarts4r.john-coene.com/index.html">echarts4r</a>
</li>
<li>
<a href="https://wlandau.github.io/targets/">targets</a>
</li>
<li>
<a href="https://github.com/easystats">easystats</a>
</li>
<li>
<a href="https://hhsievertsen.github.io/applied_econ_with_r/#Welcome">Applied Economics with R</a>
</li>
<li>
<a href="https://github.com/coolbutuseless?tab=repositories">coolbutuseless</a>
</li>
<li>
<a href="https://www.youtube.com/channel/UCKxHtRdtFEPihEjTtjG8Y8w/featured">Data Science ZJ</a> and <a href="https://diskframe.com/">disk.frame</a>
</li>
<li>
<a href="https://www.youtube.com/watch?v=4WVelCswXo4&amp;list=PLDcUM9US4XdNM4Edgs7weiyIguLSToZRI">Statistical Rethinking</a>
</li>
<li>
<a href="https://thinkr-open.github.io/golem/">Golem</a> and <a href="https://engineering-shiny.org/">Engineering production-grade shiny apps</a>
</li>
<li>
<a href="https://moderndive.com/">ModernDive</a>
</li>
</ul>
<p>
Many others created and shared amazing content during the year, so sorry I could not mention everyone!
</p>
<p>
Happy new year to all and thank you for the ongoing support!
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-12-30-year_review.html</guid>
  <pubDate>Wed, 30 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>(Half) Lies, (half) truths and (half) statistics</title>
  <link>https://b-rodrigues.github.io/posts/2020-12-12-ethics_statistics.html</link>
  <description><![CDATA[ 




<script src="../assets/rmarkdown-libs/header-attrs/header-attrs.js"></script>
<link href="../assets/rmarkdown-libs/anchor-sections/anchor-sections.css" rel="stylesheet">
<script src="../assets/rmarkdown-libs/anchor-sections/anchor-sections.js"></script>
<script src="../assets/rmarkdown-libs/htmlwidgets/htmlwidgets.js"></script>
<script src="../assets/rmarkdown-libs/d3/d3.min.js"></script>
<script src="../assets/rmarkdown-libs/d3-lasso/d3-lasso.min.js"></script>
<link href="../assets/rmarkdown-libs/ggiraphjs/styles.css" rel="stylesheet">
<script src="../assets/rmarkdown-libs/ggiraphjs/ggiraphjs.min.js"></script>
<script src="../assets/rmarkdown-libs/girafe-binding/girafe.js"></script>
<div style="text-align:center;">
<p>
<a href=""> <img src="https://b-rodrigues.github.io/assets/img/simpson.gif" title="Sometimes, simple does not mean trivial, but many confuse the two." width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<p>
<em>Note: if you’re reading this and images are not showing, visit the original post on my blog. The blog post contains interactive plots which help in understanding the point I’m making.</em>
</p>
<p>
I’ve recently come across this graph (on Twitter) from the Economist:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/economist_safe_vaccines.png" width="80%" height="auto">
</p>
<p>
You can read the article <a href="https://archive.is/EcdNZ">here</a> (archived for posterity). There are many things wrong with this chart. First of all, the economist is fitting a linear regression to some data points, and does not provide anything else to the reader, namely the regression coefficients, their standard errors, and the R². I know already that some readers will disagree, thinking something along the lines of “But Bruno, come on, this is only to show that’s there a negative correlation between GDP per capita and trust in vaccines! The readers don’t need to be bothered with these complex concepts. This is just an illustration, and it’s good enough.”
</p>
<p>
WRONG.
</p>
<p>
Look, I’m all for good enough. That’s very likely going to be my epitaph. But sometimes, you can’t simplify things so much that they’re not only misleading, but lies. In this case here, the relationship between GDP per capita and trust in vaccines, if there is any, is probably highly nonlinear, and very difficult to pinpoint with any degree of accuracy. But before going further, let’s get the data and replicate the graph. I’ll be adding the equation of the regression line as well as the R² to the plot. I won’t comment my code, since the point of this blog post is not to teach you how to do it, but of course, you’re very welcome to reproduce the analysis.
</p>
<p>
You can download the data <a href="https://wellcome.org/reports/wellcome-global-monitor/2018/appendix-country-level-data">here</a>, under “Full dataset for this chart”. You can also grab a csv version <a href="https://gist.githubusercontent.com/b-rodrigues/388f6309a462c9ccbdf00f32ac9055cb/raw/92962f08f9e23b9a8586045291795f4ab21ad053/wgm2018.csv">here</a>.
</p>
<details>
<summary>
Click to see the code
</summary>
<pre class="r"><code>library(tidyverse)
library(ggiraph)

dataset &lt;- data.table::fread("https://gist.githubusercontent.com/b-rodrigues/388f6309a462c9ccbdf00f32ac9055cb/raw/92962f08f9e23b9a8586045291795f4ab21ad053/wgm2018.csv")

dataset &lt;- dataset %&gt;%
  filter(grepl("(GDP per capita)|(Q25)", question_statistic)) %&gt;%
  mutate(response_type = ifelse(response_type == "", "GDP per capita", response_type)) %&gt;%
  filter(grepl("(National Total)|(GDP)", response_type)) %&gt;%
  mutate(response_type = str_remove(response_type, "National Total: ")) %&gt;%
  select(country_name, response = response_type, value = result_percent) %&gt;%
  mutate(gdp_per_capita = ifelse(grepl("GDP", response), value, NA)) %&gt;% 
  fill(gdp_per_capita, .direction = "down") %&gt;%
  filter(!grepl("GDP", response))  %&gt;%
  mutate(gdp_per_capita = as.numeric(gdp_per_capita),
         value = as.numeric(value),
         l_gdp = log(gdp_per_capita))</code></pre>
<pre class="r"><code>plot_data &lt;- dataset %&gt;%
  mutate(agree = ifelse(grepl(" agree$", response), "safe", "not_safe")) %&gt;%  
  group_by(country_name, l_gdp, agree) %&gt;% 
  summarise(value = sum(value)) %&gt;%
  filter(agree == "safe")</code></pre>
<pre><code>## `summarise()` regrouping output by 'country_name', 'l_gdp' (override with `.groups` argument)</code></pre>
<pre class="r"><code>lin_mod &lt;- lm(value ~ l_gdp, data = plot_data)

lin_mod_coefs &lt;- coefficients(lin_mod)
lin_mod_se &lt;- sqrt(diag(vcov(lin_mod)))

regression_line_result &lt;- paste0("value = ",
       round(lin_mod_coefs[1], 2),
       "[",
       round(lin_mod_se[1], 2),
       "]",
       round(lin_mod_coefs[2], 2),
       "[",
       round(lin_mod_se[2], 2),
       "]",
       "*l_gdp",
       ",\n R2 = ",
       round(summary(lin_mod)$r.squared, 2))

my_plot &lt;- plot_data %&gt;%
  ggplot(aes(y = value, x = l_gdp)) +
  geom_point_interactive(aes(tooltip = country_name), colour = "orange") +
  #geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  #ggrepel::geom_label_repel(aes(label = country_name)) +
  geom_text(y = 35, x = 8,
            label = regression_line_result,
            colour = "white",
            size = 3) +
  brotools::theme_blog()</code></pre>
</details>
<p>
If you look at the code above, you’ll see that I’m doing a bunch of stuff to reproduce the graph. Let’s take a look at it (you can mouse over the points to see the country names over the labels):
</p>
<pre class="r"><code>girafe(ggobj = my_plot, width_svg = 8)</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<div id="htmlwidget-1" class="girafe html-widget" style="width:672px;height:480px;">

</div>
<script type="application/json" data-for="htmlwidget-1">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621\" viewBox=\"0 0 576.00 360.00\">\n  <g>\n    <defs>\n      <clipPath id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_1\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_1\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_1)\" fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-width=\"0.75\" stroke=\"#FFFFFF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <defs>\n      <clipPath id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_2\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_2\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_2)\" fill=\"#272B30\" fill-opacity=\"1\" stroke-width=\"1.06698\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <defs>\n      <clipPath id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3\">\n        <rect x=\"40.25\" y=\"5.48\" width=\"530.27\" height=\"322.82\"/>\n      <\/clipPath>\n    <\/defs>\n    <polyline points=\"40.25,309.31 570.52,309.31\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_3\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,222.99 570.52,222.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_4\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,136.68 570.52,136.68\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_5\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,50.36 570.52,50.36\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_6\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"54.78,328.30 54.78,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_7\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"152.14,328.30 152.14,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_8\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"249.50,328.30 249.50,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_9\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"346.86,328.30 346.86,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_10\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"444.22,328.30 444.22,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_11\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"541.58,328.30 541.58,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_12\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,266.15 570.52,266.15\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_13\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,179.84 570.52,179.84\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_14\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,93.52 570.52,93.52\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_15\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,7.21 570.52,7.21\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_16\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"103.46,328.30 103.46,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_17\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"200.82,328.30 200.82,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_18\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"298.18,328.30 298.18,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_19\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"395.54,328.30 395.54,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_20\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"492.90,328.30 492.90,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_21\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <circle cx=\"160.60\" cy=\"33.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_22\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Afghanistan\"/>\n    <circle cx=\"343.78\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_23\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Albania\"/>\n    <circle cx=\"359.81\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_24\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Algeria\"/>\n    <circle cx=\"389.89\" cy=\"58.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_25\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Argentina\"/>\n    <circle cx=\"315.17\" cy=\"257.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_26\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Armenia\"/>\n    <circle cx=\"472.31\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_27\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Australia\"/>\n    <circle cx=\"479.91\" cy=\"201.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_28\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Austria\"/>\n    <circle cx=\"372.57\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_29\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Azerbaijan\"/>\n    <circle cx=\"226.20\" cy=\"20.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_30\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bangladesh\"/>\n    <circle cx=\"380.31\" cy=\"283.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_31\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Belarus\"/>\n    <circle cx=\"471.05\" cy=\"171.20\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_32\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Belgium\"/>\n    <circle cx=\"174.37\" cy=\"84.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_33\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Benin\"/>\n    <circle cx=\"291.42\" cy=\"115.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_34\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bolivia\"/>\n    <circle cx=\"345.01\" cy=\"136.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_35\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bosnia Herzegovina\"/>\n    <circle cx=\"370.25\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_36\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Botswana\"/>\n    <circle cx=\"361.22\" cy=\"93.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_37\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Brazil\"/>\n    <circle cx=\"390.65\" cy=\"266.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_38\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bulgaria\"/>\n    <circle cx=\"155.01\" cy=\"145.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_39\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Burkina Faso\"/>\n    <circle cx=\"64.36\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_40\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Burundi\"/>\n    <circle cx=\"229.67\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_41\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cambodia\"/>\n    <circle cx=\"222.24\" cy=\"106.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_42\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cameroon\"/>\n    <circle cx=\"468.72\" cy=\"110.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_43\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Canada\"/>\n    <circle cx=\"159.06\" cy=\"89.20\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_44\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Chad\"/>\n    <circle cx=\"406.44\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_45\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Chile\"/>\n    <circle cx=\"369.21\" cy=\"123.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_46\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"China\"/>\n    <circle cx=\"354.65\" cy=\"84.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_47\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Colombia\"/>\n    <circle cx=\"192.80\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_48\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Comoros\"/>\n    <circle cx=\"259.43\" cy=\"115.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_49\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Congo, Rep.\"/>\n    <circle cx=\"370.74\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_50\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Costa Rica\"/>\n    <circle cx=\"412.76\" cy=\"192.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_51\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Croatia\"/>\n    <circle cx=\"439.24\" cy=\"171.20\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_52\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cyprus\"/>\n    <circle cx=\"444.25\" cy=\"162.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_53\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Czech Republic\"/>\n    <circle cx=\"477.97\" cy=\"140.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_54\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Denmark\"/>\n    <circle cx=\"364.60\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_55\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Dominican Republic\"/>\n    <circle cx=\"333.00\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_56\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ecuador\"/>\n    <circle cx=\"332.97\" cy=\"20.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_57\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Egypt\"/>\n    <circle cx=\"297.01\" cy=\"102.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_58\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"El Salvador\"/>\n    <circle cx=\"431.12\" cy=\"218.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_59\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Estonia\"/>\n    <circle cx=\"431.12\" cy=\"110.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_60\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Eswatini\"/>\n    <circle cx=\"156.93\" cy=\"24.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_61\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ethiopia\"/>\n    <circle cx=\"464.81\" cy=\"123.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_62\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Finland\"/>\n    <circle cx=\"460.33\" cy=\"235.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_63\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"France\"/>\n    <circle cx=\"376.29\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_64\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Gabon\"/>\n    <circle cx=\"325.09\" cy=\"136.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_65\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Georgia\"/>\n    <circle cx=\"476.59\" cy=\"149.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_66\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Germany\"/>\n    <circle cx=\"240.75\" cy=\"58.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_67\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ghana\"/>\n    <circle cx=\"417.51\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_68\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Greece\"/>\n    <circle cx=\"298.75\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_69\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Guatemala\"/>\n    <circle cx=\"173.10\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_70\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Guinea\"/>\n    <circle cx=\"152.51\" cy=\"132.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_71\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Haiti\"/>\n    <circle cx=\"250.91\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_72\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Honduras\"/>\n    <circle cx=\"419.28\" cy=\"106.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_73\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Hungary\"/>\n    <circle cx=\"481.31\" cy=\"175.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_74\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iceland\"/>\n    <circle cx=\"284.75\" cy=\"28.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_75\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"India\"/>\n    <circle cx=\"338.68\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_76\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Indonesia\"/>\n    <circle cx=\"390.15\" cy=\"140.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_77\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iran\"/>\n    <circle cx=\"369.74\" cy=\"50.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_78\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iraq\"/>\n    <circle cx=\"515.67\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_79\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ireland\"/>\n    <circle cx=\"449.30\" cy=\"115.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_80\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Israel\"/>\n    <circle cx=\"452.22\" cy=\"110.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_81\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Italy\"/>\n    <circle cx=\"227.89\" cy=\"106.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_82\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ivory Coast\"/>\n    <circle cx=\"461.30\" cy=\"292.04\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_83\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Japan\"/>\n    <circle cx=\"310.05\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_84\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Jordan\"/>\n    <circle cx=\"413.30\" cy=\"240.26\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_85\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kazakhstan\"/>\n    <circle cx=\"210.29\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_86\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kenya\"/>\n    <circle cx=\"210.29\" cy=\"132.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_87\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kosovo\"/>\n    <circle cx=\"510.78\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_88\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kuwait\"/>\n    <circle cx=\"222.53\" cy=\"145.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_89\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kyrgyzstan\"/>\n    <circle cx=\"284.26\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_90\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Laos\"/>\n    <circle cx=\"419.59\" cy=\"244.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_91\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Latvia\"/>\n    <circle cx=\"354.71\" cy=\"76.26\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_92\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Lebanon\"/>\n    <circle cx=\"118.71\" cy=\"24.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_93\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Liberia\"/>\n    <circle cx=\"384.33\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_94\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Libya\"/>\n    <circle cx=\"434.89\" cy=\"214.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_95\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Lithuania\"/>\n    <circle cx=\"546.42\" cy=\"132.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_96\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Luxembourg\"/>\n    <circle cx=\"360.00\" cy=\"205.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_97\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Macedonia\"/>\n    <circle cx=\"137.46\" cy=\"71.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_98\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Madagascar\"/>\n    <circle cx=\"112.41\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_99\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malawi\"/>\n    <circle cx=\"423.81\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_100\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malaysia\"/>\n    <circle cx=\"171.84\" cy=\"153.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_101\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mali\"/>\n    <circle cx=\"456.11\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_102\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malta\"/>\n    <circle cx=\"228.22\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_103\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mauritania\"/>\n    <circle cx=\"396.78\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_104\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mauritius\"/>\n    <circle cx=\"377.35\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_105\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mexico\"/>\n    <circle cx=\"263.89\" cy=\"248.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_106\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Moldova\"/>\n    <circle cx=\"343.59\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_107\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mongolia\"/>\n    <circle cx=\"382.94\" cy=\"244.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_108\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Montenegro\"/>\n    <circle cx=\"299.55\" cy=\"93.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_109\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Morocco\"/>\n    <circle cx=\"116.02\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_110\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mozambique\"/>\n    <circle cx=\"271.50\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_111\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Myanmar\"/>\n    <circle cx=\"322.93\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_112\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Namibia\"/>\n    <circle cx=\"191.06\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_113\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nepal\"/>\n    <circle cx=\"480.11\" cy=\"149.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_114\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Netherlands\"/>\n    <circle cx=\"456.29\" cy=\"128.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_115\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"New Zealand\"/>\n    <circle cx=\"266.33\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_116\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nicaragua\"/>\n    <circle cx=\"96.08\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_117\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Niger\"/>\n    <circle cx=\"266.87\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_118\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nigeria\"/>\n    <circle cx=\"266.87\" cy=\"58.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_119\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Northern Cyprus\"/>\n    <circle cx=\"495.37\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_120\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Norway\"/>\n    <circle cx=\"260.94\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_121\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Pakistan\"/>\n    <circle cx=\"248.92\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_122\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Palestine\"/>\n    <circle cx=\"405.78\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_123\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Panama\"/>\n    <circle cx=\"344.81\" cy=\"102.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_124\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Paraguay\"/>\n    <circle cx=\"347.40\" cy=\"136.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_125\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Peru\"/>\n    <circle cx=\"301.02\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_126\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Philippines\"/>\n    <circle cx=\"422.73\" cy=\"102.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_127\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Poland\"/>\n    <circle cx=\"430.90\" cy=\"89.20\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_128\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Portugal\"/>\n    <circle cx=\"414.12\" cy=\"158.26\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_129\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Romania\"/>\n    <circle cx=\"409.92\" cy=\"248.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_130\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Russia\"/>\n    <circle cx=\"163.85\" cy=\"33.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_131\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Rwanda\"/>\n    <circle cx=\"482.45\" cy=\"71.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_132\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Saudi Arabia\"/>\n    <circle cx=\"215.05\" cy=\"123.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_133\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Senegal\"/>\n    <circle cx=\"360.88\" cy=\"153.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_134\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Serbia\"/>\n    <circle cx=\"135.70\" cy=\"37.42\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_135\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sierra Leone\"/>\n    <circle cx=\"536.72\" cy=\"110.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_136\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Singapore\"/>\n    <circle cx=\"430.73\" cy=\"123.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_137\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Slovakia\"/>\n    <circle cx=\"440.26\" cy=\"136.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_138\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Slovenia\"/>\n    <circle cx=\"347.86\" cy=\"84.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_139\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"South Africa\"/>\n    <circle cx=\"449.49\" cy=\"227.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_140\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"South Korea\"/>\n    <circle cx=\"448.63\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_141\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Spain\"/>\n    <circle cx=\"342.96\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_142\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sri Lanka\"/>\n    <circle cx=\"475.76\" cy=\"140.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_143\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sweden\"/>\n    <circle cx=\"500.47\" cy=\"210.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_144\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Switzerland\"/>\n    <circle cx=\"207.57\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_145\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tajikistan\"/>\n    <circle cx=\"199.67\" cy=\"24.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_146\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tanzania\"/>\n    <circle cx=\"375.19\" cy=\"37.42\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_147\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Thailand\"/>\n    <circle cx=\"145.88\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_148\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"The Gambia\"/>\n    <circle cx=\"143.82\" cy=\"218.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_149\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Togo\"/>\n    <circle cx=\"335.68\" cy=\"106.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_150\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tunisia\"/>\n    <circle cx=\"413.61\" cy=\"84.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_151\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Turkey\"/>\n    <circle cx=\"375.85\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_152\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Turkmenistan\"/>\n    <circle cx=\"513.36\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_153\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"UAE\"/>\n    <circle cx=\"155.12\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_154\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uganda\"/>\n    <circle cx=\"461.28\" cy=\"115.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_155\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"UK\"/>\n    <circle cx=\"304.73\" cy=\"313.62\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_156\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ukraine\"/>\n    <circle cx=\"397.88\" cy=\"128.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_157\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uruguay\"/>\n    <circle cx=\"492.34\" cy=\"128.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_158\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"USA\"/>\n    <circle cx=\"282.04\" cy=\"37.42\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_159\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uzbekistan\"/>\n    <circle cx=\"373.92\" cy=\"37.42\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_160\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Venezuela\"/>\n    <circle cx=\"280.76\" cy=\"132.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_161\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Vietnam\"/>\n    <circle cx=\"187.54\" cy=\"76.26\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_162\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Yemen\"/>\n    <circle cx=\"230.03\" cy=\"93.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_163\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Zambia\"/>\n    <circle cx=\"180.87\" cy=\"71.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_164\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Zimbabwe\"/>\n    <polyline points=\"64.36,53.13 70.46,54.47 76.56,55.80 82.66,57.14 88.77,58.48 94.87,59.82 100.97,61.16 107.07,62.50 113.17,63.84 119.28,65.18 125.38,66.52 131.48,67.86 137.58,69.20 143.68,70.54 149.79,71.88 155.89,73.22 161.99,74.56 168.09,75.90 174.19,77.24 180.30,78.58 186.40,79.92 192.50,81.26 198.60,82.60 204.70,83.93 210.81,85.27 216.91,86.61 223.01,87.95 229.11,89.29 235.21,90.63 241.32,91.97 247.42,93.31 253.52,94.65 259.62,95.99 265.72,97.33 271.83,98.67 277.93,100.01 284.03,101.35 290.13,102.69 296.23,104.03 302.34,105.37 308.44,106.71 314.54,108.05 320.64,109.39 326.74,110.73 332.85,112.07 338.95,113.40 345.05,114.74 351.15,116.08 357.25,117.42 363.36,118.76 369.46,120.10 375.56,121.44 381.66,122.78 387.76,124.12 393.87,125.46 399.97,126.80 406.07,128.14 412.17,129.48 418.27,130.82 424.38,132.16 430.48,133.50 436.58,134.84 442.68,136.18 448.79,137.52 454.89,138.86 460.99,140.20 467.09,141.53 473.19,142.87 479.30,144.21 485.40,145.55 491.50,146.89 497.60,148.23 503.70,149.57 509.81,150.91 515.91,152.25 522.01,153.59 528.11,154.93 534.21,156.27 540.32,157.61 546.42,158.95\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_165\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"2.13396\" stroke=\"#3366FF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_166\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_167\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_168\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_169\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_170\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_171\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_172\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_173\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_174\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_175\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_176\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_177\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_178\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_179\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_180\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_181\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_182\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_183\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_184\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_185\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_186\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_187\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_188\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_189\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_190\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_191\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_192\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_193\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_194\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_195\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_196\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_197\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_198\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_199\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_200\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_201\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_202\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_203\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_204\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_205\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_206\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_207\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_208\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_209\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_210\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_211\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_212\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_213\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_214\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_215\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_216\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_217\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_218\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_219\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_220\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_221\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_222\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_223\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_224\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_225\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_226\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_227\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_228\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_229\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_230\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_231\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_232\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_233\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_234\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_235\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_236\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_237\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_238\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_239\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_240\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_241\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_242\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_243\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_244\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_245\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_246\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_247\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_248\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_249\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_250\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_251\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_252\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_253\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_254\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_255\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_256\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_257\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_258\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_259\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_260\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_261\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_262\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_263\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_264\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_265\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_266\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_267\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_268\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_269\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_270\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_271\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_272\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_273\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_274\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_275\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_276\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_277\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_278\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_279\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_280\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_281\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_282\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_283\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_284\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_285\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_286\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_287\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_288\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_289\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_290\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_291\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_292\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_293\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_294\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_295\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_296\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_297\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_298\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_299\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_300\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_301\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_302\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_303\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_304\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_305\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_306\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_307\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_308\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_309\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_310\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_311\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_312\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_313\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_314\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_315\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_316\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_317\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_318\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_319\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_320\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_321\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_322\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_323\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_324\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_325\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_326\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_327\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_328\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_329\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_330\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_331\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_332\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_333\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_334\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_335\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_336\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_337\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_338\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_339\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_340\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_341\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_342\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_343\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_344\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_345\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_346\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_347\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_348\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_349\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_350\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_351\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_352\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_353\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_354\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_355\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_356\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_357\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_358\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_359\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_360\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_361\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_362\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_363\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_364\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_365\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_366\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_367\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_368\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_369\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_370\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_371\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_372\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_373\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_374\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_375\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_376\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_377\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_378\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_379\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_380\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_381\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_382\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_383\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_384\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_385\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_386\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_387\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_388\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_389\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_390\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_391\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_392\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_393\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_394\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_395\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_396\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_397\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_398\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_399\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_400\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_401\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_402\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_403\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_404\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_405\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_406\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_407\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_408\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_409\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_410\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_411\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_412\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_413\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_414\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_415\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_416\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_417\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_418\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_419\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_420\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_421\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_422\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_423\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_424\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_425\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_426\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_427\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_428\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_429\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_430\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_431\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_432\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_433\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_434\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_435\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_436\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_437\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_438\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_439\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_440\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_441\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_442\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_443\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_444\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_445\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_446\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_447\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_448\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_449\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_450\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_451\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_452\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_453\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <defs>\n      <clipPath id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"24.13\" y=\"269.36\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_454\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">40<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"24.13\" y=\"183.04\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_455\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">60<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"24.13\" y=\"96.73\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_456\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">80<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"18.53\" y=\"10.41\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_457\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">100<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"100.66\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_458\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">7<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"198.02\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_459\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">8<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"295.38\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_460\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">9<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"389.94\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_461\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">10<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"487.30\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_462\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">11<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"290.64\" y=\"352.23\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_463\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">l_gdp<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text transform=\"translate(13.50,181.91) rotate(-90)\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_464\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value<\/text>\n    <\/g>\n  <\/g>\n<\/svg>\n","js":null,"uid":"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621","ratio":1.6,"settings":{"tooltip":{"css":" .tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px ; position:absolute;pointer-events:none;z-index:999;}\n","offx":10,"offy":0,"use_cursor_pos":true,"opacity":0.9,"usefill":false,"usestroke":false,"delay":{"over":200,"out":500}},"hover":{"css":" .hover_SVGID_ { fill:orange;stroke:gray; }\n"},"hoverkey":{"css":" .hover_key_SVGID_ { stroke:red; }\n"},"hovertheme":{"css":" .hover_theme_SVGID_ { fill:green; }\n"},"zoom":{"min":1,"max":1},"capture":{"css":" .selected_SVGID_ { fill:red;stroke:gray; }\n","type":"multiple","only_shiny":true,"selected":[]},"capturekey":{"css":" .selected_key_SVGID_ { stroke:gray; }\n","type":"single","only_shiny":true,"selected":[]},"capturetheme":{"css":" .selected_theme_SVGID_ { stroke:gray; }\n","type":"single","only_shiny":true,"selected":[]},"toolbar":{"position":"topright","saveaspng":true},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
<p>
So what’s actually going on? <code>value</code> is the percentage of people, in a country, that believe vaccines are safe. <code>l_gdp</code> is the logarithm of GDP per capita in that same country. Looking at this, many people will conclude that the richer the country, the less people trust vaccines. This is the story the Economist is telling its readers. This is a simple explanation, and it’s backed by numbers and stats, so it must be correct. Right?
</p>
<p>
WRONG.
</p>
<p>
Let’s take a look at the regression equation (standard errors in square brackets):
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5B%20=%20122.04%5B9.3%5D%20-%204.95%5B0.98%5D%20*%20%5D">
</p>
<p>
Both coefficients are significant at the usual 5% level (the intercept is interesting though, as it implies a value greater than 100 for very low levels of log of GDP). This gives comfort to the person believing the basic story.
</p>
<p>
But take a look at the R². It’s 0.15. That means that the linear regression will be able to predict up to 15% of the variance in the dependent variable using the log of GDP per capita as a predictor. That already should sound all sorts of alarms in your head (if that scatter plot that looks almost like random noise didn’t already). However, I’m not done yet.
</p>
<p>
What if you wanted to do something a little bit more elaborate? For instance, let’s say that you’d like to see if infant mortality plays a role? After all, you could argue that in very poor countries, where people seem to trust vaccines very much, infant mortality is very high. Vaccinating your kid seems like a no-brainer when the alternative is almost certain death from any of the many diseases afflicting children (don’t get me wrong here, vaccinating children against deadly diseases is a no-brainer anywhere on the planet). Maybe people in wealthier countries don’t ascribe low infant mortality to vaccines, but to other things such as access to clean water, good infrastructure etc, and thus tend to downplay the role of vaccines. Who knows. But let’s dig deeper and get some more data.
</p>
<p>
For this I’m using another data set that gives the infant mortality rate in 2018 for most of the countries from the original analysis. I got that data from the Worldbank, and you can easily download the csv from <a href="https://gist.github.com/b-rodrigues/33f64ce6910e6ec4df9d586eacf335c2">here</a>.
</p>
<p>
Below, I’m downloading the data and joining that to my original dataset. Then I’m computing a rank based on the median infant mortality rate. Countries that have an infant mortality rate below the median are classified as “low infant mortality rate” countries and countries that have an infant mortality rate above the median infant mortality rate are classified as “high infant mortality rate” countries. I then redo the same plot as before, but I’m computing one regression line per group of countries.
</p>
<details>
<summary>
Click to see the code
</summary>
<pre class="r"><code>infant_mortality_rate &lt;- data.table::fread("https://gist.githubusercontent.com/b-rodrigues/33f64ce6910e6ec4df9d586eacf335c2/raw/01df8977edd3924a3687f783e7e5a134d5f3fd87/infant_mortality_rate_2018.csv") %&gt;%
  janitor::clean_names() %&gt;%
  select(country_name, imr = x2018_yr2018)

plot_data_simpson &lt;- plot_data %&gt;%
  ungroup() %&gt;%  
  left_join(infant_mortality_rate) %&gt;%
  mutate(imr = as.numeric(imr)) %&gt;%  
  filter(!is.na(imr)) %&gt;%  
  mutate(rank = ntile(imr, n = 2))  %&gt;%
  mutate(rank = ifelse(rank == 2,
                       "High infant mortality rate",
                       "Low infant mortality rate"))</code></pre>
<pre><code>## Joining, by = "country_name"</code></pre>
<pre class="r"><code>my_plot &lt;- plot_data_simpson %&gt;%
  ggplot(aes(y = value, x = l_gdp)) +
  geom_point_interactive(aes(tooltip = country_name, colour = rank)) +
  geom_smooth(aes(group = rank), method = "lm") +
  brotools::theme_blog()</code></pre>
</details>
<pre class="r"><code>girafe(ggobj = my_plot, width_svg = 8)</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<div id="htmlwidget-2" class="girafe html-widget" style="width:672px;height:480px;">

</div>
<script type="application/json" data-for="htmlwidget-2">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b\" viewBox=\"0 0 576.00 360.00\">\n  <g>\n    <defs>\n      <clipPath id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_1\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_1\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_1)\" fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-width=\"0.75\" stroke=\"#FFFFFF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <defs>\n      <clipPath id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_2\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_2\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_2)\" fill=\"#272B30\" fill-opacity=\"1\" stroke-width=\"1.06698\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <defs>\n      <clipPath id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3\">\n        <rect x=\"40.25\" y=\"5.48\" width=\"530.27\" height=\"283.62\"/>\n      <\/clipPath>\n    <\/defs>\n    <polyline points=\"40.25,272.42 570.52,272.42\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_3\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,196.58 570.52,196.58\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_4\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,120.75 570.52,120.75\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_5\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,44.91 570.52,44.91\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_6\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"54.78,289.10 54.78,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_7\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"152.14,289.10 152.14,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_8\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"249.50,289.10 249.50,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_9\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"346.86,289.10 346.86,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_10\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"444.22,289.10 444.22,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_11\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"541.58,289.10 541.58,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_12\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,234.50 570.52,234.50\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_13\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,158.66 570.52,158.66\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_14\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,82.83 570.52,82.83\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_15\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,7.00 570.52,7.00\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_16\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"103.46,289.10 103.46,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_17\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"200.82,289.10 200.82,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_18\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"298.18,289.10 298.18,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_19\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"395.54,289.10 395.54,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_20\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"492.90,289.10 492.90,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_21\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <circle cx=\"160.60\" cy=\"29.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_22\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Afghanistan\"/>\n    <circle cx=\"343.78\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_23\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Albania\"/>\n    <circle cx=\"359.81\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_24\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Algeria\"/>\n    <circle cx=\"389.89\" cy=\"52.50\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_25\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Argentina\"/>\n    <circle cx=\"315.17\" cy=\"226.91\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_26\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Armenia\"/>\n    <circle cx=\"472.31\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_27\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Australia\"/>\n    <circle cx=\"479.91\" cy=\"177.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_28\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Austria\"/>\n    <circle cx=\"372.57\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_29\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Azerbaijan\"/>\n    <circle cx=\"226.20\" cy=\"18.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_30\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bangladesh\"/>\n    <circle cx=\"380.31\" cy=\"249.66\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_31\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Belarus\"/>\n    <circle cx=\"471.05\" cy=\"151.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_32\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Belgium\"/>\n    <circle cx=\"174.37\" cy=\"75.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_33\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Benin\"/>\n    <circle cx=\"291.42\" cy=\"101.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_34\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bolivia\"/>\n    <circle cx=\"345.01\" cy=\"120.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_35\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bosnia Herzegovina\"/>\n    <circle cx=\"370.25\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_36\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Botswana\"/>\n    <circle cx=\"361.22\" cy=\"82.83\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_37\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Brazil\"/>\n    <circle cx=\"390.65\" cy=\"234.50\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_38\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bulgaria\"/>\n    <circle cx=\"155.01\" cy=\"128.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_39\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Burkina Faso\"/>\n    <circle cx=\"64.36\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_40\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Burundi\"/>\n    <circle cx=\"229.67\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_41\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cambodia\"/>\n    <circle cx=\"222.24\" cy=\"94.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_42\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cameroon\"/>\n    <circle cx=\"468.72\" cy=\"98.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_43\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Canada\"/>\n    <circle cx=\"159.06\" cy=\"79.04\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_44\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Chad\"/>\n    <circle cx=\"406.44\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_45\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Chile\"/>\n    <circle cx=\"369.21\" cy=\"109.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_46\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"China\"/>\n    <circle cx=\"354.65\" cy=\"75.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_47\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Colombia\"/>\n    <circle cx=\"192.80\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_48\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Comoros\"/>\n    <circle cx=\"259.43\" cy=\"101.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_49\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Congo, Rep.\"/>\n    <circle cx=\"370.74\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_50\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Costa Rica\"/>\n    <circle cx=\"412.76\" cy=\"170.04\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_51\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Croatia\"/>\n    <circle cx=\"439.24\" cy=\"151.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_52\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cyprus\"/>\n    <circle cx=\"444.25\" cy=\"143.50\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_53\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Czech Republic\"/>\n    <circle cx=\"477.97\" cy=\"124.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_54\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Denmark\"/>\n    <circle cx=\"364.60\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_55\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Dominican Republic\"/>\n    <circle cx=\"333.00\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_56\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ecuador\"/>\n    <circle cx=\"332.97\" cy=\"18.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_57\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Egypt\"/>\n    <circle cx=\"297.01\" cy=\"90.41\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_58\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"El Salvador\"/>\n    <circle cx=\"431.12\" cy=\"192.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_59\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Estonia\"/>\n    <circle cx=\"431.12\" cy=\"98.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_60\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Eswatini\"/>\n    <circle cx=\"156.93\" cy=\"22.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_61\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ethiopia\"/>\n    <circle cx=\"464.81\" cy=\"109.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_62\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Finland\"/>\n    <circle cx=\"460.33\" cy=\"207.96\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_63\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"France\"/>\n    <circle cx=\"376.29\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_64\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Gabon\"/>\n    <circle cx=\"325.09\" cy=\"120.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_65\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Georgia\"/>\n    <circle cx=\"476.59\" cy=\"132.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_66\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Germany\"/>\n    <circle cx=\"240.75\" cy=\"52.50\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_67\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ghana\"/>\n    <circle cx=\"417.51\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_68\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Greece\"/>\n    <circle cx=\"298.75\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_69\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Guatemala\"/>\n    <circle cx=\"173.10\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_70\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Guinea\"/>\n    <circle cx=\"152.51\" cy=\"116.96\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_71\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Haiti\"/>\n    <circle cx=\"250.91\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_72\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Honduras\"/>\n    <circle cx=\"419.28\" cy=\"94.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_73\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Hungary\"/>\n    <circle cx=\"481.31\" cy=\"154.87\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_74\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iceland\"/>\n    <circle cx=\"284.75\" cy=\"25.95\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_75\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"India\"/>\n    <circle cx=\"338.68\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_76\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Indonesia\"/>\n    <circle cx=\"390.15\" cy=\"124.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_77\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iran\"/>\n    <circle cx=\"369.74\" cy=\"44.91\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_78\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iraq\"/>\n    <circle cx=\"515.67\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_79\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ireland\"/>\n    <circle cx=\"449.30\" cy=\"101.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_80\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Israel\"/>\n    <circle cx=\"452.22\" cy=\"98.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_81\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Italy\"/>\n    <circle cx=\"227.89\" cy=\"94.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_82\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ivory Coast\"/>\n    <circle cx=\"461.30\" cy=\"257.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_83\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Japan\"/>\n    <circle cx=\"310.05\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_84\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Jordan\"/>\n    <circle cx=\"413.30\" cy=\"211.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_85\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kazakhstan\"/>\n    <circle cx=\"210.29\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_86\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kenya\"/>\n    <circle cx=\"510.78\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_87\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kuwait\"/>\n    <circle cx=\"222.53\" cy=\"128.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_88\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kyrgyzstan\"/>\n    <circle cx=\"284.26\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_89\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Laos\"/>\n    <circle cx=\"419.59\" cy=\"215.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_90\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Latvia\"/>\n    <circle cx=\"354.71\" cy=\"67.66\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_91\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Lebanon\"/>\n    <circle cx=\"118.71\" cy=\"22.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_92\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Liberia\"/>\n    <circle cx=\"384.33\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_93\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Libya\"/>\n    <circle cx=\"434.89\" cy=\"189.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_94\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Lithuania\"/>\n    <circle cx=\"546.42\" cy=\"116.96\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_95\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Luxembourg\"/>\n    <circle cx=\"360.00\" cy=\"181.41\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_96\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Macedonia\"/>\n    <circle cx=\"137.46\" cy=\"63.87\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_97\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Madagascar\"/>\n    <circle cx=\"112.41\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_98\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malawi\"/>\n    <circle cx=\"423.81\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_99\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malaysia\"/>\n    <circle cx=\"171.84\" cy=\"135.91\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_100\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mali\"/>\n    <circle cx=\"456.11\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_101\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malta\"/>\n    <circle cx=\"228.22\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_102\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mauritania\"/>\n    <circle cx=\"396.78\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_103\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mauritius\"/>\n    <circle cx=\"377.35\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_104\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mexico\"/>\n    <circle cx=\"263.89\" cy=\"219.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_105\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Moldova\"/>\n    <circle cx=\"343.59\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_106\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mongolia\"/>\n    <circle cx=\"382.94\" cy=\"215.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_107\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Montenegro\"/>\n    <circle cx=\"299.55\" cy=\"82.83\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_108\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Morocco\"/>\n    <circle cx=\"116.02\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_109\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mozambique\"/>\n    <circle cx=\"271.50\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_110\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Myanmar\"/>\n    <circle cx=\"322.93\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_111\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Namibia\"/>\n    <circle cx=\"191.06\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_112\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nepal\"/>\n    <circle cx=\"480.11\" cy=\"132.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_113\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Netherlands\"/>\n    <circle cx=\"456.29\" cy=\"113.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_114\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"New Zealand\"/>\n    <circle cx=\"266.33\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_115\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nicaragua\"/>\n    <circle cx=\"96.08\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_116\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Niger\"/>\n    <circle cx=\"266.87\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_117\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nigeria\"/>\n    <circle cx=\"495.37\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_118\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Norway\"/>\n    <circle cx=\"260.94\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_119\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Pakistan\"/>\n    <circle cx=\"248.92\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_120\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Palestine\"/>\n    <circle cx=\"405.78\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_121\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Panama\"/>\n    <circle cx=\"344.81\" cy=\"90.41\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_122\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Paraguay\"/>\n    <circle cx=\"347.40\" cy=\"120.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_123\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Peru\"/>\n    <circle cx=\"301.02\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_124\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Philippines\"/>\n    <circle cx=\"422.73\" cy=\"90.41\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_125\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Poland\"/>\n    <circle cx=\"430.90\" cy=\"79.04\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_126\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Portugal\"/>\n    <circle cx=\"414.12\" cy=\"139.71\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_127\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Romania\"/>\n    <circle cx=\"409.92\" cy=\"219.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_128\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Russia\"/>\n    <circle cx=\"163.85\" cy=\"29.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_129\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Rwanda\"/>\n    <circle cx=\"482.45\" cy=\"63.87\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_130\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Saudi Arabia\"/>\n    <circle cx=\"215.05\" cy=\"109.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_131\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Senegal\"/>\n    <circle cx=\"360.88\" cy=\"135.91\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_132\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Serbia\"/>\n    <circle cx=\"135.70\" cy=\"33.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_133\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sierra Leone\"/>\n    <circle cx=\"536.72\" cy=\"98.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_134\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Singapore\"/>\n    <circle cx=\"430.73\" cy=\"109.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_135\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Slovakia\"/>\n    <circle cx=\"440.26\" cy=\"120.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_136\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Slovenia\"/>\n    <circle cx=\"347.86\" cy=\"75.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_137\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"South Africa\"/>\n    <circle cx=\"449.49\" cy=\"200.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_138\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"South Korea\"/>\n    <circle cx=\"448.63\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_139\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Spain\"/>\n    <circle cx=\"342.96\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_140\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sri Lanka\"/>\n    <circle cx=\"475.76\" cy=\"124.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_141\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sweden\"/>\n    <circle cx=\"500.47\" cy=\"185.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_142\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Switzerland\"/>\n    <circle cx=\"207.57\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_143\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tajikistan\"/>\n    <circle cx=\"199.67\" cy=\"22.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_144\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tanzania\"/>\n    <circle cx=\"375.19\" cy=\"33.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_145\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Thailand\"/>\n    <circle cx=\"145.88\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_146\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"The Gambia\"/>\n    <circle cx=\"143.82\" cy=\"192.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_147\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Togo\"/>\n    <circle cx=\"335.68\" cy=\"94.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_148\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tunisia\"/>\n    <circle cx=\"413.61\" cy=\"75.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_149\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Turkey\"/>\n    <circle cx=\"375.85\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_150\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Turkmenistan\"/>\n    <circle cx=\"513.36\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_151\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"UAE\"/>\n    <circle cx=\"155.12\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_152\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uganda\"/>\n    <circle cx=\"461.28\" cy=\"101.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_153\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"UK\"/>\n    <circle cx=\"304.73\" cy=\"276.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_154\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ukraine\"/>\n    <circle cx=\"397.88\" cy=\"113.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_155\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uruguay\"/>\n    <circle cx=\"492.34\" cy=\"113.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_156\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"USA\"/>\n    <circle cx=\"282.04\" cy=\"33.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_157\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uzbekistan\"/>\n    <circle cx=\"373.92\" cy=\"33.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_158\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Venezuela\"/>\n    <circle cx=\"280.76\" cy=\"116.96\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_159\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Vietnam\"/>\n    <circle cx=\"187.54\" cy=\"67.66\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_160\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Yemen\"/>\n    <circle cx=\"230.03\" cy=\"82.83\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_161\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Zambia\"/>\n    <circle cx=\"180.87\" cy=\"63.87\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_162\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Zimbabwe\"/>\n    <polygon points=\"64.36,33.18 69.00,34.07 73.64,34.96 78.28,35.85 82.93,36.73 87.57,37.61 92.21,38.49 96.85,39.37 101.50,40.24 106.14,41.11 110.78,41.98 115.42,42.84 120.07,43.69 124.71,44.54 129.35,45.39 133.99,46.23 138.64,47.06 143.28,47.89 147.92,48.71 152.56,49.52 157.21,50.32 161.85,51.11 166.49,51.90 171.13,52.67 175.78,53.43 180.42,54.18 185.06,54.91 189.70,55.63 194.35,56.34 198.99,57.02 203.63,57.69 208.27,58.34 212.92,58.96 217.56,59.57 222.20,60.15 226.84,60.70 231.49,61.23 236.13,61.74 240.77,62.21 245.41,62.66 250.06,63.08 254.70,63.47 259.34,63.84 263.99,64.17 268.63,64.48 273.27,64.77 277.91,65.03 282.56,65.26 287.20,65.47 291.84,65.67 296.48,65.84 301.13,65.99 305.77,66.12 310.41,66.24 315.05,66.34 319.70,66.43 324.34,66.51 328.98,66.57 333.62,66.62 338.27,66.66 342.91,66.69 347.55,66.72 352.19,66.73 356.84,66.74 361.48,66.74 366.12,66.74 370.76,66.72 375.41,66.71 380.05,66.69 384.69,66.66 389.33,66.63 393.98,66.59 398.62,66.55 403.26,66.51 407.90,66.46 412.55,66.41 417.19,66.36 421.83,66.31 426.47,66.25 431.12,66.19 431.12,112.29 426.47,111.39 421.83,110.50 417.19,109.62 412.55,108.73 407.90,107.85 403.26,106.97 398.62,106.10 393.98,105.23 389.33,104.36 384.69,103.49 380.05,102.64 375.41,101.78 370.76,100.93 366.12,100.09 361.48,99.25 356.84,98.42 352.19,97.59 347.55,96.78 342.91,95.97 338.27,95.17 333.62,94.38 328.98,93.60 324.34,92.83 319.70,92.07 315.05,91.33 310.41,90.60 305.77,89.88 301.13,89.19 296.48,88.51 291.84,87.84 287.20,87.20 282.56,86.58 277.91,85.99 273.27,85.41 268.63,84.86 263.99,84.34 259.34,83.85 254.70,83.38 250.06,82.94 245.41,82.53 240.77,82.14 236.13,81.79 231.49,81.46 226.84,81.16 222.20,80.88 217.56,80.63 212.92,80.40 208.27,80.19 203.63,80.01 198.99,79.84 194.35,79.70 189.70,79.57 185.06,79.46 180.42,79.36 175.78,79.27 171.13,79.20 166.49,79.14 161.85,79.09 157.21,79.05 152.56,79.02 147.92,79.00 143.28,78.99 138.64,78.98 133.99,78.99 129.35,78.99 124.71,79.01 120.07,79.03 115.42,79.05 110.78,79.08 106.14,79.11 101.50,79.15 96.85,79.19 92.21,79.23 87.57,79.28 82.93,79.33 78.28,79.38 73.64,79.44 69.00,79.49 64.36,79.55\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_163\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#999999\" fill-opacity=\"0.4\" stroke=\"none\"/>\n    <polyline points=\"64.36,33.18 69.00,34.07 73.64,34.96 78.28,35.85 82.93,36.73 87.57,37.61 92.21,38.49 96.85,39.37 101.50,40.24 106.14,41.11 110.78,41.98 115.42,42.84 120.07,43.69 124.71,44.54 129.35,45.39 133.99,46.23 138.64,47.06 143.28,47.89 147.92,48.71 152.56,49.52 157.21,50.32 161.85,51.11 166.49,51.90 171.13,52.67 175.78,53.43 180.42,54.18 185.06,54.91 189.70,55.63 194.35,56.34 198.99,57.02 203.63,57.69 208.27,58.34 212.92,58.96 217.56,59.57 222.20,60.15 226.84,60.70 231.49,61.23 236.13,61.74 240.77,62.21 245.41,62.66 250.06,63.08 254.70,63.47 259.34,63.84 263.99,64.17 268.63,64.48 273.27,64.77 277.91,65.03 282.56,65.26 287.20,65.47 291.84,65.67 296.48,65.84 301.13,65.99 305.77,66.12 310.41,66.24 315.05,66.34 319.70,66.43 324.34,66.51 328.98,66.57 333.62,66.62 338.27,66.66 342.91,66.69 347.55,66.72 352.19,66.73 356.84,66.74 361.48,66.74 366.12,66.74 370.76,66.72 375.41,66.71 380.05,66.69 384.69,66.66 389.33,66.63 393.98,66.59 398.62,66.55 403.26,66.51 407.90,66.46 412.55,66.41 417.19,66.36 421.83,66.31 426.47,66.25 431.12,66.19\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_164\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke=\"none\"/>\n    <polyline points=\"431.12,112.29 426.47,111.39 421.83,110.50 417.19,109.62 412.55,108.73 407.90,107.85 403.26,106.97 398.62,106.10 393.98,105.23 389.33,104.36 384.69,103.49 380.05,102.64 375.41,101.78 370.76,100.93 366.12,100.09 361.48,99.25 356.84,98.42 352.19,97.59 347.55,96.78 342.91,95.97 338.27,95.17 333.62,94.38 328.98,93.60 324.34,92.83 319.70,92.07 315.05,91.33 310.41,90.60 305.77,89.88 301.13,89.19 296.48,88.51 291.84,87.84 287.20,87.20 282.56,86.58 277.91,85.99 273.27,85.41 268.63,84.86 263.99,84.34 259.34,83.85 254.70,83.38 250.06,82.94 245.41,82.53 240.77,82.14 236.13,81.79 231.49,81.46 226.84,81.16 222.20,80.88 217.56,80.63 212.92,80.40 208.27,80.19 203.63,80.01 198.99,79.84 194.35,79.70 189.70,79.57 185.06,79.46 180.42,79.36 175.78,79.27 171.13,79.20 166.49,79.14 161.85,79.09 157.21,79.05 152.56,79.02 147.92,79.00 143.28,78.99 138.64,78.98 133.99,78.99 129.35,78.99 124.71,79.01 120.07,79.03 115.42,79.05 110.78,79.08 106.14,79.11 101.50,79.15 96.85,79.19 92.21,79.23 87.57,79.28 82.93,79.33 78.28,79.38 73.64,79.44 69.00,79.49 64.36,79.55\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_165\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke=\"none\"/>\n    <polyline points=\"64.36,56.37 69.00,56.78 73.64,57.20 78.28,57.61 82.93,58.03 87.57,58.45 92.21,58.86 96.85,59.28 101.50,59.69 106.14,60.11 110.78,60.53 115.42,60.94 120.07,61.36 124.71,61.77 129.35,62.19 133.99,62.61 138.64,63.02 143.28,63.44 147.92,63.86 152.56,64.27 157.21,64.69 161.85,65.10 166.49,65.52 171.13,65.94 175.78,66.35 180.42,66.77 185.06,67.18 189.70,67.60 194.35,68.02 198.99,68.43 203.63,68.85 208.27,69.26 212.92,69.68 217.56,70.10 222.20,70.51 226.84,70.93 231.49,71.35 236.13,71.76 240.77,72.18 245.41,72.59 250.06,73.01 254.70,73.43 259.34,73.84 263.99,74.26 268.63,74.67 273.27,75.09 277.91,75.51 282.56,75.92 287.20,76.34 291.84,76.75 296.48,77.17 301.13,77.59 305.77,78.00 310.41,78.42 315.05,78.84 319.70,79.25 324.34,79.67 328.98,80.08 333.62,80.50 338.27,80.92 342.91,81.33 347.55,81.75 352.19,82.16 356.84,82.58 361.48,83.00 366.12,83.41 370.76,83.83 375.41,84.24 380.05,84.66 384.69,85.08 389.33,85.49 393.98,85.91 398.62,86.33 403.26,86.74 407.90,87.16 412.55,87.57 417.19,87.99 421.83,88.41 426.47,88.82 431.12,89.24\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_166\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"2.13396\" stroke=\"#3366FF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polygon points=\"297.01,103.17 300.16,103.61 303.32,104.04 306.48,104.47 309.64,104.89 312.79,105.31 315.95,105.73 319.11,106.14 322.26,106.55 325.42,106.95 328.58,107.35 331.74,107.74 334.89,108.12 338.05,108.50 341.21,108.87 344.36,109.24 347.52,109.59 350.68,109.94 353.84,110.27 356.99,110.60 360.15,110.91 363.31,111.21 366.46,111.50 369.62,111.77 372.78,112.02 375.93,112.26 379.09,112.48 382.25,112.68 385.41,112.85 388.56,113.01 391.72,113.13 394.88,113.23 398.03,113.30 401.19,113.33 404.35,113.33 407.51,113.30 410.66,113.23 413.82,113.12 416.98,112.97 420.13,112.78 423.29,112.55 426.45,112.28 429.61,111.97 432.76,111.62 435.92,111.22 439.08,110.80 442.23,110.33 445.39,109.83 448.55,109.29 451.70,108.73 454.86,108.14 458.02,107.51 461.18,106.87 464.33,106.20 467.49,105.50 470.65,104.79 473.80,104.06 476.96,103.31 480.12,102.55 483.28,101.77 486.43,100.98 489.59,100.17 492.75,99.36 495.90,98.53 499.06,97.69 502.22,96.85 505.38,96.00 508.53,95.13 511.69,94.27 514.85,93.39 518.00,92.51 521.16,91.62 524.32,90.73 527.48,89.84 530.63,88.94 533.79,88.03 536.95,87.12 540.10,86.21 543.26,85.29 546.42,84.37 546.42,148.93 543.26,148.50 540.10,148.07 536.95,147.64 533.79,147.22 530.63,146.80 527.48,146.39 524.32,145.98 521.16,145.57 518.00,145.17 514.85,144.78 511.69,144.39 508.53,144.01 505.38,143.64 502.22,143.27 499.06,142.92 495.90,142.57 492.75,142.23 489.59,141.90 486.43,141.58 483.28,141.28 480.12,140.99 476.96,140.71 473.80,140.45 470.65,140.20 467.49,139.98 464.33,139.77 461.18,139.59 458.02,139.43 454.86,139.30 451.70,139.19 448.55,139.11 445.39,139.07 442.23,139.05 439.08,139.07 435.92,139.13 432.76,139.23 429.61,139.36 426.45,139.54 423.29,139.76 420.13,140.01 416.98,140.31 413.82,140.65 410.66,141.03 407.51,141.44 404.35,141.90 401.19,142.39 398.03,142.91 394.88,143.46 391.72,144.05 388.56,144.66 385.41,145.30 382.25,145.96 379.09,146.65 375.93,147.35 372.78,148.08 369.62,148.82 366.46,149.58 363.31,150.36 360.15,151.14 356.99,151.94 353.84,152.76 350.68,153.58 347.52,154.41 344.36,155.25 341.21,156.10 338.05,156.96 334.89,157.83 331.74,158.70 328.58,159.58 325.42,160.46 322.26,161.35 319.11,162.25 315.95,163.15 312.79,164.05 309.64,164.96 306.48,165.87 303.32,166.79 300.16,167.71 297.01,168.63\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_167\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#999999\" fill-opacity=\"0.4\" stroke=\"none\"/>\n    <polyline points=\"297.01,103.17 300.16,103.61 303.32,104.04 306.48,104.47 309.64,104.89 312.79,105.31 315.95,105.73 319.11,106.14 322.26,106.55 325.42,106.95 328.58,107.35 331.74,107.74 334.89,108.12 338.05,108.50 341.21,108.87 344.36,109.24 347.52,109.59 350.68,109.94 353.84,110.27 356.99,110.60 360.15,110.91 363.31,111.21 366.46,111.50 369.62,111.77 372.78,112.02 375.93,112.26 379.09,112.48 382.25,112.68 385.41,112.85 388.56,113.01 391.72,113.13 394.88,113.23 398.03,113.30 401.19,113.33 404.35,113.33 407.51,113.30 410.66,113.23 413.82,113.12 416.98,112.97 420.13,112.78 423.29,112.55 426.45,112.28 429.61,111.97 432.76,111.62 435.92,111.22 439.08,110.80 442.23,110.33 445.39,109.83 448.55,109.29 451.70,108.73 454.86,108.14 458.02,107.51 461.18,106.87 464.33,106.20 467.49,105.50 470.65,104.79 473.80,104.06 476.96,103.31 480.12,102.55 483.28,101.77 486.43,100.98 489.59,100.17 492.75,99.36 495.90,98.53 499.06,97.69 502.22,96.85 505.38,96.00 508.53,95.13 511.69,94.27 514.85,93.39 518.00,92.51 521.16,91.62 524.32,90.73 527.48,89.84 530.63,88.94 533.79,88.03 536.95,87.12 540.10,86.21 543.26,85.29 546.42,84.37\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_168\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke=\"none\"/>\n    <polyline points=\"546.42,148.93 543.26,148.50 540.10,148.07 536.95,147.64 533.79,147.22 530.63,146.80 527.48,146.39 524.32,145.98 521.16,145.57 518.00,145.17 514.85,144.78 511.69,144.39 508.53,144.01 505.38,143.64 502.22,143.27 499.06,142.92 495.90,142.57 492.75,142.23 489.59,141.90 486.43,141.58 483.28,141.28 480.12,140.99 476.96,140.71 473.80,140.45 470.65,140.20 467.49,139.98 464.33,139.77 461.18,139.59 458.02,139.43 454.86,139.30 451.70,139.19 448.55,139.11 445.39,139.07 442.23,139.05 439.08,139.07 435.92,139.13 432.76,139.23 429.61,139.36 426.45,139.54 423.29,139.76 420.13,140.01 416.98,140.31 413.82,140.65 410.66,141.03 407.51,141.44 404.35,141.90 401.19,142.39 398.03,142.91 394.88,143.46 391.72,144.05 388.56,144.66 385.41,145.30 382.25,145.96 379.09,146.65 375.93,147.35 372.78,148.08 369.62,148.82 366.46,149.58 363.31,150.36 360.15,151.14 356.99,151.94 353.84,152.76 350.68,153.58 347.52,154.41 344.36,155.25 341.21,156.10 338.05,156.96 334.89,157.83 331.74,158.70 328.58,159.58 325.42,160.46 322.26,161.35 319.11,162.25 315.95,163.15 312.79,164.05 309.64,164.96 306.48,165.87 303.32,166.79 300.16,167.71 297.01,168.63\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_169\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke=\"none\"/>\n    <polyline points=\"297.01,135.90 300.16,135.66 303.32,135.41 306.48,135.17 309.64,134.93 312.79,134.68 315.95,134.44 319.11,134.19 322.26,133.95 325.42,133.71 328.58,133.46 331.74,133.22 334.89,132.98 338.05,132.73 341.21,132.49 344.36,132.25 347.52,132.00 350.68,131.76 353.84,131.51 356.99,131.27 360.15,131.03 363.31,130.78 366.46,130.54 369.62,130.30 372.78,130.05 375.93,129.81 379.09,129.56 382.25,129.32 385.41,129.08 388.56,128.83 391.72,128.59 394.88,128.35 398.03,128.10 401.19,127.86 404.35,127.62 407.51,127.37 410.66,127.13 413.82,126.88 416.98,126.64 420.13,126.40 423.29,126.15 426.45,125.91 429.61,125.67 432.76,125.42 435.92,125.18 439.08,124.93 442.23,124.69 445.39,124.45 448.55,124.20 451.70,123.96 454.86,123.72 458.02,123.47 461.18,123.23 464.33,122.99 467.49,122.74 470.65,122.50 473.80,122.25 476.96,122.01 480.12,121.77 483.28,121.52 486.43,121.28 489.59,121.04 492.75,120.79 495.90,120.55 499.06,120.30 502.22,120.06 505.38,119.82 508.53,119.57 511.69,119.33 514.85,119.09 518.00,118.84 521.16,118.60 524.32,118.36 527.48,118.11 530.63,117.87 533.79,117.62 536.95,117.38 540.10,117.14 543.26,116.89 546.42,116.65\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_170\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"2.13396\" stroke=\"#3366FF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <defs>\n      <clipPath id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"24.13\" y=\"237.71\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_171\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">40<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"24.13\" y=\"161.87\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_172\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">60<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"24.13\" y=\"86.04\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_173\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">80<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"18.53\" y=\"10.20\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_174\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">100<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"100.66\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_175\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">7<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"198.02\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_176\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">8<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"295.38\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_177\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">9<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"389.94\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_178\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">10<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"487.30\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_179\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">11<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"290.64\" y=\"313.03\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_180\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">l_gdp<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text transform=\"translate(13.50,162.31) rotate(-90)\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_181\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"154.22\" y=\"344.41\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_182\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">rank<\/text>\n    <\/g>\n    <circle cx=\"192.94\" cy=\"340.40\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_183\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <circle cx=\"333.18\" cy=\"340.40\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_184\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"207.06\" y=\"343.61\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_185\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">High infant mortality rate<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"347.30\" y=\"343.61\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_186\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">Low infant mortality rate<\/text>\n    <\/g>\n  <\/g>\n<\/svg>\n","js":null,"uid":"svg_790a8806-4836-491a-8eea-2a594d6a280b","ratio":1.6,"settings":{"tooltip":{"css":" .tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px ; position:absolute;pointer-events:none;z-index:999;}\n","offx":10,"offy":0,"use_cursor_pos":true,"opacity":0.9,"usefill":false,"usestroke":false,"delay":{"over":200,"out":500}},"hover":{"css":" .hover_SVGID_ { fill:orange;stroke:gray; }\n"},"hoverkey":{"css":" .hover_key_SVGID_ { stroke:red; }\n"},"hovertheme":{"css":" .hover_theme_SVGID_ { fill:green; }\n"},"zoom":{"min":1,"max":1},"capture":{"css":" .selected_SVGID_ { fill:red;stroke:gray; }\n","type":"multiple","only_shiny":true,"selected":[]},"capturekey":{"css":" .selected_key_SVGID_ { stroke:gray; }\n","type":"single","only_shiny":true,"selected":[]},"capturetheme":{"css":" .selected_theme_SVGID_ { stroke:gray; }\n","type":"single","only_shiny":true,"selected":[]},"toolbar":{"position":"topright","saveaspng":true},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
<p>
All of a sudden, the relationship turns positive for high income countries. This is the famous Simpson’s paradox in action. If you don’t know about Simpson’s paradox, you can read about it <a href="https://en.wikipedia.org/wiki/Simpson%27s_paradox">here</a>.
</p>
<p>
Now what? Should we stop here? No.
</p>
<p>
Let’s not even consider Simpson’s paradox. Even though the authors never claim to have found any causal mechanism (and the Economist made no such claim, even though they tried hard to find some after the fact explanation to justify their findings), authors of such studies do very often imply that their simple analysis has at the very least some predictive power. We already know that this is bullocks, because the R² is so low. But let’s try something fun; let’s split the dataset into a training set and a testing set, and let’s see if we can accurately predict the points from the test set. Also, I won’t do this once, because, who knows, maybe that one regression we did had some very hard to predict points in the test set, so I’ll do it 100 times, always with new randomly generated training and testing sets. The way I’m evaluating the accuracy of the regression is visually: I’ll be doing a plot like before, where I’m showing the points from the training set, the points from the test set, as well as the predictions. I’ll also be showing the distance between the prediction and the points from the test set.
</p>
<details>
<summary>
Click to see the code to run the 100 regressions.
</summary>
<pre class="r"><code>run_regression &lt;- function(dataset){

  training_index &lt;- sample(1:nrow(dataset), 120)

  training_set &lt;- dataset[training_index, ]

  testing_set &lt;- dataset[-training_index, ]

  fitted_model &lt;- lm(value ~ l_gdp, data = training_set)

  predicted_points &lt;- predict.lm(fitted_model, newdata = testing_set)

  predicted_points &lt;- cbind(testing_set, "prediction" = predicted_points)

  rbind(training_set, predicted_points)
}

results &lt;- tribble(~id,
                   seq(1, 100)) %&gt;%
  mutate(dataset = list(filter(plot_data, country_name != "Taiwan"))) %&gt;%  
  unnest(cols = c(id)) %&gt;%
  mutate(regression = map(dataset, run_regression))</code></pre>
</details>
<p>
Now that I ran the 100 regressions, let’s create some visualisations:
</p>
<details>
<summary>
Click to see the code to create the plots.
</summary>
<pre class="r"><code>results &lt;- results %&gt;%
  mutate(regression = map(regression,
                          ~mutate(., type_set = ifelse(is.na(prediction),
                                                    "training_set",
                                                    "testing_set"))))


make_plots &lt;- function(dataset){
ggplot() +
  geom_point(data = dataset,
             aes(y = value, x = l_gdp, shape = type_set), size = 5) +
  geom_smooth(data = dataset,
              aes(y = value, x = l_gdp),
              method = "lm") +
  geom_point(data = {dataset %&gt;%
                      filter(!is.na(prediction)) %&gt;%
                       pivot_longer(c(value, prediction), names_to = "values") %&gt;%
                       mutate(values = ifelse(values == "value",
                                              "Actual value",
                                              "Prediction"))},
             aes(y = value, x = l_gdp, colour = values, group = country_name)) +
  geom_path(data = {dataset %&gt;%
                      filter(!is.na(prediction)) %&gt;%
                      pivot_longer(c(value, prediction), names_to = "values") %&gt;%
                      mutate(values = ifelse(values == "value",
                                             "Actual value",
                                             "Prediction"))},
               aes(y = value, x = l_gdp, colour = values, group = country_name),
               arrow = arrow(length = unit(0.03, "npc"))) +
  brotools::theme_blog()
} 

results &lt;- results %&gt;%
  mutate(plots = map(regression, make_plots))</code></pre>
</details>
<p>
Finally, let’s take a look at some of them:
</p>
<details>
<summary>
Click to see some plots.
</summary>
<pre class="r"><code>results$plots[1:3]</code></pre>
<pre><code>## [[1]]</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/ethics_statistics-9-1.png" width="80%" height="auto">
</p>
<pre><code>## 
## [[2]]</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/ethics_statistics-9-2.png" width="80%" height="auto">
</p>
<pre><code>## 
## [[3]]</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<img src="https://b-rodrigues.github.io/assets/img/ethics_statistics-9-3.png" width="80%" height="auto">
</details>
<p>
The red dots are the actual values in the test set (the triangles are the points in the training set). The blue dots are the predictions. See what happens? They all get very close to the regression line. This is of course completely normal; after all, the line is what the model is predicting, so how else could it be? I don’t know if this is exactly what is named “regression towards the mean”, but it does look very much like it. But in general, we speak of regression towards the mean when there’s time involved in whatever you’re studying (for example students that score very well on a first test tend to score worse, on average, on a second test, and vice-versa). But what matters here, is that a regression line cannot even be useful to make any type of prediction.
</p>
<p>
So where does that leave us? Should we avoid using simple methods like linear regression and only use very complex methods? Should we stop communicating numbers and stats and graphs to the general public? Certainly not. But using the excuse that the general public does not understand complex methods to justify using faulty stats is also not an option. In an article that mentions trust in vaccines, it also seems crucial to give more context; trust in vaccines may be higher on average in poorer countries (and that’s an assumption, the article of the Economist does not allow to conclude that), but distrust is also more <a href="https://www.nytimes.com/2013/02/09/world/africa/in-nigeria-polio-vaccine-workers-are-killed-by-gunmen.html">extreme</a>.
</p>
<p>
I don’t think I’ve ever seen the general public distrust science and stats so much than during this pandemic. Many scientists made many predictions that of course never materialized, because scientists should not give out single point forecasts. Unfortunately, that’s what they do because that’s how they get people’s attention, and unfortunately, many also confuse science with stats. I think Millenials are very guilty of this. We all were thought critical thinking in school, and now all arguments devolve very quickly to “I have data and models to back my opinions up so my opinions are actually facts, and your data and models are wrong and you’re a terrible human being by the way”. The problem is that having data and models is not a sufficient condition for being right.
</p>
<p>
As statisticians, we have a responsibility to use the right methods, and make more and better efforts to communicate our results to the general public, even if the methods used are complex. Sometimes there’s simply no simplifying further. Anything else is just charlatanism.
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-12-12-ethics_statistics.html</guid>
  <pubDate>Sat, 12 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Poorman’s automated translation with R and Google Sheets using {googlesheets4}</title>
  <link>https://b-rodrigues.github.io/posts/2020-12-05-poorman_translate.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<link href="../rmarkdown-libs/anchor-sections/anchor-sections.css" rel="stylesheet">
<script src="../rmarkdown-libs/anchor-sections/anchor-sections.js"></script>
<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=2kArCRjT29w"> <img src="https://b-rodrigues.github.io/assets/img/omelette_du_fromage.gif" title="A classic." width="80%" height="auto"></a>
</p>
</div>
<p>
A little trick I thought about this week; using Google Sheets, which includes a “googletranslate()” function to translate a survey that we’re preparing at work, from French to English, and using R of course. You’ll need a Google account for this. Also, keep in mind that you’ll be sending the text you want to translate to Google, so don’t go sending out anything sensitive.
</p>
<p>
First, let’s load the needed packages:
</p>
<pre class="r"><code>library(googlesheets4)
library(dplyr)
library(tibble)</code></pre>
<p>
As an example, I’ll be defining a tibble with one column, and two rows. Each cell contains a sentence in French from the best show in the entire French speaking world, Kaamelott:
</p>
<pre class="r"><code>my_french_tibble &lt;- tribble(~french,
                  "J'apprécie les fruits au sirop",
                  "C'est pas faux")</code></pre>
<p>
To this tibble, I’m now adding two more columns, that contain the following string: “=googletranslate(A:A,”fr“,”en“)”. This is exactly what you would write in the formula bar in Sheets. Then, we need to convert that to an actual Google Sheets formula using <code>gs4_formula()</code>:
</p>
<pre class="r"><code>(
my_french_tibble &lt;- my_french_tibble %&gt;%
  mutate(english = '=googletranslate(A:A, "fr", "en")') %&gt;%
  mutate(portuguese = '=googletranslate(A:A, "fr", "pt")') %&gt;%
  mutate(english = gs4_formula(english),
         portuguese = gs4_formula(portuguese))
)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 2 x 3
##   french     english                           portuguese                       
##   &lt;chr&gt;      &lt;fmla&gt;                            &lt;fmla&gt;                           
## 1 J'appréci… =googletranslate(A:A, "fr", "en") =googletranslate(A:A, "fr", "pt")
## 2 C'est pas… =googletranslate(A:A, "fr", "en") =googletranslate(A:A, "fr", "pt")</code></pre>
<p>
We’re ready to send this to Google Sheets. As soon as the sheet gets uploaded, the formulas will be evaluated, yielding translations in both English and Portuguese.
</p>
<p>
To upload the tibble to sheets, run the following:
</p>
<pre class="r"><code>french_sheet &lt;- gs4_create("repliques_kaamelott",
                           sheets = list(perceval = my_french_tibble))</code></pre>
<p>
You’ll be asked if you want to cache your credentials so that you don’t need to re-authenticate between R sessions:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_oauth.png" width="80%" height="auto">
</p>
<p>
Your browser will the open a tab asking you to login to Google:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_login.png" width="80%" height="auto">
</p>
<p>
At this point, you might get a notification on your phone, alerting you that there was a login to your account:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_android_notification.png" width="80%" height="auto">
</p>
<p>
If you go on your Google Sheets account, this is what you’ll see:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_repliques_kaamelott.png" width="80%" height="auto">
</p>
<p>
And if you open the sheet:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_repliques_kaamelott_result.png" width="80%" height="auto">
</p>
<p>
Pretty nice, no? You can of course download the workbook, or better yet, never leave your R session at all and simply get back the workbook using either the <code>{googledrive}</code> package, which simply needs the name of the workbook (<code>{googledrive}</code> also needs authentication):
</p>
<pre class="r"><code>(
translations &lt;- googledrive::drive_get("repliques_kaamelott") %&gt;%
  read_sheet
)</code></pre>
<p>
You’ll get a new data frame with the translation:
</p>
<pre><code>Reading from "repliques_kaamelott"
Range "perceval"
# A tibble: 2 x 3
  french                    english                     portuguese              
  &lt;chr&gt;                     &lt;chr&gt;                       &lt;chr&gt;                   
1 J'apprécie les fruits au… I appreciate the fruits in… I apreciar os frutos em…
2 C'est pas faux            It is not false             Não é falsa             </code></pre>
<p>
Or you can use the link to the sheet (which does not require to re-authenticate at this point):
</p>
<pre class="r"><code>translations &lt;- read_sheet("the_link_goes_here", "perceval")</code></pre>
<p>
You could of course encapsulate all these steps into a function and have any text translated very easily! Just be careful not to send out any confidential information out…
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2020-12-05-poorman_translate.html</guid>
  <pubDate>Sat, 05 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Graphical User Interfaces were a mistake but you can still make things right</title>
  <link>https://b-rodrigues.github.io/posts/2020-11-21-guis_mistake.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<link href="../rmarkdown-libs/anchor-sections/anchor-sections.css" rel="stylesheet">
<script src="../rmarkdown-libs/anchor-sections/anchor-sections.js"></script>
<div style="text-align:center;">
<p>
<a href="https://youtu.be/cHw4GER-MiE?t=2"> <img src="https://b-rodrigues.github.io/assets/img/just_kill_me.png" title="Welcome to Hell."></a>
</p>
</div>
<p>
Some weeks ago I tweeted this:
</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
GUIs were a mistake
</p>
— Bruno Rodrigues (<span class="citation"><span class="citation" data-cites="brodriguesco">@brodriguesco</span></span>) <a href="https://twitter.com/brodriguesco/status/1314505586172624898?ref_src=twsrc%5Etfw">October 9, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>
you might think that I tweeted this as an unfunny joke, but it’s not. GUIs were one of the worst things to happen for statisticians. Clickable interfaces for data analysis is probably one of the greatest source of mistakes and errors in data processing, very likely costing many millions to companies worldwide and is a source of constant embarassment when mistakes happen which cost the reputation, and money, of institutions or people.
</p>
<p>
Remember the infamous Excel mistake by Reinhard and Rogoff? If you don’t know what I’m talking about, you can get up to speed by reading <a href="https://theconversation.com/the-reinhart-rogoff-error-or-how-not-to-excel-at-economics-13646">this</a>. I think the most interesting sentence is this:
</p>
<blockquote class="blockquote">
<p>
The most serious was that, in their Excel spreadsheet, Reinhart and Rogoff had not selected the entire row when averaging growth figures: they omitted data from Australia, Austria, Belgium, Canada and Denmark.
</p>
</blockquote>
<p>
This is a typical mistake that happens when a mouse is used to select data in a GUI, instead of typing whatever you need in a scripting language. Many other mistakes like that happen, and they remain hidden, potentially for years, or go unreported.
</p>
<p>
Recently there was another Excel-related problem in England where positive Covid tests got lost. For some obscure reason, the raw data, which was encoded in a CSV file, got converted into an Excel spreadsheet, most likely for further analysis. The problem is that the format that was used was the now obsolete XLS format, instead of the latest XLSX format, which can handle millions of rows. Because the data was converted in the XLS format, up to 15841 cases were lost. You can get all the details from this BBC <a href="https://www.bbc.com/news/technology-54423988">article</a>. Again, not entirely Excel’s fault, as it was misused. The problem is that when all you have is a hammer, everything looks like a nail, and Excel is that data analytics hammer. So to the uncultured, everything looks like an Excel problem.
</p>
<p>
Now don’t misunderstand me; I’m not blaming Excel specifically, or any other specific GUI application for this. In many cases, the problem lies between the keyboard and the chair. But GUI applications have a part of responsibility, as they allow users to implement GUI-based workflows. I think that complex GUI based workflows were an unintended consequence of developing GUIs. Who could have expected, 40 years ago, that office jobs would evolve so much and that they would require such complex workflows to generate an output? Consider the life-cycle of a shared Excel file in your typical run-of-the-mill financial advisory firm. In many cases, it starts with an already existing file that was made for another client and that is now used as a starting point. The first thing to do, is to assign a poor junior to update the file and adapt it for the current assignment. He or she will spend hours trying to reverse engineer this Excel file and then update it. This file will at some point go to more senior members that will continue working on it, until it gets send off for review to a manager. This manager, already overworked and with little time between meetings to review the file correctly, just gives it a cursory glance and might find some mistakes here and there. As a review method, colours and comments will be used. The file goes back for a round of updates and reviews. As time goes by, and as the file gets more and more complex, it starts to become impossible to manage and review properly. It eventually gets used to give advice to a client, which might be totally wrong, because just as in the case of Reinhard and Rogoff, someone, at some point, somewhere, did not select the right cells for the right formula. Good luck ever finding this mistake, and who did it. During my consulting years, I have been involved with very, very, big clients that were completely overwhelmed because all their workflows were GUI based. They had been working like that for years, and kept recruiting highly educated people en masse just to manage Excel and Word files. They were looking for a magic, AI-based solution, because in their minds, if AIs could drive fricking cars, they should also be able to edit and send Excel files around for review. Well, we’re not quite there yet, so we told them, after our review of their processes and data sources (which in many cases were Excel AND Word files), that what they needed was for their company to go through an in-depth optimisation process “journey”. They weren’t interested so they kept hiring very intelligent people to be office drones. I don’t think that business model can remain sustainable.
</p>
<p>
Now how much are situations like that the fault of Excel and how much personal responsibility do the people involved have? I don’t know, but my point is that if, by magic, GUIs were made to disappear, problems like that would also not exist. The reason is that if you’re forced to write code to reach the results you want, you avoid a lot of these pitfalls I just described. Working with scripts and the command line forces a discipline unto you; you cannot be lazy and click around. For example, reverse engineering a source code file is much easier that a finished Excel spreadsheet. Even poorly written and undocumented code is always much better than an Excel spreadsheet. If you throw a version control system in the mix, you have the whole history of the file and the ability to know exactly what happened and when. Add unit tests on the pile, and you start to get something that is very robust, transparent, and much easier to audit.
</p>
<p>
“But Bruno, not everyone is a programmer!” I hear you scream at your monitor.
</p>
<p>
My point, again, is that if GUIs did not exist, people would have enough knowledge of these tools to be able to work. What other choice would they have?
</p>
<p>
Of course, GUIs have been invented, and they’re going nowhere. So what can you do?
</p>
<p>
When it comes to statistics and data analysis/processing, you can at least not be part of the problem and avoid using Excel altogether. If we go back to our previous scenario from the financial advisory firm, the first step, which consisted in reverse engineering an Excel file, can be done using <code>{tidyxl}</code>. Let’s take a quick look; the spreadsheet I used as the header image for this blog post comes from the <a href="https://en.wikipedia.org/wiki/Enron_Corpus">Enron corpus</a> , which is mostly know for being a database of over 600000 emails from the US company Enron. But it also contains spreadsheets, which are delightful. You can download the one from the picture <a href="https://github.com/rbind/b-rodrigues.github.com/raw/master/dutch_quigley__9378__modeldutch.xlsx">here</a> (8mb xlsx warning). Opening it in your usual spreadsheet application will probably cause your heart rate to increase to dangerous levels, so avoid that. Instead, let’s take a look at what <code>{tidyxl}</code> does with it:
</p>
<pre class="r"><code>library(tidyxl)</code></pre>
<pre><code>## Warning: package 'tidyxl' was built under R version 4.0.3</code></pre>
<pre class="r"><code>library(tidyverse)</code></pre>
<pre><code>## Warning: replacing previous import 'vctrs::data_frame' by 'tibble::data_frame'
## when loading 'dplyr'</code></pre>
<pre><code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──</code></pre>
<pre><code>## ✔ ggplot2 3.3.2     ✔ purrr   0.3.4
## ✔ tibble  3.0.1     ✔ dplyr   1.0.0
## ✔ tidyr   1.1.2     ✔ stringr 1.4.0
## ✔ readr   1.3.1     ✔ forcats 0.5.0</code></pre>
<pre><code>## Warning: package 'tidyr' was built under R version 4.0.2</code></pre>
<pre><code>## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()</code></pre>
<pre class="r"><code>dutch_quigley_9378 &lt;- xlsx_cells("~/six_to/spreadsheets/dutch_quigley__9378__modeldutch.xlsx")


head(dutch_quigley_9378)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 6 x 21
##   sheet address   row   col is_blank data_type error logical numeric
##   &lt;chr&gt; &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;lgl&gt;    &lt;chr&gt;     &lt;chr&gt; &lt;lgl&gt;     &lt;dbl&gt;
## 1 Swap… A1          1     1 FALSE    character &lt;NA&gt;  NA           NA
## 2 Swap… D2          2     4 FALSE    character &lt;NA&gt;  NA           NA
## 3 Swap… E2          2     5 FALSE    character &lt;NA&gt;  NA           NA
## 4 Swap… F2          2     6 FALSE    character &lt;NA&gt;  NA           NA
## 5 Swap… G2          2     7 FALSE    character &lt;NA&gt;  NA           NA
## 6 Swap… D3          3     4 FALSE    character &lt;NA&gt;  NA           NA
## # … with 12 more variables: date &lt;dttm&gt;, character &lt;chr&gt;,
## #   character_formatted &lt;list&gt;, formula &lt;chr&gt;, is_array &lt;lgl&gt;,
## #   formula_ref &lt;chr&gt;, formula_group &lt;int&gt;, comment &lt;chr&gt;, height &lt;dbl&gt;,
## #   width &lt;dbl&gt;, style_format &lt;chr&gt;, local_format_id &lt;int&gt;</code></pre>
<p>
That whole Excel workbook is inside a neat data frame. Imagine that you want to quickly know where all the formulas are:
</p>
<pre class="r"><code>dutch_quigley_9378 %&gt;%
  filter(!is.na(formula)) %&gt;%
  count(sheet, address)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 18,776 x 3
##    sheet address     n
##    &lt;chr&gt; &lt;chr&gt;   &lt;int&gt;
##  1 Front B22         1
##  2 Front C13         1
##  3 Front C2          1
##  4 Front C22         1
##  5 Front C25         1
##  6 Front C26         1
##  7 Front C27         1
##  8 Front C28         1
##  9 Front C30         1
## 10 Front C31         1
## # … with 18,766 more rows</code></pre>
<p>
With the code above, you can quickly find, for each sheet, where the formulas are. This workbook contains 18776 formulas. If Hell is a real place, it’s probably an office building full of cubicles where you’ll sit for eternity looking at these spreadsheets and trying to make sense of them.
</p>
<p>
Now imagine that you’d like to know what these formulas are, let’s say, for the <code>Swap</code> sheet:
</p>
<pre class="r"><code>dutch_quigley_9378 %&gt;%
  filter(sheet == "Swap", !is.na(formula)) %&gt;%
  select(address, formula)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 6,773 x 2
##    address formula           
##    &lt;chr&gt;   &lt;chr&gt;             
##  1 F1      DAY(EOMONTH(G1,0))
##  2 G1      A11               
##  3 E2      BE9               
##  4 A3      BQ5               
##  5 E3      BF9               
##  6 F3      SUM(G3:K3)        
##  7 H3      $F$1*H2           
##  8 I3      $F$1*I2           
##  9 J3      $F$1*J2           
## 10 K3      $F$1*K2           
## # … with 6,763 more rows</code></pre>
<p>
Brilliant! Maybe you’re interested to find all the <code>“SUM”</code> formulas? Easy!
</p>
<pre class="r"><code>dutch_quigley_9378 %&gt;%
  filter(sheet == "Swap", !is.na(formula)) %&gt;%
  filter(grepl("SUM", formula)) %&gt;%
  select(address, formula)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 31 x 2
##    address formula        
##    &lt;chr&gt;   &lt;chr&gt;          
##  1 F3      SUM(G3:K3)     
##  2 E4      SUM(D11:D309)  
##  3 F5      SUM(G5:K5)     
##  4 E6      SUM(F6:H6)     
##  5 BF8     SUM(BF11:BF242)
##  6 B9      SUM(B47:B294)  
##  7 AB9     SUM(AB11:AB253)
##  8 AC9     SUM(AC11:AC253)
##  9 AD9     SUM(AD11:AD253)
## 10 AE9     SUM(AE11:AE253)
## # … with 21 more rows</code></pre>
<p>
You get the idea. There are many more things that you can extract such as the formatting, the contents of the cells, the comments (and where to find them) and much, much more. This will make making sense of a complex Excel file a breeze.
</p>
<p>
The other thing that you can also do, once you’re done understanding this monster Excel file, is not to perform the analysis inside Excel. Don’t fall into the temptation of continuing this bad habit. As one on the data experts in your team/company, you have a responsibility to bring the light to your colleagues. Be their Prometheus and decouple the data from the code. Let the data be in Excel, but write all the required code to create whatever is expected from you inside R. You can then export your finalized results back to Excel if needed. If management tells you to do it in Excel, tell them that you’re the professional statistician/data scientist, and that they shouldn’t tell you how to do your job. Granted, this is not always possible, but you should plead your case as much as possible. In general, a good manager will be all ears if you explain that not using GUIs like Excel makes it easier to spot and correct mistakes, with the added benefit of being much easily audited and with huge time savings in the long run. This is of course easier for completely new projects, and if you have an open-minded manager. If you’re the manager, then you should ask your IT department to uninstall Excel from your team member’s computers.
</p>
<p>
Be brave, and ditch the GUI.
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-11-21-guis_mistake.html</guid>
  <pubDate>Sat, 21 Nov 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>It’s time to retire the “data scientist” label</title>
  <link>https://b-rodrigues.github.io/posts/2020-11-05-retire_data_science.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<div style="text-align:center;">
<p>
<a> <img src="https://b-rodrigues.github.io/assets/img/venn.png" title="The correct data scientist venn diagram"></a>
</p>
</div>
<p>
The “Data Scientist” label served its purpose; it allowed us to signal a transition happening in our profession from using only applied mathematical statistical methods to something else, which now also involves the use of a subset of software engineering practices. This transition was mentioned back in 2010 by Deborah Nolan (<a href="https://www.stat.berkeley.edu/~statcur/Preprints/ComputingCurric3.pdf" class="uri">https://www.stat.berkeley.edu/~statcur/Preprints/ComputingCurric3.pdf</a>), and this transition might now be complete. Version control systems, document generation from annotated source code (or even full reports generation <em>à la</em> rmarkdown), containers and build automation tools have now entered the toolbox of the run-of-the-mill statistician. Maybe not all of these tools, of course, it largely depends on what it is exactly you do, but certainly some of these. Same goes for software engineering practices. I have had the opportunity to work with some old-school statisticians (and still do), and the difference is clear; just like old school users of WYSIWYG editors like Word don’t use its “newest” features such as “Track changes” (and thus keep writing their text in different colors to signal which paragraphs are new), or the concept of versions of a document synced on Sharepoint (and thus keep multiple versions of the same document with different names) old school statisticians have not included the tools I mentioned before in their toolbox.
</p>
<p>
<img src="http://www.phdcomics.com/comics/archive/phd101212s.gif"><!-- -->
</p>
<p>
Now don’t get me wrong here; that is absolutely ok. We need and respect old school statisticians because they’ve been in the business of getting insights from data for longer than I’ve been alive. This blog post is not a jab at them because they don’t know how to use git (if you interpret it like that, that’s on you). Old school statisticians now have very senior positions and for many of them, their job does not involve getting their hands dirty on data anymore; most of them are now more like managers or mentors, and share their deep knowledge with their more junior team members. (Obviously there’s exceptions, when I say <em>all</em> old school statisticians do this or that, I don’t mean <em>all</em> of them, but most of them. Of course, I don’t have any evidence to back that up).
</p>
<p>
What this blog post is about is the label “Data Scientist” that gets used by these more junior team members and by companies that want to hire talented and motivated young people. This label, and the purported difference between a “Data Scientist” and “statistician” does not make any sense in 2020 anymore. (I know I’m beating a dead horse here, but this is my blog. I’ll blog about dead horses as much as I want thank you very much.)
</p>
<p>
Firstly, this label has always been confusing. “Data Scientist”… what does it even mean? The fact it took so long to find a definition, and that almost everyone working in the profession has a different one speaks volumes. Also, don’t all scientists use data? Data from experiments, from observational studies, from surveys, from the literature?
</p>
<p>
Secondly, I don’t believe that you can get a degree in statistics today without any exposition whatsoever to at least some of the tools I mentioned before. I really doubt that there’s people out there getting Master’s degrees in statistics without having <em>ever</em> touched these tools, or the unix command line. The degrees they’re going for might not focus a lot on these tools, true, but they certainly touch upon them. And of course, once they join a team at their first job, they’ll get more exposed to these tools and incorporate them in their day to day work. So, they’re not statisticians anymore? Their degree magically transformed into a data science degree?
</p>
<p>
But what about data science degrees? Are the students graduating with these degrees statisticians? I’d argue that yes, they are indeed statisticians; it’s just that they took a statistics degree that might have focused more than usual on these “new” practices/tools, and changed its name to “Data Science degree” for marketing purposes.
</p>
<p>
Anyways, the label “Data Scientist” is now completely defunct; as I mentioned in the very beginning, it served us well to signal that a transition was happening in the profession. I believe that this transition is now complete, or should be nearing its final stages. Also, this transition was not only about the tools used, but also about the deliverables. Statisticians now don’t only deliver tables, graphs and studies but more and more of them deliver <em>products</em>. This product can be a package implementing a bleeding edge statistical method for the profession as a whole, or it can be part of a piece of software that needs it to run (like your smartphone keyboard using a statistical model for word predictions). See <a href="https://www.tandfonline.com/doi/full/10.1080/10691898.2020.1845109?scroll=top&amp;needAccess=true&amp;">this paper</a> for an interesting exposition about how curricula and deliverables have evolved in the past two decades.
</p>
<p>
Currently, this label gets used by people that try to get insights from data. But we already have a word for them; statisticians. It’s just that the tools of the statistician have evolved over the past decade or so. Actually, I would perhaps even make another distinction; we should reserve the label of “statistician” to people that do statistics without ever touching any data. The other statisticians, the ones that get dirty wrestling in the mud with the data (they’re the <em>pigs that like it</em> from that famous quote) should be called “data janitors”. I’m not even joking; not only does that term already exist and gets used, I think it suits what we do perfectly. What do janitors do? They clean stuff and put things in order. We clean data and put it in order; meaning creating summary tables, visualizations, interactive applications, and models. Oh, and we do so (preferably) in a reproducible way.
</p>
<p>
Hope you enjoyed! If you found this blog post useful, you might want to follow me on <a href="https://www.twitter.com/brodriguesco">twitter</a> for blog post updates and <a href="https://www.buymeacoffee.com/brodriguesco">buy me an espresso</a> or <a href="https://www.paypal.me/brodriguesco">paypal.me</a>, or buy my ebook on <a href="https://leanpub.com/modern_tidyverse">Leanpub</a>.
</p>
<style>.bmc-button img{width: 27px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{line-height: 36px !important;height:37px !important;text-decoration: none !important;display:inline-flex !important;color:#ffffff !important;background-color:#272b30 !important;border-radius: 3px !important;border: 1px solid transparent !important;padding: 1px 9px !important;font-size: 22px !important;letter-spacing:0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#82518c !important;}</style>
<p>
<link href="https://fonts.googleapis.com/css?family=Cookie" rel="stylesheet"><a class="bmc-button" target="_blank" href="https://www.buymeacoffee.com/brodriguesco"><img src="https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg" alt="Buy me an Espresso"><span style="margin-left:5px">Buy me an Espresso</span></a>
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-11-05-retire_data_science.html</guid>
  <pubDate>Thu, 05 Nov 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building apps with {shinipsum} and {golem}</title>
  <link>https://b-rodrigues.github.io/posts/2020-09-27-golemDemo.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=B35E8QleVhg"> <img src="https://b-rodrigues.github.io/assets/img/golem.png" title="Only 90's kids will get it" width="80%" height="auto"></a>
</p>
</div>
<p>
<a href="../posts/2020-09-20-shiny_raspberry.html">In my previous blog post</a> I showed you how I set up my own Shiny server using a Raspberry Pi 4B. If you visited the following <a href="../posts/2020-09-20-shiny_raspberry.html">link</a> you’ll be connecting to my Raspberry Pi and can play around with a Shiny app that I called <code>golemDemo</code>. It’s been quite a few months that I wanted to discuss this app:
</p>
{{% tweet “1277671383573704706” %}}
<p>
So the tweet mentions that a video was coming in the following week and you’ll notice that the tweet was made on… June 29th, and still no video. As I said in my previous blog post, I’ve been busy. Anyways, here’s already a blog post, and I might still do a video where I’ll go into greater detail. I think that videos are quite nice to walk an audience through an app, but it works best with an accompanying blog post where I can comment some more complicated snippets of code.
</p>
<section id="why-golem" class="level1">
<h1>
Why <code>{golem}</code>?
</h1>
<p>
Why should you consider the <code>{golem}</code> package to develop your Shiny apps? For me, there are two main reasons. First of all, I’m already familiar with package development in R, having made some little packages that I have on my Github account, and one out on CRAN (with the complete texts of Luxembourguish author <a href="https://cran.r-project.org/web/packages/michelRodange/index.html">Michel Rodange</a>) so using <code>{golem}</code> came at no additional costs. This is because a Shiny app built with <code>{golem}</code> is actually an R package! This has many advantages; all the steps of documenting, testing and sharing the app are greatly simplified. Another reason to use <code>{golem}</code> is that it forces on you a certain way of working. Now this might seem like a pretty bad thing, but I find that it is quite helpful. When you start working on a Shiny app, you might get very quickly overwhelmed with both thinking about your server logic and your UI. You might spend much time tinkering with getting the server functions working, while still not having no UI to speak of, or you might work on one part of the server and then go to the UI, then back on the server… You’ll spend hours working on the app without a clear approach, and probably waste much time because of this back and forth. The first recommended step when building a shiny app (with or without <code>{golem}</code>) is a “UI first” approach. For this, we’re going to use <code>{shinipsum}</code>
</p>
</section>
<section id="lorem-ipsum-dolor-server-amet-its-latin-for-dont-bother-with-the-server-logic-until-its-time" class="level1">
<h1>
Lorem ipsum dolor server amet (it’s Latin for “don’t bother with the server logic until it’s time”)
</h1>
<p>
The developers of <code>{golem}</code>, French company <a href="https://thinkr.fr/">ThinkR</a> suggest an “UI” first approach. The idea is to focus on the UI, and to do so using their other package called <code>{shinipsum}</code> to randomly generate elements on the server side which you can then later replace with your actual server logic. For instance, imagine that somewhere on your app, you want to show a bar plot using the <code>{ggplot2}</code> package. Using <code>{shinipsum}</code>, you can generate a random bar plot with the following line:
</p>
<pre class="r"><code>shinipsum::random_ggplot("bar")</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/golemDemo-2-1.png" width="80%" height="auto">
</p>
<p>
and that’s it! Now simply ignore this bit on the server, and continue focusing on the UI. You need to show a random table? No problem:
</p>
<pre class="r"><code>shinipsum::random_table(ncol = 7, nrow = 10)</code></pre>
<pre><code>##    conc rate   state conc.1 rate.1 state.1 conc.2
## 1  0.02   76 treated   0.02     76 treated   0.02
## 2  0.02   47 treated   0.02     47 treated   0.02
## 3  0.06   97 treated   0.06     97 treated   0.06
## 4  0.06  107 treated   0.06    107 treated   0.06
## 5  0.11  123 treated   0.11    123 treated   0.11
## 6  0.11  139 treated   0.11    139 treated   0.11
## 7  0.22  159 treated   0.22    159 treated   0.22
## 8  0.22  152 treated   0.22    152 treated   0.22
## 9  0.56  191 treated   0.56    191 treated   0.56
## 10 0.56  201 treated   0.56    201 treated   0.56</code></pre>
<p>
Your app might now look something like this (actually, it won’t because the little demo below is not a <code>{golem}</code> app, but it illustrates <code>{shinipsum}</code> well):
</p>
<pre class="r"><code>library(shiny)
library(reactable)
library(shinipsum)
library(ggiraph)

ui &lt;- pageWithSidebar(
  
  headerPanel("This is a shinipsum demo"),
  
  sidebarPanel(
    sliderInput("rows",
                "Number of rows:",
                min = 1,
                max = 50,
                value = 5)
  ),
  
  mainPanel(
    reactableOutput("table"),
    girafeOutput("graph")
  )
)


server &lt;- function(input, output) {

  output$table &lt;- renderReactable({
    reactable(random_table(ncol = 10, nrow = input$rows))
  })

  output$graph &lt;- renderGirafe({
    girafe(ggobj = random_ggplot("bar"))
  })
}

shinyApp(ui = ui, server = server)</code></pre>
<p>
If you have the required packages, running this on a fresh R session should start a little app.
</p>
<p>
You see that the server is only a call to <code>shinipsum::random_table</code>, and <code>shinipsum::random_ggplot</code>. Because I want a <code>reactable</code> and an interactive plot using the <code>{ggiraph}</code> package, I have already written the minimum amount of code on the server side to get things working. Now I can focus on my UI and then, when I’m done, I can start replacing the random objects from <code>{shinipsum}</code> with the actual code.
</p>
<p>
Now proceeding in this way is not a requirement of <code>{golem}</code>, but it helps to structure your thoughts and your app, and you can use this approach for any type of app. The example above, after all, is not a <code>{golem}</code> app.
</p>
</section>
<section id="get-modular-with-golem" class="level1">
<h1>
Get modular with <code>{golem}</code>
</h1>
<p>
This is now where we get to some more interesting, and <code>{golem}</code> specific things. If you’ve been using R and Shiny for the past years, you’ve probably have heard a lot about functional programming. Functional programming is a programming paradigm that encourages, and in some languages forces, the use of functions. The idea is that everything you do should be a call to a function, and functions should be chained together to achieve whatever it is you want to do; cleaning data, visualizing data, modeling data… R has many functional tools out of the box, which can be complemented using the <code>{purrr}</code> package. What does all of this have to do with Shiny and <code>{golem}</code>? Well, <code>{golem}</code> forces you to write modules to build your apps, and modules are very similar to functions (they’re actually functions). They’re bits of code that can be decoupled from your app, used in any other app, they can be linked together, they can be easily documented and tested… If you are familiar with R’s functional programming approach, modules should not be totally new to you. But if you’ve been using Shiny without module, they’ll require some getting used to.
</p>
<p>
To illustrate how a simple app can be written using modules, I have built <code>golemDemo</code>, which, as implied by its name, is a demonstration of a <code>{golem}</code> app which I hope is simple enough for anyone to start using. The app is quite simple and does only three things:
</p>
<ul>
<li>
it allows you to choose between two datasets;
</li>
<li>
it shows a table of the selected dataset;
</li>
<li>
it shows a map of Luxembourg with the data points;
</li>
</ul>
<p>
Each of these things is a module, which means that if I were to create another app with a map of Luxembourg, I could simply reuse it. But remember, the app is actually an R package. Here is the root of the app on my computer:
</p>
<pre class="r"><code>system2("ls", args = "-lFR ~/Documents/golemDemo", stdout = TRUE)</code></pre>
<pre><code>##  [1] "/home/cbrunos/Documents/golemDemo:"                                    
##  [2] "total 56"                                                              
##  [3] "-rw-r--r-- 1 cbrunos users  302 Sep 19 11:28 app.R"                    
##  [4] "drwxr-xr-x 2 cbrunos users 4096 Jun 29 17:49 data-raw/"                
##  [5] "-rw-r--r-- 1 cbrunos users  729 Sep 19 21:27 DESCRIPTION"              
##  [6] "drwxr-xr-x 2 cbrunos users 4096 Sep 11 23:39 dev/"                     
##  [7] "-rw-r--r-- 1 cbrunos users 2723 Sep 12 15:04 Dockerfile"               
##  [8] "drwxr-xr-x 3 cbrunos users 4096 Jun 28 11:33 inst/"                    
##  [9] "-rw-r--r-- 1 cbrunos users  483 Apr  8 21:38 LICENSE.md"               
## [10] "drwxr-xr-x 2 cbrunos users 4096 Sep 19 21:27 man/"                     
## [11] "-rw-r--r-- 1 cbrunos users 1420 Sep 19 21:27 NAMESPACE"                
## [12] "drwxr-xr-x 2 cbrunos users 4096 Sep 19 21:27 R/"                       
## [13] "-rw-r--r-- 1 cbrunos users 1056 Jun 28 11:38 README.Rmd"               
## [14] "drwxr-xr-x 3 cbrunos users 4096 Sep 11 17:12 rsconnect/"               
## [15] "drwxr-xr-x 3 cbrunos users 4096 Jun 28 11:48 tests/"                   
## [16] "drwxr-xr-x 2 cbrunos users 4096 Jun 28 11:48 vignettes/"               
## [17] ""                                                                      
## [18] "/home/cbrunos/Documents/golemDemo/data-raw:"                           
## [19] "total 1168"                                                            
## [20] "-rw-r--r-- 1 cbrunos users 1176106 Jun 11 09:52 communes_df.csv"       
## [21] "-rw-r--r-- 1 cbrunos users      99 Jun 28 11:48 my_dataset.R"          
## [22] "-rw-r--r-- 1 cbrunos users    1998 Jun 28 17:00 radars.csv"            
## [23] "-rw-r--r-- 1 cbrunos users    6390 Jun 28 12:31 rettungspunkte.csv"    
## [24] ""                                                                      
## [25] "/home/cbrunos/Documents/golemDemo/dev:"                                
## [26] "total 16"                                                              
## [27] "-rw-r--r-- 1 cbrunos users 1935 Jun 28 11:33 01_start.R"               
## [28] "-rw-r--r-- 1 cbrunos users 2011 Sep 11 23:39 02_dev.R"                 
## [29] "-rw-r--r-- 1 cbrunos users 1012 Jun 28 11:33 03_deploy.R"              
## [30] "-rw-r--r-- 1 cbrunos users  318 Jun 28 11:33 run_dev.R"                
## [31] ""                                                                      
## [32] "/home/cbrunos/Documents/golemDemo/inst:"                               
## [33] "total 8"                                                               
## [34] "drwxr-xr-x 3 cbrunos users 4096 Jun 28 11:33 app/"                     
## [35] "-rw-r--r-- 1 cbrunos users  140 Jun 28 11:38 golem-config.yml"         
## [36] ""                                                                      
## [37] "/home/cbrunos/Documents/golemDemo/inst/app:"                           
## [38] "total 4"                                                               
## [39] "drwxr-xr-x 2 cbrunos users 4096 Jun 28 11:48 www/"                     
## [40] ""                                                                      
## [41] "/home/cbrunos/Documents/golemDemo/inst/app/www:"                       
## [42] "total 12"                                                              
## [43] "-rw-r--r-- 1 cbrunos users    0 Jun 28 11:48 custom.css"               
## [44] "-rw-r--r-- 1 cbrunos users 3774 Jun 28 11:33 favicon.ico"              
## [45] "-rw-r--r-- 1 cbrunos users  100 Jun 28 11:48 handlers.js"              
## [46] "-rw-r--r-- 1 cbrunos users   40 Jun 28 11:48 script.js"                
## [47] ""                                                                      
## [48] "/home/cbrunos/Documents/golemDemo/man:"                                
## [49] "total 8"                                                               
## [50] "-rw-r--r-- 1 cbrunos users 261 Sep 19 21:27 pipe.Rd"                   
## [51] "-rw-r--r-- 1 cbrunos users 291 Jun 28 11:33 run_app.Rd"                
## [52] ""                                                                      
## [53] "/home/cbrunos/Documents/golemDemo/R:"                                  
## [54] "total 48"                                                              
## [55] "-rw-r--r-- 1 cbrunos users  783 Jun 28 11:33 app_config.R"             
## [56] "-rw-r--r-- 1 cbrunos users  654 Jun 29 18:34 app_server.R"             
## [57] "-rw-r--r-- 1 cbrunos users 1790 Sep 12 15:00 app_ui.R"                 
## [58] "-rw-r--r-- 1 cbrunos users    0 Jun 28 11:48 fct_helpers.R"            
## [59] "-rw-rw-r-- 1 cbrunos users  997 Jun 28 11:38 golem_utils_server.R"     
## [60] "-rw-rw-r-- 1 cbrunos users 5849 Jun 28 11:38 golem_utils_ui.R"         
## [61] "-rw-r--r-- 1 cbrunos users  549 Jun 28 11:48 mod_filter_data.R"        
## [62] "-rw-r--r-- 1 cbrunos users 3118 Sep 19 11:16 mod_load_data.R"          
## [63] "-rw-r--r-- 1 cbrunos users 2088 Jun 29 18:30 mod_map_data.R"           
## [64] "-rw-r--r-- 1 cbrunos users  910 Jun 29 18:17 mod_table_data.R"         
## [65] "-rw-r--r-- 1 cbrunos users  337 Jun 28 11:33 run_app.R"                
## [66] "-rw-r--r-- 1 cbrunos users    0 Jun 28 11:48 utils_helpers.R"          
## [67] "-rw-r--r-- 1 cbrunos users  207 Sep 19 21:27 utils-pipe.R"             
## [68] ""                                                                      
## [69] "/home/cbrunos/Documents/golemDemo/rsconnect:"                          
## [70] "total 4"                                                               
## [71] "drwxr-xr-x 3 cbrunos users 4096 Sep 11 17:12 shinyapps.io/"            
## [72] ""                                                                      
## [73] "/home/cbrunos/Documents/golemDemo/rsconnect/shinyapps.io:"             
## [74] "total 4"                                                               
## [75] "drwxr-xr-x 2 cbrunos users 4096 Sep 11 17:12 brodriguesco/"            
## [76] ""                                                                      
## [77] "/home/cbrunos/Documents/golemDemo/rsconnect/shinyapps.io/brodriguesco:"
## [78] "total 4"                                                               
## [79] "-rw-r--r-- 1 cbrunos users 219 Sep 19 21:30 golemdemo.dcf"             
## [80] ""                                                                      
## [81] "/home/cbrunos/Documents/golemDemo/tests:"                              
## [82] "total 8"                                                               
## [83] "drwxr-xr-x 2 cbrunos users 4096 Jun 28 11:48 testthat/"                
## [84] "-rw-r--r-- 1 cbrunos users   62 Jun 28 11:48 testthat.R"               
## [85] ""                                                                      
## [86] "/home/cbrunos/Documents/golemDemo/tests/testthat:"                     
## [87] "total 4"                                                               
## [88] "-rw-r--r-- 1 cbrunos users 64 Jun 28 11:48 test-app.R"                 
## [89] ""                                                                      
## [90] "/home/cbrunos/Documents/golemDemo/vignettes:"                          
## [91] "total 4"                                                               
## [92] "-rw-r--r-- 1 cbrunos users 298 Jun 28 11:48 golemDemo.Rmd"</code></pre>
<p>
The first 16 lines show the root of the folder, and then we see what’s inside each subfolder, starting with <code>data-raw/</code>, then <code>dev/</code> etc (this is done via a call to the <code>ls -lFR</code> Linux command, invoked here with R’s <code>system2()</code> function).
</p>
<p>
If you’ve already developed a package in the past, you’ll recognize the structure. What’s important here is the <code>dev/</code> folder, which is <code>{golem}</code> specific. This folder contains for files, <code>01_start.R</code>, <code>02_dev.R</code>, <code>03_deploy.R</code> and <code>run_dev.R</code>. These files are the ones that will help you develop your shiny app and you should follow the instructions contained in each of them. Let’s take a look at <code>01_start.R</code>:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/dev/01_start.R", stdout = TRUE)</code></pre>
<pre><code>##  [1] "# Building a Prod-Ready, Robust Shiny Application."                                     
##  [2] "# "                                                                                     
##  [3] "# README: each step of the dev files is optional, and you don't have to "               
##  [4] "# fill every dev scripts before getting started. "                                      
##  [5] "# 01_start.R should be filled at start. "                                               
##  [6] "# 02_dev.R should be used to keep track of your development during the project."        
##  [7] "# 03_deploy.R should be used once you need to deploy your app."                         
##  [8] "# "                                                                                     
##  [9] "# "                                                                                     
## [10] "########################################"                                               
## [11] "#### CURRENT FILE: ON START SCRIPT #####"                                               
## [12] "########################################"                                               
## [13] ""                                                                                       
## [14] "## Fill the DESCRIPTION ----"                                                           
## [15] "## Add meta data about your application"                                                
## [16] "golem::fill_desc("                                                                      
## [17] "  pkg_name = \"golemDemo\", # The Name of the package containing the App "              
## [18] "  pkg_title = \"PKG_TITLE\", # The Title of the package containing the App "            
## [19] "  pkg_description = \"PKG_DESC.\", # The Description of the package containing the App "
## [20] "  author_first_name = \"AUTHOR_FIRST\", # Your First Name"                              
## [21] "  author_last_name = \"AUTHOR_LAST\", # Your Last Name"                                 
## [22] "  author_email = \"AUTHOR@MAIL.COM\", # Your Email"                                     
## [23] "  repo_url = NULL # The URL of the GitHub Repo (optional) "                             
## [24] ")     "                                                                                 
## [25] ""                                                                                       
## [26] "## Set {golem} options ----"                                                            
## [27] "golem::set_golem_options()"                                                             
## [28] ""                                                                                       
## [29] "## Create Common Files ----"                                                            
## [30] "## See ?usethis for more information"                                                   
## [31] "usethis::use_mit_license( name = \"Golem User\" )  # You can set another license here"  
## [32] "usethis::use_readme_rmd( open = FALSE )"                                                
## [33] "usethis::use_code_of_conduct()"                                                         
## [34] "usethis::use_lifecycle_badge( \"Experimental\" )"                                       
## [35] "usethis::use_news_md( open = FALSE )"                                                   
## [36] ""                                                                                       
## [37] "## Use git ----"                                                                        
## [38] "usethis::use_git()"                                                                     
## [39] ""                                                                                       
## [40] "## Init Testing Infrastructure ----"                                                    
## [41] "## Create a template for tests"                                                         
## [42] "golem::use_recommended_tests()"                                                         
## [43] ""                                                                                       
## [44] "## Use Recommended Packages ----"                                                       
## [45] "golem::use_recommended_deps()"                                                          
## [46] ""                                                                                       
## [47] "## Favicon ----"                                                                        
## [48] "# If you want to change the favicon (default is golem's one)"                           
## [49] "golem::remove_favicon()"                                                                
## [50] "golem::use_favicon() # path = \"path/to/ico\". Can be an online file. "                 
## [51] ""                                                                                       
## [52] "## Add helper functions ----"                                                           
## [53] "golem::use_utils_ui()"                                                                  
## [54] "golem::use_utils_server()"                                                              
## [55] ""                                                                                       
## [56] "# You're now set! ----"                                                                 
## [57] ""                                                                                       
## [58] "# go to dev/02_dev.R"                                                                   
## [59] "rstudioapi::navigateToFile( \"dev/02_dev.R\" )"                                         
## [60] ""</code></pre>
<p>
This script is a series of calls to <code>{usethis}</code> functions; you can remove whatever you don’t need and adapt the others that you need. As you can see, I did not change much here. Execute it line by line when you’re done editing it. Once you’re done, you can go to <code>02_dev.R</code> and this is probably the script that you’ll change the most:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/dev/02_dev.R", stdout = TRUE)</code></pre>
<pre><code>##  [1] "# Building a Prod-Ready, Robust Shiny Application."                             
##  [2] "# "                                                                             
##  [3] "# README: each step of the dev files is optional, and you don't have to "       
##  [4] "# fill every dev scripts before getting started. "                              
##  [5] "# 01_start.R should be filled at start. "                                       
##  [6] "# 02_dev.R should be used to keep track of your development during the project."
##  [7] "# 03_deploy.R should be used once you need to deploy your app."                 
##  [8] "# "                                                                             
##  [9] "# "                                                                             
## [10] "###################################"                                            
## [11] "#### CURRENT FILE: DEV SCRIPT #####"                                            
## [12] "###################################"                                            
## [13] ""                                                                               
## [14] "# Engineering"                                                                  
## [15] ""                                                                               
## [16] "## Dependencies ----"                                                           
## [17] "## Add one line by package you want to add as dependency"                       
## [18] "usethis::use_package( \"shiny\" )"                                              
## [19] "usethis::use_package( \"shinydashboard\" )"                                     
## [20] "usethis::use_package(\"data.table\") "                                          
## [21] "usethis::use_package(\"DT\")"                                                   
## [22] "usethis::use_package(\"dplyr\")"                                                
## [23] "usethis::use_package(\"rlang\")"                                                
## [24] "usethis::use_package(\"ggiraph\")"                                              
## [25] "usethis::use_package(\"ggplot2\")"                                              
## [26] "usethis::use_package(\"htmlwidgets\")"                                          
## [27] "usethis::use_package(\"dplyr\")"                                                
## [28] "usethis::use_package(\"colorspace\")"                                           
## [29] "usethis::use_package(\"shinycssloaders\")"                                      
## [30] "usethis::use_package(\"lubridate\")"                                            
## [31] ""                                                                               
## [32] "## Add modules ----"                                                            
## [33] "## Create a module infrastructure in R/"                                        
## [34] "golem::add_module( name = \"name_of_module1\" ) # Name of the module"           
## [35] "golem::add_module( name = \"name_of_module2\" ) # Name of the module"           
## [36] ""                                                                               
## [37] "## Add helper functions ----"                                                   
## [38] "## Creates ftc_* and utils_*"                                                   
## [39] "golem::add_fct( \"helpers\" ) "                                                 
## [40] "golem::add_utils( \"helpers\" )"                                                
## [41] ""                                                                               
## [42] "## External resources"                                                          
## [43] "## Creates .js and .css files at inst/app/www"                                  
## [44] "golem::add_js_file( \"script\" )"                                               
## [45] "golem::add_js_handler( \"handlers\" )"                                          
## [46] "golem::add_css_file( \"custom\" )"                                              
## [47] ""                                                                               
## [48] "## Add internal datasets ----"                                                  
## [49] "## If you have data in your package"                                            
## [50] "usethis::use_data_raw( name = \"my_dataset\", open = FALSE ) "                  
## [51] ""                                                                               
## [52] "## Tests ----"                                                                  
## [53] "## Add one line by test you want to create"                                     
## [54] "usethis::use_test( \"app\" )"                                                   
## [55] ""                                                                               
## [56] "# Documentation"                                                                
## [57] ""                                                                               
## [58] "## Vignette ----"                                                               
## [59] "usethis::use_vignette(\"golemDemo\")"                                           
## [60] "devtools::build_vignettes()"                                                    
## [61] ""                                                                               
## [62] "## Code coverage ----"                                                          
## [63] "## (You'll need GitHub there)"                                                  
## [64] "usethis::use_github()"                                                          
## [65] "usethis::use_travis()"                                                          
## [66] "usethis::use_appveyor()"                                                        
## [67] ""                                                                               
## [68] "# You're now set! ----"                                                         
## [69] "# go to dev/03_deploy.R"                                                        
## [70] "rstudioapi::navigateToFile(\"dev/03_deploy.R\")"                                
## [71] ""</code></pre>
<p>
This is where you will list the dependencies of your package (lines 18 to 30) as well as the modules (lines 34 to 35). I have mostly used this file for the dependencies, as I already had the modules from another app, so I didn’t bother listing them here. But if I would have started from scratch, I would changed the line:
</p>
<pre><code>golem::add_module( name = \"name_of_module1\" ) # Name of the module</code></pre>
<p>
to something like:
</p>
<pre><code>golem::add_module( name = \"import_data\" ) # Name of the module</code></pre>
<p>
and executing it would have generated the needed files to start creating the module at the right spot. Let’s go see how such a module looks like (I’m skipping the third script for now, as it is only useful once you want to deploy).
</p>
<p>
You can find the modules in the <code>R/</code> folder. Let’s take a look at the module that allows the user to load the data:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/R/mod_load_data.R", stdout = TRUE)</code></pre>
<pre><code>##   [1] "#' load_data UI Function"                                                                                                    
##   [2] "#'"                                                                                                                          
##   [3] "#' @description A shiny Module."                                                                                             
##   [4] "#'"                                                                                                                          
##   [5] "#' @param id,input,output,session Internal parameters for {shiny}."                                                          
##   [6] "#'"                                                                                                                          
##   [7] "#' @noRd "                                                                                                                   
##   [8] "#'"                                                                                                                          
##   [9] "#' @importFrom shiny NS tagList "                                                                                            
##  [10] "#' @importFrom data.table fread"                                                                                             
##  [11] "#' @importFrom DT renderDataTable dataTableOutput"                                                                           
##  [12] "#' @importFrom dplyr filter"                                                                                                 
##  [13] "#' @importFrom rlang quo `!!` as_name"                                                                                       
##  [14] "mod_load_data_ui &lt;- function(id){"                                                                                           
##  [15] "  ns &lt;- NS(id)"                                                                                                              
##  [16] "  tagList("                                                                                                                  
##  [17] "    box(title = \"Select dataset\","                                                                                         
##  [18] "        radioButtons(ns(\"select_dataset\"),"                                                                                
##  [19] "                    label = \"Select dataset\","                                                                             
##  [20] "                    choices = c(\"Rescue points\", \"Radars\"),"                                                             
##  [21] "                    selected = c(\"Rescue points\")),"                                                                       
##  [22] "        conditionalPanel("                                                                                                   
##  [23] "          condition = paste0('input[\\'', ns('select_dataset'), \"\\'] == \\'Rescue points\\'\"),"                           
##  [24] "          selectInput(ns(\"selector_place\"), \"Place\","                                                                    
##  [25] "                      choices = c(\"test\"),"                                                                                
##  [26] "                      #choices = c(unique(output$dataset$place)),"                                                           
##  [27] "                      selected = c(\"Luxembourg, Ville (G)\"),"                                                              
##  [28] "                      multiple = TRUE)),"                                                                                    
##  [29] "        conditionalPanel("                                                                                                   
##  [30] "          condition = paste0('input[\\'', ns('select_dataset'), \"\\'] == \\'Radars\\'\"),"                                  
##  [31] "          selectInput(ns(\"selector_radar\"), \"Radar\","                                                                    
##  [32] "                      choices = c(\"test\"),"                                                                                
##  [33] "                      #choices = c(\"huhu\"),"                                                                               
##  [34] "                      selected = c(\"National road\"),"                                                                      
##  [35] "                      multiple = TRUE)),"                                                                                    
##  [36] "        width = NULL),"                                                                                                      
##  [37] "  )"                                                                                                                         
##  [38] "}"                                                                                                                           
##  [39] ""                                                                                                                            
##  [40] "#' load_data Server Function"                                                                                                
##  [41] "#'"                                                                                                                          
##  [42] "#' @noRd "                                                                                                                   
##  [43] "mod_load_data_server &lt;- function(input, output, session){"                                                                   
##  [44] "  ns &lt;- session$ns"                                                                                                          
##  [45] " "                                                                                                                           
##  [46] "  "                                                                                                                          
##  [47] "  read_dataset &lt;- reactive({"                                                                                                
##  [48] "    if(input$select_dataset == \"Rescue points\") {"                                                                         
##  [49] ""                                                                                                                            
##  [50] "      dataset &lt;- fread(\"data-raw/rettungspunkte.csv\")"                                                                     
##  [51] "      variable &lt;- quo(place)"                                                                                                
##  [52] "      filter_values &lt;- unique(dataset[, place])"                                                                             
##  [53] "    } else {"                                                                                                                
##  [54] "      dataset &lt;- fread(\"data-raw/radars.csv\")"                                                                             
##  [55] "      variable &lt;- quo(type_road)"                                                                                            
##  [56] "      filter_values &lt;- unique(dataset[, type_road])"                                                                         
##  [57] "    }"                                                                                                                       
##  [58] "    cat(\"reading data\\n\")"                                                                                                
##  [59] "    list(dataset = dataset,"                                                                                                 
##  [60] "         variable = variable,"                                                                                               
##  [61] "         filter_values = filter_values)"                                                                                     
##  [62] "  })"                                                                                                                        
##  [63] ""                                                                                                                            
##  [64] ""                                                                                                                            
##  [65] "  observe({"                                                                                                                 
##  [66] "    updateSelectInput(session, \"selector_place\", label = \"Select place:\", choices = read_dataset()$filter_values,"       
##  [67] "                      selected = \"Luxembourg, Ville (G)\")"                                                                 
##  [68] "  })"                                                                                                                        
##  [69] ""                                                                                                                            
##  [70] "  observe({"                                                                                                                 
##  [71] "    updateSelectInput(session, \"selector_radar\", label = \"Select type of road:\", choices = read_dataset()$filter_values,"
##  [72] "                      selected = \"National road\")"                                                                         
##  [73] "  })"                                                                                                                        
##  [74] ""                                                                                                                            
##  [75] "  result &lt;- reactive({"                                                                                                      
##  [76] "    return_dataset &lt;- read_dataset()$dataset"                                                                                
##  [77] ""                                                                                                                            
##  [78] "    if(\"place\" %in% colnames(return_dataset)){"                                                                            
##  [79] "      return_dataset &lt;- return_dataset %&gt;%"                                                                                  
##  [80] "        filter((!!read_dataset()$variable) %in% input$selector_place)"                                                       
##  [81] ""                                                                                                                            
##  [82] "      result &lt;- list("                                                                                                       
##  [83] "        return_dataset = return_dataset,"                                                                                    
##  [84] "        variable = quo(place)"                                                                                               
##  [85] "      )"                                                                                                                     
##  [86] "    } else {"                                                                                                                
##  [87] "      return_dataset &lt;- return_dataset %&gt;%"                                                                                  
##  [88] "        filter((!!read_dataset()$variable) %in% input$selector_radar)"                                                       
##  [89] ""                                                                                                                            
##  [90] "      result &lt;- list("                                                                                                       
##  [91] "        return_dataset = return_dataset,"                                                                                    
##  [92] "        variable = quo(type_road)"                                                                                           
##  [93] "      )"                                                                                                                     
##  [94] "    }"                                                                                                                       
##  [95] "  })"                                                                                                                        
##  [96] ""                                                                                                                            
##  [97] "  result"                                                                                                                    
##  [98] "}"                                                                                                                           
##  [99] "    "                                                                                                                        
## [100] "## To be copied in the UI"                                                                                                   
## [101] "# mod_load_data_ui(\"load_data_ui_1\")"                                                                                      
## [102] "    "                                                                                                                        
## [103] "## To be copied in the server"                                                                                               
## [104] "# callModule(mod_load_data_server, \"load_data_ui_1\")"                                                                      
## [105] " "</code></pre>
<p>
This scripts looks like a mini Shiny app; there’s a UI defined at the top of the script, and then a server defined at the bottom (I’m not describing what the module does here, I’ll do that in the video). What’s important here, is that this is a module and as such it can be reused in any app, by simply copying the right lines of code at the right spot. See lines 100 to 104 for this, which tells you exactly where to copy the lines to use this module. All the modules will look the same, and have this little explanation at the bottom to tell you where you need to copy the lines to use the modules. While building each module, you can use <code>{shinipsum}</code> instead of having to bother about the server logic, just to get things going, as explained above.
</p>
<p>
Now, finally, let’s take a look at the actual UI of the app:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/R/app_ui.R", stdout = TRUE)</code></pre>
<pre><code>##  [1] "#' The application User-Interface"                                                          
##  [2] "#' "                                                                                        
##  [3] "#' @param request Internal parameter for `{shiny}`. "                                       
##  [4] "#'     DO NOT REMOVE."                                                                      
##  [5] "#' @import shiny"                                                                           
##  [6] "#' @import shinydashboard"                                                                  
##  [7] "#' @noRd"                                                                                   
##  [8] "app_ui &lt;- function(request) {"                                                              
##  [9] "  tagList("                                                                                 
## [10] "                                        # Leave this function for adding external resources"
## [11] "    golem_add_external_resources(),"                                                        
## [12] "                                        # List the first level UI elements here"            
## [13] "    dashboardPage("                                                                         
## [14] "      dashboardHeader(title = \"Prototype: dashboard ecoles\"),"                            
## [15] "      dashboardSidebar("                                                                    
## [16] "        sidebarMenu("                                                                       
## [17] "          menuItem(\"Carte\", tabName = \"Carte\", icon = icon(\"map\")),"                  
## [18] "          menuItem(\"Tab 2\", tabName = \"tab_2\", icon = icon(\"chart-line\"))"            
## [19] "        )"                                                                                  
## [20] "      ),"                                                                                   
## [21] "      dashboardBody("                                                                       
## [22] "        tabItems("                                                                          
## [23] "          tabItem(tabName = \"Carte\","                                                     
## [24] "                  fluidRow("                                                                
## [25] "                    column("                                                                
## [26] "                      width = 4,"                                                           
## [27] "                      mod_load_data_ui(\"load_data_ui_1\"),"                                
## [28] "                      mod_table_data_ui(\"table_data_ui_1\")"                               
## [29] "                    ),"                                                                     
## [30] "                    column("                                                                
## [31] "                      width = 6, offset = 2,"                                               
## [32] "                      mod_map_data_ui(\"map_data_ui_1\")"                                   
## [33] "                    )"                                                                      
## [34] "                  ))"                                                                       
## [35] "        )"                                                                                  
## [36] "      )"                                                                                    
## [37] "    )"                                                                                      
## [38] "  )"                                                                                        
## [39] "}"                                                                                          
## [40] ""                                                                                           
## [41] "#' Add external Resources to the Application"                                               
## [42] "#' "                                                                                        
## [43] "#' This function is internally used to add external "                                       
## [44] "#' resources inside the Shiny application. "                                                
## [45] "#' "                                                                                        
## [46] "#' @import shiny"                                                                           
## [47] "#' @importFrom golem add_resource_path activate_js favicon bundle_resources"                
## [48] "#' @noRd"                                                                                   
## [49] "golem_add_external_resources &lt;- function(){"                                                
## [50] "  "                                                                                         
## [51] "  add_resource_path("                                                                       
## [52] "    'www', app_sys('app/www')"                                                              
## [53] "  )"                                                                                        
## [54] " "                                                                                          
## [55] "  tags$head("                                                                               
## [56] "    favicon(),"                                                                             
## [57] "    bundle_resources("                                                                      
## [58] "      path = app_sys('app/www'),"                                                           
## [59] "      app_title = 'golemDemo'"                                                              
## [60] "    )"                                                                                      
## [61] "    # Add here other external resources"                                                    
## [62] "    # for example, you can add shinyalert::useShinyalert() "                                
## [63] "  )"                                                                                        
## [64] "}"                                                                                          
## [65] ""</code></pre>
<p>
this is the “global” UI of the app. This looks like any other Shiny UI, but instead of having many many lines of code, there’s basically only calls to the UIs of each modules (see lines 27 and 28). And that’s it! It keeps your code quite small and much easier to reason about. You’ll find something even simpler for the server:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/R/app_server.R", stdout = TRUE)</code></pre>
<pre><code>##  [1] "#' The application server-side"                                              
##  [2] "#' "                                                                         
##  [3] "#' @param input,output,session Internal parameters for {shiny}. "            
##  [4] "#'     DO NOT REMOVE."                                                       
##  [5] "#' @import shiny"                                                            
##  [6] "#' @noRd"                                                                    
##  [7] "app_server &lt;- function( input, output, session ) {"                          
##  [8] "  # List the first level callModules here"                                   
##  [9] ""                                                                            
## [10] "  result &lt;- callModule(mod_load_data_server, \"load_data_ui_1\")"            
## [11] ""                                                                            
## [12] "  callModule(mod_table_data_server, \"table_data_ui_1\", result)"            
## [13] "  "                                                                          
## [14] ""                                                                            
## [15] "  selected_lines &lt;- reactive({"                                              
## [16] "    if(is.null(input$`table_data_ui_1-dataset_rows_selected`)){"             
## [17] "      return(TRUE)"                                                          
## [18] "    } else {"                                                                
## [19] "      as.numeric(input$`table_data_ui_1-dataset_rows_selected`)"             
## [20] "    }"                                                                       
## [21] "  })"                                                                        
## [22] ""                                                                            
## [23] "  callModule(mod_map_data_server, \"map_data_ui_1\", result, selected_lines)"
## [24] ""                                                                            
## [25] "}"</code></pre>
<p>
Line 10 calls the server side of the “load data” module, and saves the result (a data frame) into a variable called <code>result</code>. This result is then passed as an argument to the server side of table data module, which simply shows a table of the data. From lines 15 to 21, I define a variable called <code>selected-lines</code> in which the lines that the user selects in the data table are saved. This gave me some headaches, because I needed to find the right syntax. I was able to find it thanks to a Stackoverflow post that I have now lost since then… but the idea is that the indices of the selected rows are saved into a variable called <code>dataset_rows_selected</code> and this variable name must be appended to the name of the UI of the table where the table is. If no row is selected, then this object should be <code>TRUE</code>; why? Because if you filter a data frame with a condition that simply evaluates always to <code>TRUE</code>, you get all the rows back, and thus, all of the data frame. If you start selecting rows, say, rows number 2, 8 and 12, then <code>dataset_rows_selected</code> will be equal to <code>c(2, 8, 12)</code>, and the filter will return these rows.
</p>
<p>
Finally, I call the module that returns a map of Luxembourg, and pass both the data frame, saved in the <code>result</code> variable, and the <code>selected_lines</code> objects as arguments. And that’s how you make modules communicate and share data with each other, just like you would chain functions together. I won’t go through each module, but there’s several other interesting tricks that I’ll discuss during the video; for instance, I’m quite happy with the module that loads the data; the user can choose between two different dataset, and the select input will update with the right columns. This also wasn’t so easy to do, but it’ll be easier to explain during a video, so stay tuned!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2020-09-27-golemDemo.html</guid>
  <pubDate>Sun, 27 Sep 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Raspberry Pi 4B as a shiny server</title>
  <link>https://b-rodrigues.github.io/posts/2020-09-20-shiny_raspberry.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=2mSEEHblJqw"> <img src="https://b-rodrigues.github.io/assets/img/virgin_chad.png" title="Not everyone can be a chad shiny dev" width="80%" height="auto"></a>
</p>
</div>
<p>
This blog post will not have any code, but will document how I went from hosting apps on <a href="https://www.shinyapps.io">shinyapps.io</a> to hosting shiny apps on my own server, which is a Raspberry Pi 4B with 8 gigs of ram. First of all, why hosting apps on a Raspberry Pi? And why not continue on <a href="https://www.shinyapps.io">shinyapps.io</a>? Or why not get one of hose nifty droplets on DigitalOcean? Well for two reasons; one is that I wanted to have full control of the server, and learn some basic web dev/web engineering skills that I lacked. These services simplify the process of deploying and hosting a lot, which of course is a good thing if your only goal is to deploy apps. But I wanted to learn how to do it myself from scratch for some time. True, with a DigitalOcean droplet, I could have learned quite a lot about the whole process as well, but there’s a second problem; the minimum amount of processing power that the droplet needed to run shiny came at 10€ a month. Not a fortune, but already quite expensive for me, since I just wanted to learn some stuff on my free time. Which is why I got a Raspberry Pi 4B with 8 gigs of ram. It’s less than 100€, and now that I have it, I can do whatever I want whenever I want to. If I don’t touch it for several months, no harm done. And if I get tired of it, I’ll make a retro console out of it and play some old schools games. It’s a win-win situation if you ask me.
</p>
<p>
So first, you should get a Raspberry Pi. Those are quite easy to find online, and there’s many tutorials available on how to install Ubuntu (or any other Linux distro) on it, so I won’t bother with that. I also won’t explain to you how to ssh into your Raspberry Pi, again, there’s many tutorials online. More importantly, is how to get Shiny on it? There’s two solutions; you either install it from source, or you use Docker. I chose to use Docker, but maybe not in the way you’d expect; there’s a lot of talk online about dockerizing apps, complete with all their dependencies and environment. The advantage is that you’re guaranteed that deployment with be very smooth. But the big disadvantage is that these dockerized apps are huge, around 1GB, or sometimes more. It is true that disk space is quite cheap nowadays, but still… so I prefer to run a Shiny server from Docker, and then run the apps out of this server. My apps are thus very small, and it’s only the Shiny server that is huge. I found a Github repository from user <code>havlev</code> that explains how to do it <a href="https://github.com/hvalev/rpi-shiny-server-docker">here</a>. I have followed this guide, and created my own docker container, which is based on <code>havlev</code>’s one. I added some dependencies (to the base Debian distro included, as well as some more R packages).
</p>
<p>
If you’re in a hurry, and want to use my Docker image, you can simply type the following on your Raspberry pi:
</p>
<pre><code>mkdir shiny-server
cd shiny-server
mkdir apps
mkdir conf
mkdir logs
docker run -d -p 3838:3838 -v shiny-apps:/srv/shiny-server/ -v shiny-logs:/var/log/ -v shiny-conf:/etc/shiny-server/ --name rpi-shiny-server brodriguesco/shiny_1_5:firstcommit</code></pre>
<p>
The first 5 commands will create some folders that we’ll need later on, while the last one will pull my Docker container, which is based on <code>havlev</code>’s one, launch the server and it’ll start listening to port 3838.
</p>
<p>
I made an app (another blog post, focusing on this app, will follow soon), hosted on my Raspberry Pi that you can find <a href="http://shinybrodriguesco.duckdns.org:3838/golemDemo/">here</a>. I’ll also give you some pointers on how you can achieve that.
</p>
<p>
But let’s start from the beginning.
</p>
<section id="adding-dependencies-to-a-docker-container" class="level2">
<h2 class="anchored" data-anchor-id="adding-dependencies-to-a-docker-container">
Adding dependencies to a Docker container
</h2>
<p>
So let’s suppose that you’re me a few weeks ago, and that you find and follow <code>havlev</code>’s guide <a href="https://github.com/hvalev/rpi-shiny-server-docker">here</a>. Getting the docker running is quite easy, you just need to set up Docker, and then find the line in the tutorial that starts with <code>docker run</code>…. You’ll get Shiny running with its hello world app. Now, how can you add more packages, either to the base Debian image, or R packages? For this part, I followed <a href="https://ropenscilabs.github.io/r-docker-tutorial/03-install-packages.html">this guide</a>. The idea is to “log in” to the console of the base Debian distro that is running from the container. First, find the ID of the container by typing the following command in the terminal:
</p>
<pre><code>docker ps</code></pre>
<p>
You should see something like this:
</p>
<pre><code>ubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE                                COMMAND                  CREATED              STATUS              PORTS                    NAMES
69420blazeit        brodriguesco/shiny_1_5:firstcommit   "/etc/shiny-server/i…"   About a minute ago   Up About a minute   0.0.0.0:3838-&gt;3838/tcp   rpi-shiny-server</code></pre>
<p>
now with the ID in hand, you can start any command line program from your Docker container, for instance bash:
</p>
<pre><code>docker exec -it 69420blazeit bash</code></pre>
<p>
You’ll be “logged in” as root:
</p>
<pre><code>root@69420blazeit:/# </code></pre>
<p>
and from there, you can install Debian packages. The following two packages are necessary to install many R packages from source, so I recommend you install them:
</p>
<pre><code>root@69420blazeit:/# apt-get install libssl-dev libxml2-dev</code></pre>
<p>
Once these Debian packages are installed, you can start R by simply typing <code>R</code> in the same console, and install whatever packages your Shiny apps will need. In my case, I installed <code>{golem}</code> and several others, but this will be the subject of another blog post. We’re almost done with that; we now need to save the changes because if you restart the container, you’ll lose all these changes. To save these changes, let’s run the following command, but in a new terminal on your Raspberry Pi (on the “local” Ubuntu, not the Debian running in the container):
</p>
<pre><code>ubuntu@ubuntu:~$ docker commit -m "added some dependencies" 69420blazeit shiny_with_deps</code></pre>
<p>
So now you could run this container with the command from above, by replacing the adequate parts:
</p>
<pre><code>docker run -d -p 3838:3838 -v shiny-apps:/srv/shiny-server/ -v shiny-logs:/var/log/ -v shiny-conf:/etc/shiny-server/ --name rpi-shiny-server shiny_with_depsshiny_with_deps</code></pre>
</section>
<section id="using-your-shiny-server" class="level2">
<h2 class="anchored" data-anchor-id="using-your-shiny-server">
Using your Shiny server
</h2>
<p>
Ok so now that the server is running, you can you deploy apps on it? Remember the folders that we created at the beginning of the blog post (or that you created if you followed <code>havlev</code>’s guide)? This is where you’ll drop your apps, the usual way. You create a folder there, and simply put the <code>ui.R</code> and <code>server.R</code> files in here, and that it. These folders can be found in your <code>$HOME</code> directory, and they are accessible to your docker container as well. Once you dropped one or two apps, you’ll be able to access them on a link similar as this one:
</p>
<pre><code>http://192.168.178.55:3838/hello/</code></pre>
<p>
where <code>192.168.178.55</code> is the local IP address of the Raspberry Pi, <code>3838</code> is the port the server is listening to, and <code>/hello/</code> is the name of the subfolder contained in the <code>~/shiny-server/apps</code> folder that you created before. What is left doing is making your Raspberry Pi a proper server that can be accessed from the internet. For this, you’ll need to ask your ISP for a dynamic IP address. Generally, you’ll have to pay some money for it; in my case, I’m paying 2€ a month. This address can then be used to access your Raspberry Pi from the internet. The problem, is that being dynamic, the address changes every time you restart your server. To solve this issue, you can use a free dynamic DNS. I use <a href="https://www.duckdns.org/">duckdns</a>. This will allow you to have domain that you can share with the world. What’s nice is that if you follow their <a href="https://www.duckdns.org/install.jsp">guide</a> the redirection to the dynamic IP address will happen seamlessly every time it changes, so no need to think about it and do it manually.
</p>
<p>
Finally, you’ll also have to open up port <code>3838</code> on your router. The procedure changes from router to router, but you should be able to find the instructions for your router quite easily. If not, you should also be able to get help from your ISP.
</p>
<p>
The end result is that you’ll have your own Shiny server running off a Raspberry Pi, and accessible over the internet! You’ll be able to deploy as many apps as you want, but of course, don’t forget that you’re running all this on a Raspberry Pi. While these machines have become quite powerful over the years, they won’t be powerful enough if you’re running some heavy duty apps with hundreds of concurrent users.
</p>
<p>
In my next blog post, I’ll walk you through the development of a Shiny app using the <code>{golem}</code> package, which you can find <a href="http://shinybrodriguesco.duckdns.org:3838/golemDemo/">here</a>.
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2020-09-20-shiny_raspberry.html</guid>
  <pubDate>Sun, 20 Sep 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Gotta go fast with “{tidytable}”</title>
  <link>https://b-rodrigues.github.io/posts/2020-09-05-tidytable.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=SXrbYw_AqQA"> <img src="https://b-rodrigues.github.io/assets/img/kaamelott.jpg" title="If there's one good reason to learn French, it's Kaamelott" width="80%" height="auto"></a>
</p>
</div>
<p>
I’m back in business! After almost 5 months of hiatus, during which I was very busy with my new job, and new house, I’m in a position where I can write again. To celebrate my comeback, I’ll introduce to you the <code>{tidytable}</code> package, which I learned about this week on Twitter.
</p>
<p>
<code>{tidytable}</code> is a package that allows you to manipulate <code>data.table</code> objects with the speed of <code>{data.table}</code> and the convenience of the <code>{tidyverse}</code> syntax. My first reaction when I heard about <code>{tidytable}</code> was <em>how is that different from <code>{dtplyr}</code></em>? Well, <code>{dtplyr}</code> focuses on providing a <code>{data.table}</code> backend for <code>{dplyr}</code>, while <code>{tidytable}</code> also allows you to use other <code>{tidyverse}</code> verbs on <code>data.table</code> objects, for instance some <code>{tidyr}</code> and <code>{purrr}</code> verbs.
</p>
<p>
Another very interesting feature of <code>{tidytable}</code> is that it supports <code>{rlang}</code>, which means that you can program with <code>{tidytable}</code>, which, as far as I know, is not possible with <code>{dtplyr}</code> (but fact-check me on that please).
</p>
<p>
So to summarise, the speed of <code>{data.table}</code> and the syntax of the <code>{tidyverse}</code>, plus verbs for <code>{tidyr}</code> and <code>{purrr}</code>? Sign me up!
</p>
<p>
To illustrate, I have downloaded a data set and wrote a function in both a <code>{tidyverse}</code> version and a <code>{tidytable}</code> version. Even though it is true that <code>{tidytable}</code>’s syntax is very much, almost the same as the regular <code>{tidyverse}</code> syntax, there are some minor differences. But more on that later. First, let’s get the data, which you can find <a href="https://archive.ics.uci.edu/ml/datasets/Appliances+energy+prediction">here</a>. Then, let’s load the needed packages:
</p>
<pre class="r"><code>library(tidyverse)
library(data.table)
library(tidytable)
library(readr)</code></pre>
<p>
and let’s take a look at the data a little bit:
</p>
<pre class="r"><code>energy &lt;- read.csv("~/Downloads/energydata_complete.csv")

head(energy)</code></pre>
<pre><code>##                  date Appliances lights    T1     RH_1   T2     RH_2    T3
## 1 2016-01-11 17:00:00         60     30 19.89 47.59667 19.2 44.79000 19.79
## 2 2016-01-11 17:10:00         60     30 19.89 46.69333 19.2 44.72250 19.79
## 3 2016-01-11 17:20:00         50     30 19.89 46.30000 19.2 44.62667 19.79
## 4 2016-01-11 17:30:00         50     40 19.89 46.06667 19.2 44.59000 19.79
## 5 2016-01-11 17:40:00         60     40 19.89 46.33333 19.2 44.53000 19.79
## 6 2016-01-11 17:50:00         50     40 19.89 46.02667 19.2 44.50000 19.79
##       RH_3       T4     RH_4       T5  RH_5       T6     RH_6       T7     RH_7
## 1 44.73000 19.00000 45.56667 17.16667 55.20 7.026667 84.25667 17.20000 41.62667
## 2 44.79000 19.00000 45.99250 17.16667 55.20 6.833333 84.06333 17.20000 41.56000
## 3 44.93333 18.92667 45.89000 17.16667 55.09 6.560000 83.15667 17.20000 41.43333
## 4 45.00000 18.89000 45.72333 17.16667 55.09 6.433333 83.42333 17.13333 41.29000
## 5 45.00000 18.89000 45.53000 17.20000 55.09 6.366667 84.89333 17.20000 41.23000
## 6 44.93333 18.89000 45.73000 17.13333 55.03 6.300000 85.76667 17.13333 41.26000
##     T8     RH_8       T9  RH_9    T_out Press_mm_hg RH_out Windspeed Visibility
## 1 18.2 48.90000 17.03333 45.53 6.600000       733.5     92  7.000000   63.00000
## 2 18.2 48.86333 17.06667 45.56 6.483333       733.6     92  6.666667   59.16667
## 3 18.2 48.73000 17.00000 45.50 6.366667       733.7     92  6.333333   55.33333
## 4 18.1 48.59000 17.00000 45.40 6.250000       733.8     92  6.000000   51.50000
## 5 18.1 48.59000 17.00000 45.40 6.133333       733.9     92  5.666667   47.66667
## 6 18.1 48.59000 17.00000 45.29 6.016667       734.0     92  5.333333   43.83333
##   Tdewpoint      rv1      rv2
## 1       5.3 13.27543 13.27543
## 2       5.2 18.60619 18.60619
## 3       5.1 28.64267 28.64267
## 4       5.0 45.41039 45.41039
## 5       4.9 10.08410 10.08410
## 6       4.8 44.91948 44.91948</code></pre>
<p>
As you can see, this data is wide, and not long. Variables, or features, <code>T1</code> to <code>T9</code> provide the temperature of 9 rooms, and <code>RH_1</code> to <code>RH_9</code> provide the humidity of the same 9 rooms.
</p>
<p>
What if I’d like to make a plot of each room’s temperature throughout the year? In this format, it is not possible. So let’s reshape this a little bit:
</p>
<pre class="r"><code>flat_energy &lt;- energy %&gt;% 
  pivot_longer(cols = matches("T\\d{1}"), names_to = "temperature", values_to = "temp_value") %&gt;% 
  pivot_longer(cols = matches("RH_\\d{1}"), names_to = "humidity", values_to = "hum_value") %&gt;%
  mutate(temperature = case_when(temperature == "T1" ~ "kitchen",
                                 temperature == "T2" ~ "living",
                                 temperature == "T3" ~ "laundry",
                                 temperature == "T4" ~ "office",
                                 temperature == "T5" ~ "bathroom",
                                 temperature == "T6" ~ "north",
                                 temperature == "T7" ~ "ironing",
                                 temperature == "T8" ~ "teenager",
                                 temperature == "T9" ~ "parents")) %&gt;%  
  mutate(humidity = case_when(humidity == "RH_1" ~ "kitchen",
                                 humidity == "RH_2" ~ "living",
                                 humidity == "RH_3" ~ "laundry",
                                 humidity == "RH_4" ~ "office",
                                 humidity == "RH_5" ~ "bathroom",
                                 humidity == "RH_6" ~ "north",
                                 humidity == "RH_7" ~ "ironing",
                                 humidity == "RH_8" ~ "teenager",
                              humidity == "RH_9" ~ "parents"))</code></pre>
<p>
As explained above, there are two variables that need this treatment; the temperature, and the humidity levels. In order to plot the average monthly temperature in each room, I need to use <code>tidyr::pivot_longer()</code> (a little side note, I could have used <code>names_to = “room”</code>, instead of <code>“temperature”</code> and <code>“humidity”</code>, but there’s a reason for that. More on it below).
</p>
<p>
Now let’s plot it:
</p>
<pre class="r"><code>flat_energy %&gt;%
  mutate(month = month(date)) %&gt;%  
  group_by(month, temperature) %&gt;%
  summarise(avg_temp = mean(temp_value)) %&gt;%  
  ggplot() +
  geom_line(aes(y = avg_temp, x = month, col = temperature)) +
  brotools::theme_blog()</code></pre>
<pre><code>## `summarise()` regrouping output by 'month' (override with `.groups` argument)</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/tidytable-5-1.png" width="80%" height="auto"> Ok great. But what if I had such a dataset per house for a whole city? How many datasets would that be? And how long would these operations take? The first step I would take if I were in this situation, would be to write a function. I would make it general enough to work with temperature or humidity. Below is this function:
</p>
<pre class="r"><code>prepare_data &lt;- function(energy, variable){

  variable &lt;- enquo(variable)

  variable_label &lt;- as_label(variable)

  regex_selector &lt;- ifelse(variable_label == "temperature",
                           "T\\d{1}",
                           "RH_\\d{1}")
energy %&gt;%
  pivot_longer(cols = matches(regex_selector),
               names_to = variable_label,
               values_to = paste0(variable_label, "_value")) %&gt;%
    mutate(!!(variable) := case_when(grepl("1$", !!(variable)) ~ "kitchen",
                                    grepl("2$", !!(variable)) ~ "living",
                                    grepl("3$", !!(variable)) ~ "laundry",
                                    grepl("4$", !!(variable)) ~ "office",
                                    grepl("5$", !!(variable)) ~ "bathroom",
                                    grepl("6$", !!(variable)) ~ "outside",
                                    grepl("7$", !!(variable)) ~ "ironing",
                                    grepl("8$", !!(variable)) ~ "teenager",
                                    grepl("9$", !!(variable)) ~ "parents")) %&gt;%
  mutate(month = month(date)) %&gt;%  
  group_by(month, !!(variable)) %&gt;%
  summarise(across(.cols = ends_with("_value"),
                   .fns = mean),
            .groups = "drop")
}</code></pre>
<p>
This function does exactly the same thing as above:
</p>
<pre class="r"><code>prepare_data(energy, temperature) %&gt;%
  ggplot() +
  geom_line(aes(y = temperature_value, x = month, col = temperature)) +
  brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/tidytable-7-1.png" width="80%" height="auto">
</p>
<p>
As you can see, I have the exact same plot. What’s nice with this function, is that it uses many verbs from the <code>{tidyverse}</code> as well as the tidy eval framework for non-standard evaluation ( which is why I did not use <code>names_to = “room”</code>, I wanted to use the variable label defined with <code>as_label()</code> and see if it works with <code>{tidytable}</code> as well). Ok, so now let’s imagine that I’m happy with this function, but I’d like it to run faster, and because I’m lazy, the less I have to modify it, the happier I am. This is where <code>{tidytable}</code> looks very promising. Let’s rewrite the function to make it work with <code>{tidytable}</code>:
</p>
<pre class="r"><code>prepare_data_dt &lt;- function(energy, variable){

  variable &lt;- enquo(variable)

  variable_label &lt;- as_label(variable)

  regex_selector &lt;- ifelse(variable_label == "temperature",
                           "T\\d{1}",
                           "RH_\\d{1}")
energy %&gt;%
  pivot_longer.(cols = matches(regex_selector),
               names_to = variable_label,
               values_to = paste0(variable_label, "_value")) %&gt;%
    mutate.(!!(variable) := case_when(grepl("1$", !!(variable)) ~ "kitchen",
                                    grepl("2$", !!(variable)) ~ "living",
                                    grepl("3$", !!(variable)) ~ "laundry",
                                    grepl("4$", !!(variable)) ~ "office",
                                    grepl("5$", !!(variable)) ~ "bathroom",
                                    grepl("6$", !!(variable)) ~ "outside",
                                    grepl("7$", !!(variable)) ~ "ironing",
                                    grepl("8$", !!(variable)) ~ "teenager",
                                    grepl("9$", !!(variable)) ~ "parents")) %&gt;%  
  mutate.(month = month(date)) %&gt;%  
  summarise_across.(.cols = ends_with("_value"),
                    .fns = mean,
                    .by = c(month, !!(variable))) %&gt;%  
  ungroup()
}</code></pre>
<p>
As you can see, it’s <em>almost</em> the same thing. <code>{tidytable}</code> verbs end with a <code>‘.’</code> and that’s it. Well almost (again), the biggest difference is how <code>{tidytable}</code> groups by a variable. It’s very similar to how it’s done in <code>{data.table}</code>, by using a <code>.by =</code> argument to verbs that support it, such as <code>summarise_across()</code> (which is also, by the way, another difference with standard <code>{tidyverse}</code> syntax). While I’ll have to remember these, I’d argue that they’re minor differences and if it can make my function run faster, I don’t mind!
</p>
<p>
Now let’s run a little benchmark. But first, let’s define our data as a <code>tidytable</code> object:
</p>
<pre class="r"><code>energy_tidytable &lt;- as_tidytable(energy)</code></pre>
<p>
Now we’re good to go:
</p>
<pre class="r"><code>microbenchmark::microbenchmark(
                  energy %&gt;%
                  prepare_data(temperature),
                  energy_tidytable %&gt;%
                  prepare_data_dt(temperature),
                  times = 10
                )</code></pre>
<pre><code>## Unit: milliseconds
##                                               expr      min       lq     mean
##               energy %&gt;% prepare_data(temperature) 847.9709 849.6671 868.6524
##  energy_tidytable %&gt;% prepare_data_dt(temperature) 820.2051 838.6647 861.9685
##    median       uq      max neval
##  861.0652 880.8200 914.4685    10
##  858.9454 873.3268 936.0147    10</code></pre>
<p>
That is nice! It does indeed run faster, and with only some minor changes to the function! And how about using some more cores to run this function? This can be done using <code>data.table::setDTthreads(n_cores)</code> where <code>n_cores</code> is the number of cores you want to use:
</p>
<pre class="r"><code>data.table::setDTthreads(12)
microbenchmark::microbenchmark(
                  energy %&gt;%
                  prepare_data(temperature),
                  energy_tidytable %&gt;%
                  prepare_data_dt(temperature),
                  times = 10
                )</code></pre>
<pre><code>## Unit: milliseconds
##                                               expr      min       lq     mean
##               energy %&gt;% prepare_data(temperature) 832.9876 840.8000 874.3047
##  energy_tidytable %&gt;% prepare_data_dt(temperature) 829.7937 831.2868 866.4383
##    median       uq      max neval
##  889.2684 898.6861 914.7178    10
##  836.8712 893.0613 997.8511    10</code></pre>
<p>
Maybe surprisingly, it did not run faster. It could very well be that my function does not really lend itself to running in parallel, and the overhead induced by distributing the work to the cpu cores cancels out the gains from running it in parallel. But in any case, this is really looking very interesting. I have not tested the whole package yet, but since the syntax is so similar to the <code>{tidyverse}</code>, you can try really quickly to see if the <code>{tidytable}</code> version of the function runs faster, and if yes, I don’t really see a reason not to use it!
</p>
<p>
Check out the project’s website <a href="https://markfairbanks.github.io/tidytable/index.html">here</a>, and follow the author’s twitter <a href="https://twitter.com/markfairbanks10">here</a>.
</p>



 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2020-09-05-tidytable.html</guid>
  <pubDate>Sat, 05 Sep 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring NACE codes</title>
  <link>https://b-rodrigues.github.io/posts/2020-04-27-nace_explorer.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=6n9ESFJTnHs"> <img src="https://b-rodrigues.github.io/assets/img/industry.png" title=""></a>
</p>
</div>
<p>
A quick one today. If you work with economic data, you’ll be confronted to NACE code sooner or later. NACE stands for <em>Nomenclature statistique des Activités économiques dans la Communauté Européenne</em>. It’s a standard classification of economic activities. It has 4 levels, and you can learn more about it <a href="https://ec.europa.eu/eurostat/en/web/products-manuals-and-guidelines/-/KS-RA-07-015">here</a>.
</p>
<p>
Each level adds more details; consider this example:
</p>
<pre><code>C - Manufacturing
C10 - Manufacture of food products
C10.1 - Processing and preserving of meat and production of meat products
C10.1.1 - Processing and preserving of meat
C10.1.2 - Processing and preserving of poultry meat
C10.1.3 - Production of meat and poultry meat products</code></pre>
<p>
So a company producing meat and poultry meat products would have NACE code level 4 <code>C10.1.3</code> with it. Today for work I had to create a nice visualisation of the hierarchy of the NACE classification. It took me a bit of time to find a nice solution, so that’s why I’m posting it here. Who knows, it might be useful for other people. First let’s get the data. Because finding it is not necessarily very easy if you’re not used to navigating Eurostat’s website, I’ve put the CSV into a gist:
</p>
<pre class="r"><code>library(tidyverse)
library(data.tree)
library(igraph)
library(GGally)</code></pre>
<pre class="r"><code>nace_code &lt;- read_csv("https://gist.githubusercontent.com/b-rodrigues/4218d6daa8275acce80ebef6377953fe/raw/99bb5bc547670f38569c2990d2acada65bb744b3/nace_rev2.csv")</code></pre>
<pre><code>## Parsed with column specification:
## cols(
##   Order = col_double(),
##   Level = col_double(),
##   Code = col_character(),
##   Parent = col_character(),
##   Description = col_character(),
##   `This item includes` = col_character(),
##   `This item also includes` = col_character(),
##   Rulings = col_character(),
##   `This item excludes` = col_character(),
##   `Reference to ISIC Rev. 4` = col_character()
## )</code></pre>
<pre class="r"><code>head(nace_code)</code></pre>
<pre><code>## # A tibble: 6 x 10
##    Order Level Code  Parent Description `This item incl… `This item also…
##    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;            &lt;chr&gt;           
## 1 398481     1 A     &lt;NA&gt;   AGRICULTUR… "This section i… &lt;NA&gt;            
## 2 398482     2 01    A      Crop and a… "This division … This division a…
## 3 398483     3 01.1  01     Growing of… "This group inc… &lt;NA&gt;            
## 4 398484     4 01.11 01.1   Growing of… "This class inc… &lt;NA&gt;            
## 5 398485     4 01.12 01.1   Growing of… "This class inc… &lt;NA&gt;            
## 6 398486     4 01.13 01.1   Growing of… "This class inc… &lt;NA&gt;            
## # … with 3 more variables: Rulings &lt;chr&gt;, `This item excludes` &lt;chr&gt;,
## #   `Reference to ISIC Rev. 4` &lt;chr&gt;</code></pre>
<p>
So there’s a bunch of columns we don’t need, so we’re going to ignore them. What I’ll be doing is transforming this data frame into a data tree, using the <code>{data.tree}</code> package. For this, I need columns that provide the hierarchy. I’m doing this with the next chunk of code. I won’t explain each step, but the idea is quite simple. I’m using the <code>Level</code> column to create new columns called <code>Level1</code>, <code>Level2</code>, etc. I’m then doing some cleaning:
</p>
<pre class="r"><code>nace_code &lt;- nace_code %&gt;%
  select(Level, Code)

nace_code &lt;- nace_code %&gt;%
  mutate(Level1 = ifelse(Level == 1, Code, NA)) %&gt;%
  fill(Level1, .direction = "down") %&gt;%  
  mutate(Level2 = ifelse(Level == 2, Code, NA)) %&gt;%
  fill(Level2, .direction = "down") %&gt;%  
  mutate(Level3 = ifelse(Level == 3, Code, NA)) %&gt;%
  fill(Level3, .direction = "down") %&gt;%  
  mutate(Level4 = ifelse(Level == 4, Code, NA)) %&gt;%  
  filter(!is.na(Level4))</code></pre>
<p>
Let’s take a look at how the data looks now:
</p>
<pre class="r"><code>head(nace_code)</code></pre>
<pre><code>## # A tibble: 6 x 6
##   Level Code  Level1 Level2 Level3 Level4
##   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; 
## 1     4 01.11 A      01     01.1   01.11 
## 2     4 01.12 A      01     01.1   01.12 
## 3     4 01.13 A      01     01.1   01.13 
## 4     4 01.14 A      01     01.1   01.14 
## 5     4 01.15 A      01     01.1   01.15 
## 6     4 01.16 A      01     01.1   01.16</code></pre>
<p>
I can now create the hierarchy using by creating a column called <code>pathString</code> and passing that data frame to <code>data.tree::as.Node()</code>. Because some sections, like C (manufacturing) are very large, I do this separately for each section by using the <code>group_by()</code>-<code>nest()</code> trick. This way, I can create a <code>data.tree</code> object for each section. Finally, to create the plots, I use <code>igraph::as.igraph()</code> and pass this to <code>GGally::ggnet2()</code>, which takes care of creating the plots. This took me quite some time to figure out, but the result is a nice looking PDF that the colleagues can now use:
</p>
<pre class="r"><code>nace_code2 &lt;- nace_code %&gt;%
  group_by(Level1, Level2) %&gt;%
  nest() %&gt;%
  mutate(nace = map(data, ~mutate(., pathString = paste("NACE2",
                                       Level1,
                                       Level2,
                                       Level3,
                                       Level4,
                                       sep = "/")))) %&gt;%
  mutate(plots = map(nace, ~as.igraph(as.Node(.)))) %&gt;%
  mutate(plots = map(plots, ggnet2, label = TRUE))


pdf("nace_maps.pdf")
pull(nace_code2, plots)
dev.off()</code></pre>
<p>
Here’s how the pdf looks like:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/nace_c_10.png"><!-- -->
</p>
<p>
If you want to read more about <code>{data.tree}</code>, you can do so <a href="https://cran.r-project.org/web/packages/data.tree/vignettes/data.tree.html">here</a> and you can also read more about the <code>ggnet2()</code> <a href="https://briatte.github.io/ggnet/">here</a>.
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-04-27-nace_explorer.html</guid>
  <pubDate>Mon, 27 Apr 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>No excuse not to be a Bayesian anymore</title>
  <link>https://b-rodrigues.github.io/posts/2020-04-20-no_excuse.html</link>
  <description><![CDATA[ 




<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<div style="text-align:center;">
<p>
<a href="https://en.wikipedia.org/wiki/Thomas_Bayes"> <img src="https://b-rodrigues.github.io/assets/img/mudasir.png" title="There's a meme for anything nowadays"></a>
</p>
</div>
<p>
My first encounter with Bayesian statistics was around 10 years ago, when I was doing my econometrics master’s degree. I was immediately very interested by the Bayesian approach to fit econometric models, because, when you’re reading about Bayesian approaches, it just sounds so easy and natural. You have a model, you <em>might</em> have some prior beliefs about the models parameters, and Bayes’ rule tells you how your beliefs should change when confronting the model to data (evidence). It is really appealing, and what I really liked as well was the interpretation of the results. It was very natural as well. Once your software is done estimating/training the model, you don’t actually get a vector of values for the parameters of the model. You get whole distributions for each parameter, so-called posterior distributions. You can then make statements like “there’s a 95% probability that this parameter lies between 0.12 and 0.21” for instance, which is a statement that you cannot make in a frequentist/classical framework.
</p>
<p>
However, while this was very appealing to me at the time, there is no free lunch as they say. At the time, and it was not that long ago, doing Bayesian statistics was not as straightforward as it is now, as I will show you in this blog post. At the time, the BUGS language was still the standard way to describe a Bayesian model and the actual estimation procedure. However, using the BUGS language was tricky; there was WinBUGS, a Windows tool that had already been discontinued at the time in favour of OpenBUGS, which was what I was using. The professor teaching this class, who eventually became one of my PhD advisors, was using WinBUGS to teach, but I was using Linux at the time already, so I went with OpenBUGS which worked with WINE, I think (WINE is a compatibility layer that allows running some Windows programs on Linux. It is quite amazing what WINE is able to do, so much so that Valve forked it to create Proton, which enables running Windows games on Linux on their popular Steam platform). Plus, I found out that there was an R package to call OpenBUGS from R and get the results back into R seamlessly! I think that I remember that there was one for WINBUGS as well, but I also think I remember I could not get it to work. Anyways, after some digging, I found an even better alternative called JAGS. JAGS is open source, and is natively available for Linux. It is also able to run in parallel, which is really useful for Bayesian inference. In any case, these were separate languages/programs from R, and as such the user had to learn how to use them. The way they worked was that users needed to write the Bayesian model in a separate text file. I will illustrate this with an example that I worked on during my Master’s, back in 2011. The example is taken from Ioannis Ntzoufras’ book <em>Bayesian Modeling Using WinBUGS</em>. The example can be found in chapter 7, section 7.4.2. The dataset is from Montgomery et al.&nbsp;(2006) and <em>refers to the number of aircarft damages in 30 strike missions during the Vietnam War</em>.
</p>
<p>
Here’s a description of the data, taken from Ntzoufras’ book:
</p>
<ul>
<li>
damage: the number of damaged locations of the aircraft
</li>
<li>
type: binary variable which indicates the type of the plane (0 for A4, B for A6)
</li>
<li>
bombload: the aircraft bomb load in tons
</li>
<li>
airexp: the total months of aircrew experience.
</li>
</ul>
<p>
The goal is to find a model for <em>damage</em>, what variables explain the amount of damage on the aircraft? Now, something quite interesting here, is that we only have 30 observations, and getting more observations is <em>very</em> costly. So what are you to do with this?
</p>
<p>
First, let’s write the model down:
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5B%20%5C%5B%5Cbegin%7Balign%7D%0A%5Ctext%7Bdamage%7D_i%20&amp;amp;%20=%20%5Ctext%7BPoisson%7D(%5Clambda_i)%20%5C%5C%0A%5Clog(%5Clambda_i)%20&amp;amp;%20=%20%5Cbeta_1%20+%20%5Cbeta_2*%5Ctext%7Btype%7D_i%20+%20%5Cbeta_3%20*%20%5Ctext%7Bbombload%7D_i%20+%20%5Cbeta_4*%5Ctext%7Bairexp%7D_i%0A%5Cend%7Balign%7D%5C%5D%20%5D">
</p>
<p>
where <img src="https://latex.codecogs.com/png.latex?(i%20=%201,%202,%203,%20%E2%80%A6,%2030)">. Since <em>damage</em> is a count variable, we go with a Poisson distribution, which only has one parameter, <img src="https://latex.codecogs.com/png.latex?()">. <img src="https://latex.codecogs.com/png.latex?()"> is defined on the second line. Both these definition form the likelihood, which should be familiar to any statistician. In JAGS and BUGS, this likelihood had to be written in a separate text file, as I mentioned above, with a syntax that was very similar to R’s (at least for JAGS, because if memory serves, BUGS’s syntax was <em>more different</em>):
</p>
<pre><code>model{
for (i in 1:30){damage[i] ~ dpois( lambda[i] )
        log(lambda[i]) &lt;- b1 + b2 * type[i] 
        + b3 * bombload[i] + b4 * airexp[i]}
b1 ~ dnorm(0, 1.0E-4)
b2 ~ dnorm(0, 1.0E-4)
b3 ~ dnorm(0, 1.0E-4)
b4 ~ dnorm(0, 1.0E-4)}</code></pre>
<p>
The last four lines are the prior distributions on the parameters. This is something that does not exist in frequentist statistics. Frequentists would maximise the above likelihood and call it a day. However, the Bayesian framework allows the practitioner to add prior knowledge into the model. This prior knowledge can come from domain knowledge or the literature. However, if the practitioner does not have a clue about good priors, then diffuse priors can be used. Diffuse priors do not carry much information, if at all. The priors above are diffuse; they’re normally distributed, centered around 0 with very small precision (in the Bayesian framework, the normal distribution is defined with two parameters, <img src="https://latex.codecogs.com/png.latex?()"> and <img src="https://latex.codecogs.com/png.latex?()">, where <img src="https://latex.codecogs.com/png.latex?(=%20)">). But since my student years I have learned that using such priors is actually not a very good idea, and better alternatives exist (priors that at least provide some regularization for instance). The Bayesian approach to statistics is often criticized for this, because priors are not objective. If you’re not using diffuse priors, then you’re using priors that carry some information. This information is subjective and subjectivity is a big No-No.&nbsp;But should subjectivity be a No-No? After all, if you can defend your priors, either because of domain knowledge, or because of past studies that provide some clue why not use this information? Especially when here is very little data like in this example. Also, you can perform a sensitivity analysis, and show how the posterior distribution of the parameters change when your priors change. What is important is to be fully transparent about the priors you’re using, and have clear justification for them. If these conditions are met, I don’t see why you should not use prior information in your model. Plus, even in frequentist statistics prior knowledge is used as well, for instance by pre-processing the data in a certain way, or by constraining the values the parameters are allowed to take in the optimisation routine (I’m looking at you, <code>L-BFGS-B</code>).
</p>
<p>
Now, let’s continue with the data. To load the data, I had to manually created each variable (but maybe JAGS now uses data frames) to pass it to <code>jags()</code>:
</p>
<pre class="r"><code># We load the data this way since jags only takes numerical vectors, matrices or lists
# containing the names as input
damage &lt;- c(0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 1, 1, 2, 3, 1, 1, 1, 2, 0, 1, 1, 2, 5, 1, 1, 5, 5, 7) 
type &lt;- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) 
bombload &lt;- c(4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 7, 7, 7, 10, 10, 10, 12, 12, 12, 8, 8, 8, 14, 14, 14)
airexp &lt;- c(91.5, 84, 76.5, 69, 61.5, 80, 72.5, 65, 57.5, 50, 103, 95.5, 88, 80.5, 73, 116.1, 100.6, 85, 69.4, 53.9, 
112.3, 96.7, 81.1, 65.6, 50, 120, 104.4, 88.9, 73.7, 57.8)</code></pre>
<p>
Now that we loaded the data, we can fit the model, by first defining a vector of parameters, and a named list for the data:
</p>
<pre class="r"><code>parameters &lt;- c("b1", "b2", "b3","b4")
data &lt;- list("damage","type","bombload","airexp")

#We don't give inits to jags since it can generate appropriate initial values

#Use this on single core machines, and/or windows machines
model_fit&lt;-jags(data,inits=NULL,parameters,n.iter=50000,
                model.file="bugsjags.txt",n.chains=4,DIC=T)</code></pre>
<p>
Notice that <code>jags()</code> has an argument called <code>model.file</code>, which is the file I showed above. Below, the code to take a look at the result:
</p>
<pre class="r"><code>#Let's see the results
model_fit$BUGSoutput


model.mcmc&lt;-as.mcmc(model_fit)

traceplot(model.mcmc)

xyplot(model.mcmc)

heidel.diag(model.mcmc) 

par(mfrow=c(2,3))
autocorr.plot(model.mcmc[1],auto.layout=F,ask=F)

geweke.plot(model.mcmc)</code></pre>
<p>
We’re actually not looking at this, because I’m not running the code; I only wanted to show you how this was done 8 years ago. But why? Because now I can show you how this is done nowadays with <code>{rstanarm}</code>:
</p>
<pre class="r"><code>library(rstanarm)

model_fit_stan &lt;- stan_glm(damage ~ ., data = bombs, family = poisson)</code></pre>
<pre><code>## 
## SAMPLING FOR MODEL 'count' NOW (CHAIN 1).
## Chain 1: 
## Chain 1: Gradient evaluation took 1.7e-05 seconds
## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.17 seconds.
## Chain 1: Adjust your expectations accordingly!
## Chain 1: 
## Chain 1: 
## Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 1: 
## Chain 1:  Elapsed Time: 0.04083 seconds (Warm-up)
## Chain 1:                0.043647 seconds (Sampling)
## Chain 1:                0.084477 seconds (Total)
## Chain 1: 
## 
## SAMPLING FOR MODEL 'count' NOW (CHAIN 2).
## Chain 2: 
## Chain 2: Gradient evaluation took 5e-06 seconds
## Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.05 seconds.
## Chain 2: Adjust your expectations accordingly!
## Chain 2: 
## Chain 2: 
## Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 2: 
## Chain 2:  Elapsed Time: 0.037986 seconds (Warm-up)
## Chain 2:                0.041253 seconds (Sampling)
## Chain 2:                0.079239 seconds (Total)
## Chain 2: 
## 
## SAMPLING FOR MODEL 'count' NOW (CHAIN 3).
## Chain 3: 
## Chain 3: Gradient evaluation took 5e-06 seconds
## Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.05 seconds.
## Chain 3: Adjust your expectations accordingly!
## Chain 3: 
## Chain 3: 
## Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 3: 
## Chain 3:  Elapsed Time: 0.041033 seconds (Warm-up)
## Chain 3:                0.042982 seconds (Sampling)
## Chain 3:                0.084015 seconds (Total)
## Chain 3: 
## 
## SAMPLING FOR MODEL 'count' NOW (CHAIN 4).
## Chain 4: 
## Chain 4: Gradient evaluation took 5e-06 seconds
## Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.05 seconds.
## Chain 4: Adjust your expectations accordingly!
## Chain 4: 
## Chain 4: 
## Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 4: 
## Chain 4:  Elapsed Time: 0.036928 seconds (Warm-up)
## Chain 4:                0.041124 seconds (Sampling)
## Chain 4:                0.078052 seconds (Total)
## Chain 4:</code></pre>
<p>
There is a lot of output, but the input was a single line that should look very familiar to practitioners used to the <code>glm()</code> function. I only used default options, as well as the default priors. Specifying different priors is quite simple, but I won’t discuss this here, because this blot post, while it might look like a tutorial, is not a tutorial. What I wanted to show you is the difference that 9 years make in software development. <code>{stan}</code> is an R package for Bayesian statistics that came out in 2012 and which has been developed ever since. Just like JAGS and BUGS, users can write external files with very detailed models. But for smaller, or more standard problems, <code>{rstanarm}</code>, makes Bayesian inference very easy and feel familiar to the traditional way of doing things and as its name implies, uses <code>{stan}</code> under the hood.
</p>
<p>
Now let’s continue a little bit and take a look at the model summary:
</p>
<pre class="r"><code>summary(model_fit_stan)</code></pre>
<pre><code>## 
## Model Info:
##  function:     stan_glm
##  family:       poisson [log]
##  formula:      damage ~ .
##  algorithm:    sampling
##  sample:       4000 (posterior sample size)
##  priors:       see help('prior_summary')
##  observations: 30
##  predictors:   4
## 
## Estimates:
##               mean   sd   10%   50%   90%
## (Intercept) -0.5    0.9 -1.6  -0.5   0.7 
## type         0.6    0.5 -0.1   0.6   1.2 
## bombload     0.2    0.1  0.1   0.2   0.3 
## airexp       0.0    0.0  0.0   0.0   0.0 
## 
## Fit Diagnostics:
##            mean   sd   10%   50%   90%
## mean_PPD 1.5    0.3  1.1   1.5   1.9  
## 
## The mean_ppd is the sample average posterior predictive distribution of the outcome variable (for details see help('summary.stanreg')).
## 
## MCMC diagnostics
##               mcse Rhat n_eff
## (Intercept)   0.0  1.0  2504 
## type          0.0  1.0  2412 
## bombload      0.0  1.0  2262 
## airexp        0.0  1.0  2652 
## mean_PPD      0.0  1.0  3813 
## log-posterior 0.0  1.0  1902 
## 
## For each parameter, mcse is Monte Carlo standard error, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence Rhat=1).</code></pre>
<p>
Just like for Bayesian stats, we get our parameter’s estimates. But wait! In the intro of this blog post, I said that in Bayesian statistics, we estimate full parameter distributions. So why are we getting point estimates? Well, these are statistics from the posterior distribution, the mean, standard deviation and some deciles.
</p>
<p>
To explore the results, I like to use <code>{bayestestR}</code>:
</p>
<pre class="r"><code>library(bayestestR)

describe_posterior(model_fit_stan)</code></pre>
<pre><code>## # Description of Posterior Distributions
## 
## Parameter   | Median | CI | CI_low | CI_high |    pd | ROPE_CI | ROPE_low | ROPE_high | ROPE_Percentage |  Rhat |  ESS
## ----------------------------------------------------------------------------------------------------------------------
## (Intercept) | -0.473 | 89 | -1.898 |   0.929 | 0.711 |      89 |   -0.100 |     0.100 |           0.082 | 0.999 | 2504
## type        |  0.577 | 89 | -0.230 |   1.365 | 0.869 |      89 |   -0.100 |     0.100 |           0.099 | 1.002 | 2412
## bombload    |  0.169 | 89 |  0.065 |   0.275 | 0.994 |      89 |   -0.100 |     0.100 |           0.108 | 1.001 | 2262
## airexp      | -0.014 | 89 | -0.028 |  -0.001 | 0.953 |      89 |   -0.100 |     0.100 |           1.000 | 1.000 | 2652</code></pre>
<p>
Let’s also actually see the posterior of, say, <img src="https://latex.codecogs.com/png.latex?(_3)">:
</p>
<pre class="r"><code>library(insight)</code></pre>
<pre><code>## Warning: package 'insight' was built under R version 3.6.2</code></pre>
<pre class="r"><code>posteriors &lt;- get_parameters(model_fit_stan)

ggplot(posteriors, aes(x = bombload)) +
  geom_density(fill = "cyan") +
  brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/no_excuse-9-1.png" width="672">
</p>
<p>
I won’t again go into much detail, because you can read the very detailed Vignettes on <code>{bayestestR}</code>’s website: <a href="https://easystats.github.io/bayestestR/articles/bayestestR.html">Get started with Bayesian Analysis</a> and <a href="https://easystats.github.io/bayestestR/articles/example1.html#describing-the-posterior-1">Describing the posterior</a> which explain all of this much better than I would ever do. The code I’m showing here is basically a copy paste of these Vignettes, so if I piqued your interest, go read those Vignettes! I also highly recommend reading <code>{rstanarm}</code>’s Vignettes, and grabbing the second edition of <em>Statistical Rethinking</em>, by Richard McElreath, it is a great intro to Bayesian statistics with <code>{stan}</code>.
</p>
<p>
Now, as the title of this blog post reads, there is no excuse not to use Bayesian statistics; from a software point of view, it’s as simple as ever. And by the way, <code>{stan}</code> models are supported in <code>{tidymodels}</code>’ <code>{parsnip}</code> package as well, which makes things even easier!
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-04-20-no_excuse.html</guid>
  <pubDate>Mon, 20 Apr 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to basic: bar plots</title>
  <link>https://b-rodrigues.github.io/posts/2020-04-12-basic_ggplot2.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=OisvDHvmKuM"> <img src="https://b-rodrigues.github.io/assets/img/chef.jpg" title="Specialty from the chef!" width="80%" height="auto"></a>
</p>
</div>
<p>
This blog post shows how to make bar plots and area charts. It’s mostly a list of recipes, indented for myself. These are plots I have often to do in reports and would like to have the code handy somewhere. Maybe this will be helpful to some of you as well. Actually, this post is exactly how I started my blog post. I wanted to have a repository of recipes, and with time the blog grew to what it is now (tutorials and me exploring methods and datasets with R).
</p>
<section id="bar-charts" class="level2">
<h2 class="anchored" data-anchor-id="bar-charts">
Bar charts
</h2>
<p>
Bar charts are quite simple plots, but there are enough variations of them that they deserve one single blog post. However, don’t expect many explanations.
</p>
<p>
Let’s first start by loading some data, and the usually required packages:
</p>
<pre class="r"><code>library(tidyverse)
library(lubridate)
library(janitor)
library(colorspace)</code></pre>
<pre class="r"><code>data(gss_cat)</code></pre>
<p>
Very often, what one wants to show are counts:
</p>
<pre class="r"><code>gss_cat %&gt;%
  count(marital, race)</code></pre>
<pre><code>## # A tibble: 18 x 3
##    marital       race      n
##  * &lt;fct&gt;         &lt;fct&gt; &lt;int&gt;
##  1 No answer     Other     2
##  2 No answer     Black     2
##  3 No answer     White    13
##  4 Never married Other   633
##  5 Never married Black  1305
##  6 Never married White  3478
##  7 Separated     Other   110
##  8 Separated     Black   196
##  9 Separated     White   437
## 10 Divorced      Other   212
## 11 Divorced      Black   495
## 12 Divorced      White  2676
## 13 Widowed       Other    70
## 14 Widowed       Black   262
## 15 Widowed       White  1475
## 16 Married       Other   932
## 17 Married       Black   869
## 18 Married       White  8316</code></pre>
<p>
Let’s lump marital statuses that appear less than 10% of the time into an “Other” category:
</p>
<pre class="r"><code>(
  counts_marital_race &lt;- gss_cat %&gt;%
    mutate(marital = fct_lump(marital, prop = 0.1)) %&gt;%
    count(marital, race)
)</code></pre>
<pre><code>## # A tibble: 12 x 3
##    marital       race      n
##  * &lt;fct&gt;         &lt;fct&gt; &lt;int&gt;
##  1 Never married Other   633
##  2 Never married Black  1305
##  3 Never married White  3478
##  4 Divorced      Other   212
##  5 Divorced      Black   495
##  6 Divorced      White  2676
##  7 Married       Other   932
##  8 Married       Black   869
##  9 Married       White  8316
## 10 Other         Other   182
## 11 Other         Black   460
## 12 Other         White  1925</code></pre>
<p>
The simplest bar plot:
</p>
<pre class="r"><code>ggplot(counts_marital_race) +
  geom_col(aes(x = marital, y = n, fill = race)) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-6-1.png" width="80%" height="auto">
</p>
<p>
Now with <code>position = "dodge"</code>:
</p>
<pre class="r"><code>ggplot(counts_marital_race) +
  geom_col(aes(x = marital, y = n, fill = race), position = "dodge") +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-7-1.png" width="80%" height="auto">
</p>
<p>
Moving the legend around with <code>theme(legend.position = …)</code>:
</p>
<pre class="r"><code>ggplot(counts_marital_race) +
  geom_col(aes(x = marital, y = n, fill = race), position = "dodge") +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() +
  theme(legend.position = "left")</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-8-1.png" width="80%" height="auto">
</p>
<p>
Counting by year as well:
</p>
<pre class="r"><code>(
  counts_marital_race_year &lt;- gss_cat %&gt;%
    mutate(marital = fct_lump(marital, prop = 0.1)) %&gt;%
    count(year, marital, race) %&gt;%
    ungroup()
)</code></pre>
<pre><code>## # A tibble: 96 x 4
##     year marital       race      n
##  * &lt;int&gt; &lt;fct&gt;         &lt;fct&gt; &lt;int&gt;
##  1  2000 Never married Other    60
##  2  2000 Never married Black   157
##  3  2000 Never married White   495
##  4  2000 Divorced      Other    20
##  5  2000 Divorced      Black    60
##  6  2000 Divorced      White   361
##  7  2000 Married       Other    78
##  8  2000 Married       Black   121
##  9  2000 Married       White  1079
## 10  2000 Other         Other    17
## # … with 86 more rows</code></pre>
<p>
When you want to show how a variable evolves through time, area chart are handy:
</p>
<pre class="r"><code>counts_marital_race_year %&gt;%
  group_by(year, marital) %&gt;%
  summarise(n = sum(n)) %&gt;%
  ggplot() +
  geom_area(aes(x = year, y = n, fill = marital)) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-10-1.png" width="80%" height="auto">
</p>
<p>
Now with facets:
</p>
<pre class="r"><code>counts_marital_race_year %&gt;%
  ggplot() +
  geom_area(aes(x = year, y = n, fill = marital)) +
  facet_wrap(facets = vars(race), ncol = 1) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-11-1.png" width="80%" height="auto">
</p>
<p>
But what if I want each plot to have its own y axis?
</p>
<pre class="r"><code>counts_marital_race_year %&gt;%
  ggplot() +
  geom_area(aes(x = year, y = n, fill = marital)) +
  facet_wrap(facets = vars(race), ncol = 1, scales = "free_y") +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-12-1.png" width="80%" height="auto">
</p>
<p>
Now doing an area chart but with relative frequencies:
</p>
<pre class="r"><code>counts_marital_race_year %&gt;% 
  group_by(year, marital) %&gt;% 
  summarise(n = sum(n)) %&gt;%  
  mutate(freq = n/sum(n)) %&gt;% 
  ggplot() +
  geom_area(aes(x = year, y = freq, fill = marital)) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-13-1.png" width="80%" height="auto">
</p>
<p>
With <code>facet_wrap()</code>:
</p>
<pre class="r"><code>counts_marital_race_year %&gt;% 
  group_by(race, year, marital) %&gt;% 
  summarise(n = sum(n)) %&gt;%  
  mutate(freq = n/sum(n)) %&gt;% 
  ggplot() +
  geom_area(aes(x = year, y = freq, fill = marital)) +
  facet_wrap(facets = vars(race), ncol = 1, scales = "free_y") +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-14-1.png" width="80%" height="auto">
</p>
<p>
Want to replace 2000 with “2000-01-01”? First need to create vector of prettier dates and positions:
</p>
<pre class="r"><code>pretty_dates &lt;- counts_marital_race_year %&gt;%
  mutate(pretty_dates = paste0(year, "-01-01")) %&gt;%
  pull(pretty_dates) %&gt;%
  unique()

position_dates &lt;- counts_marital_race_year %&gt;%
  pull(year) %&gt;%
  unique() %&gt;%
  sort() </code></pre>
<p>
<code>scale_x_continuous()</code> can now use this. Using <code>guide = guide_axis(n.dodge = 2)</code> to avoid overlapping labels:
</p>
<pre class="r"><code>counts_marital_race_year %&gt;% 
  group_by(race, year, marital) %&gt;% 
  summarise(n = sum(n)) %&gt;%  
  mutate(freq = n/sum(n)) %&gt;%
  ggplot() +
  geom_area(aes(x = year, y = freq, fill = marital)) +
  facet_wrap(facets = vars(race), ncol = 1, scales = "free_y") +
  scale_x_continuous("Year of survey", labels = pretty_dates,
                     breaks = position_dates, guide = guide_axis(n.dodge = 2)) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-16-1.png" width="80%" height="auto">
</p>
<p>
Adding labels is not trivial. Here it is not working:
</p>
<pre class="r"><code>counts_marital_race_year %&gt;% 
  group_by(race, year, marital) %&gt;% 
  summarise(n = sum(n)) %&gt;%  
  mutate(freq = n/sum(n)) %&gt;% 
  ggplot() +
  geom_area(aes(x = year, y = freq, fill = marital)) +
  facet_wrap(facets = vars(race), ncol = 1, scales = "free_y") +
  scale_x_continuous("Year of survey", labels = pretty_dates,
                     breaks = position_dates, guide = guide_axis(n.dodge = 2)) +
  geom_label(aes(x = year, y = freq, label = round(100 * freq))) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-17-1.png" width="80%" height="auto">
</p>
<p>
Another failed attempt. I leave it here for posterity. My first idea was first to sort the grouped data set by descending frequency, and then to reorder the factor variable <code>marital</code> by descending position, which is the cumulative percentage. This would work fine, if the same factor levels would have had the same order for each of the race categories. However, this is not the case. For blacks, the most frequent category is “Never Married”. As you can see below, this trick worked well for 2 categories out of 3:
</p>
<pre class="r"><code>counts_marital_race_year %&gt;% 
  group_by(race, year, marital) %&gt;% 
  summarise(n = sum(n)) %&gt;%  
  mutate(freq = n/sum(n)) %&gt;%
  group_by(year, race) %&gt;%  
  arrange(desc(freq)) %&gt;% 
  mutate(position = cumsum(freq)) %&gt;% 
  mutate(marital = fct_reorder(marital, desc(position))) %&gt;% 
  ggplot() +
  geom_area(aes(x = year, y = freq, fill = marital)) +
  facet_wrap(facets = vars(race), ncol = 1, scales = "free") +
  scale_x_continuous("Year of survey", labels = pretty_dates,
                     breaks = position_dates, guide = guide_axis(n.dodge = 2)) +
  geom_label(aes(x = year, y = position, label = round(100 * freq))) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-18-1.png" width="80%" height="auto">
</p>
<p>
So to remedy this, is not reorder too early; first, we need to reorder the factor variable by frequency. Then, we arrange the data by the now reordered <code>marital</code> variable, and then we can compute the position using the cumulative frequency.
</p>
<pre class="r"><code>counts_marital_race_year %&gt;% 
  group_by(race, year, marital) %&gt;% 
  summarise(n = sum(n)) %&gt;%  
  mutate(freq = n/sum(n)) %&gt;%
  group_by(year, race) %&gt;%  
  mutate(marital = fct_reorder(marital, freq)) %&gt;% 
  arrange(desc(marital)) %&gt;% 
  mutate(position = cumsum(freq)) %&gt;% 
  ggplot() +
  geom_area(aes(x = year, y = freq, fill = marital)) +
  facet_wrap(facets = vars(race), ncol = 1, scales = "free") +
  scale_x_continuous("Year of survey", labels = pretty_dates,
                     breaks = position_dates, guide = guide_axis(n.dodge = 2)) +
  geom_label(aes(x = year, y = position, label = round(100 * freq))) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-19-1.png" width="80%" height="auto">
</p>
<p>
We can place the labels a bit better (in the middle of their respective areas), like so:
</p>
<pre class="r"><code>counts_marital_race_year %&gt;% 
  group_by(race, year, marital) %&gt;% 
  summarise(n = sum(n)) %&gt;%  
  mutate(freq = n/sum(n)) %&gt;%
  group_by(year, race) %&gt;%  
  mutate(marital = fct_reorder(marital, freq)) %&gt;% 
  arrange(desc(marital)) %&gt;% 
  mutate(position = cumsum(freq)) %&gt;% mutate(prev_pos = lag(position, default = 0)) %&gt;%
  mutate(position = (position + prev_pos)/2) %&gt;%  
  ggplot() +
  geom_area(aes(x = year, y = freq, fill = marital)) +
  facet_wrap(facets = vars(race), ncol = 1, scales = "free") +
  scale_x_continuous("Year of survey", labels = pretty_dates,
                     breaks = position_dates, guide = guide_axis(n.dodge = 2)) +
  geom_label(aes(x = year, y = position, label = round(100 * freq))) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-20-1.png" width="80%" height="auto">
</p>
<p>
Now let’s focus on the variable <code>tvhours</code>. We want to show the total watched hours, but also the total across all the categories of <code>race</code> and <code>marital</code> in a faceted bar plot:
</p>
<pre class="r"><code>(
  total_tv &lt;- gss_cat %&gt;%
    group_by(year, race, marital) %&gt;%
    summarise(total_tv = sum(tvhours, na.rm = TRUE))
)</code></pre>
<pre><code>## # A tibble: 127 x 4
## # Groups:   year, race [24]
##     year race  marital       total_tv
##    &lt;int&gt; &lt;fct&gt; &lt;fct&gt;            &lt;int&gt;
##  1  2000 Other No answer            2
##  2  2000 Other Never married      103
##  3  2000 Other Separated           16
##  4  2000 Other Divorced            17
##  5  2000 Other Widowed             24
##  6  2000 Other Married            122
##  7  2000 Black Never married      452
##  8  2000 Black Separated          135
##  9  2000 Black Divorced           156
## 10  2000 Black Widowed            183
## # … with 117 more rows</code></pre>
<p>
This tibble has the total watched hours by year, race and marital status variables. How to add the total by year and race categories? For this, by are first going to use the <code>group_split()</code>:
</p>
<pre class="r"><code>total_tv_split &lt;- total_tv %&gt;%
  select(race, year, marital, total_tv) %&gt;%
  mutate(year = as.character(year)) %&gt;%  
  group_split(year, race)</code></pre>
<pre><code>## Warning: ... is ignored in group_split(&lt;grouped_df&gt;), please use
## group_by(..., .add = TRUE) %&gt;% group_split()</code></pre>
<p>
I have to re-order the columns with <code>select()</code>, because when using <code>janitor::adorn_totals()</code>, which I will be using below to add totals, the first column must be a character column (it serves as an identifier column).
</p>
<p>
This creates a list with 3 races times 6 years, so 24 elements. Each element of the list is a tibble with each unique combination of year and race:
</p>
<pre class="r"><code>length(total_tv_split)</code></pre>
<pre><code>## [1] 24</code></pre>
<pre class="r"><code>total_tv_split[1:2]</code></pre>
<pre><code>## &lt;list_of&lt;
##   tbl_df&lt;
##     race    : factor&lt;f4a07&gt;
##     year    : character
##     marital : factor&lt;82ceb&gt;
##     total_tv: integer
##   &gt;
## &gt;[2]&gt;
## [[1]]
## # A tibble: 6 x 4
##   race  year  marital       total_tv
##   &lt;fct&gt; &lt;chr&gt; &lt;fct&gt;            &lt;int&gt;
## 1 Other 2000  No answer            2
## 2 Other 2000  Never married      103
## 3 Other 2000  Separated           16
## 4 Other 2000  Divorced            17
## 5 Other 2000  Widowed             24
## 6 Other 2000  Married            122
## 
## [[2]]
## # A tibble: 5 x 4
##   race  year  marital       total_tv
##   &lt;fct&gt; &lt;chr&gt; &lt;fct&gt;            &lt;int&gt;
## 1 Black 2000  Never married      452
## 2 Black 2000  Separated          135
## 3 Black 2000  Divorced           156
## 4 Black 2000  Widowed            183
## 5 Black 2000  Married            320</code></pre>
<p>
Why do this? To use <code>janitor::adorn_totals()</code>, which adds row-wise totals to a data frame, or to each data frame if a list of data frames gets passed to it. I need to still transform the data a little bit. After using <code>adorn_totals()</code>, I bind my list of data frames together, and then fill down the year column (when using <code>adorn_totals()</code>, character columns like <code>year</code> are filled with <code>"-"</code>, but I chose to fill it with <code>NA_character_</code>). I then replace the NA value from the marital column with the string <code>"Total"</code> and then reorder the <code>marital</code> column by value of <code>total_tv</code>:
</p>
<pre class="r"><code>total_tv_split &lt;- total_tv_split %&gt;%
  adorn_totals(fill = NA_character_) %&gt;%
  map(as.data.frame) %&gt;%  
  bind_rows() %&gt;%
  fill(year, .direction = "down") %&gt;%
  mutate(marital = ifelse(is.na(marital), "Total", marital)) %&gt;%
  mutate(marital = fct_reorder(marital, total_tv))</code></pre>
<p>
I can finally create my plot. Because I have added “Total” as a level in the <code>marital</code> column, it now appears seamlessly in the plot:
</p>
<pre class="r"><code>ggplot(total_tv_split) +
  geom_col(aes(x = marital, y = total_tv, fill = race)) +
  facet_wrap(facets = vars(year), nrow = 2) +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  scale_x_discrete(guide = guide_axis(n.dodge = 3)) +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-25-1.png" width="80%" height="auto">
</p>
<p>
To finish this list of recipes, let’s do a pyramid plot now (inspiration from <a href="https://stackoverflow.com/questions/14680075/simpler-population-pyramid-in-ggplot2">here</a>:
</p>
<pre class="r"><code>data_pyramid &lt;- gss_cat %&gt;%
  filter(year == "2000", marital %in% c("Married", "Never married")) %&gt;%
  group_by(race, marital, rincome) %&gt;%  
  summarise(total_tv = sum(tvhours, na.rm = TRUE))

ggplot(data_pyramid, aes(x = rincome, y = total_tv, fill = marital)) +
  geom_col(data = filter(data_pyramid, marital == "Married")) +
  geom_col(data = filter(data_pyramid, marital == "Never married"), aes(y = total_tv * (-1))) +
  facet_wrap(facets = vars(race), nrow = 1, scales = "free_x") +
  coord_flip() +
  scale_fill_discrete_qualitative(palette = "Dark 3") +
  brotools::theme_blog() </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/basic_ggplot2-26-1.png" width="80%" height="auto">
</p>
<p>
Happy Easter!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2020-04-12-basic_ggplot2.html</guid>
  <pubDate>Sun, 12 Apr 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What would a keyboard optimised for Luxembourguish look like?</title>
  <link>https://b-rodrigues.github.io/posts/2020-03-26-bepo_lu.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/user/TheReportOfTheWeek"> <img src="https://b-rodrigues.github.io/assets/img/small_head.jpeg" title="I highly recommend his youtube channel" width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<p>
I’ve been using the BÉPO layout for my keyboard since 2010-ish, and it’s been one of the best computing decisions I’ve ever taken. The BÉPO layout is an optimized layout for French, but it works quite well for many European languages, English included (the only issue you might have with the BÉPO layout for English is that the <code>w</code> is a bit far away).
</p>
<p>
To come up with the BÉPO layout, ideas from a man named August Dvorak were applied for the French language. Today, the keyboard layout that is optimised for English is called after him, the DVORAK layout. Dvorak’s ideas were quite simple; unlike the QWERTY layout, his layout had to be based on character frequency of the English language. The main idea is that the most used characters of the language should be on the home row of the keyboard. The home row is the row where you lay your fingers on the keyboard when you are not typing (see picture below).
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/home_row.png" width="80%" height="auto"><!-- -->
</p>
<p>
The problem with the “standard” layouts, such as QWERTY, is that they’re all absolute garbage, and not optimized at all for typing on a computer. For instance, look at the heatmap below, which shows the most used characters on a QWERTY keyboard when typing an a standard English text:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/qwerty_heatmap.png" width="80%" height="auto"><!-- -->
</p>
<p>
(Heatmap generated on <a href="https://www.patrick-wied.at/projects/heatmap-keyboard/" class="uri">https://www.patrick-wied.at/projects/heatmap-keyboard/</a>.)
</p>
<p>
As you can see, most of the characters used to type this text are actually outside of the home row, and the majority of them on the left hand side of the keyboard. The idea of Dvorak was to first, put the most used characters on the home row, and second to try to have an equal split of characters, 50% for each hand.
</p>
<p>
The same text on the DVORAK layout, shows how superior it is:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/dvorak_heatmap.png" width="80%" height="auto"><!-- -->
</p>
<p>
As you can see, this is much much better. The same idea was applied to develop the BÉPO layout for French. And because character frequency is quite similar across languages, learning a layout such as the BÉPO not only translates to more efficient typing for French, but also for other languages, such as English, as already explained above.
</p>
<p>
The reason I’m writing this blog post is due, in part, to the confinement situation that many people on Earth are currently facing due to the Corona virus. I have a job where I spend my whole day typing, and am lucky enough to be able to work from home. Which means that I’m lucky enough to use my mechanical keyboard to work, which is really great. (I avoid taking my mechanical keyboard with me at work, because I am never very long in the same spot, between meeting and client assignments…). But to have a mechanical keyboard that’s easy to take with me, I decided to buy a second mechanical keyboard, a 40% keyboard from Ergodox (see picture below):
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/planck.png" width="80%" height="auto"><!-- -->
</p>
<p>
Because I don’t even want to see the QWERTY keycaps, I bought blank keycaps to replace the ones that come with the keyboard. Anyway, this made me think about how crazy it is that in 2020 people still use absolute garbage keyboard layouts (and keyboards by the way) to type on, when their job is basically only typing all day long. It made me so angry that I even made a video, which you enjoy <a href="https://www.youtube.com/watch?v=LMkFdqEpISo">here</a>.
</p>
<p>
The other thing I thought about was the specific case of Luxembourg, a country with 3 official languages (Luxembourguish, French and German), a very large Portuguese minority, and where English became so important in recent years that the government distributed leaflets in English to the population (along with leaflets in French, Luxembourguish, German and Portuguese of course) explaining what is and is not allowed during the period of containment. What would a keyboard optimized for such a unique country look like?
</p>
<p>
Of course, the answer that comes to mind quickly is to use the BÉPO layout; even though people routinely write in at least 3 of the above-mentioned languages, French is still the one that people use most of the time for written communication (at least, that’s my perception). The reason is that while Luxembourguish is the national language, and the language of the native population, French has always been the administrative language, and laws are still written in French only, even though they’re debated in Luxembourguish in the parliament. However, people also routinely write emails in German or English, and more and more people also write in Luxembourguish. This means that a keyboard optimized for Luxembourguish, or rather, for the multilinguistic nature of the Luxembourguish country, should take into account all these different languages. Another thing to keep in mind is that Luxembourguish uses many French words, and as such, writing these words should be easy.
</p>
<p>
So let’s start with the BÉPO layout as a base. This is what it looks like:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/bepo_layout.png" width="80%" height="auto"><!-- -->
</p>
<p>
A heatmap of character frequencies of a French, or even English, text would show that the most used characters are on the home row. If you compare DVORAK to BÉPO, you will see that the home row is fairly similar. But what strikes my colleagues when they see a picture of the BÉPO layout, is the fact that the characters <code>é</code>, <code>è</code>, <code>ê</code>, <code>à</code> and <code>ç</code> can be accessed directly. They are so used to having these characters only accessible by using some kind of modifier key that their first reaction is to think that this is completely stupid. However, what is stupid, is not having these letters easily accessible, and instead having, say, <code>z</code> easily accessible (the French “standard” layout is called AZERTY, which is very similar and just as stupid as the QWERTY layout. The letter <code>Z</code> is so easy to type on, but is almost non-existing in French!).
</p>
<p>
So let’s analyze character frequencies of a Luxembourguish text and see if the BÉPO layout could be a good fit. I used several text snippets from the Bible in Luxembourguish for this, and a few lines of R code:
</p>
<pre class="r"><code>library(tidyverse)
library(rvest)</code></pre>
<pre class="r"><code>root_url &lt;- "https://cathol.lu/article"

texts &lt;- seq(4869,4900)

urls &lt;- c("https://cathol.lu/article4887",
          "https://cathol.lu/article1851",
          "https://cathol.lu/article1845",
          "https://cathol.lu/article1863",
          "https://cathol.lu/article1857",
          "https://cathol.lu/article4885",
          "https://cathol.lu/article1648",
          "https://cathol.lu/article1842",
          "https://cathol.lu/article1654",
          "https://cathol.lu/article1849",
          "https://cathol.lu/article1874",
          "https://cathol.lu/article4884",
          "https://cathol.lu/article1878",
          "https://cathol.lu/article2163",
          "https://cathol.lu/article2127",
          "https://cathol.lu/article2185",
          "https://cathol.lu/article4875")</code></pre>
<p>
Now that I’ve get the urls, let’s get the text out of it:
</p>
<pre class="r"><code>pages &lt;- urls %&gt;%
  map(read_html)

texts &lt;- pages %&gt;%
  map(~html_node(., xpath = '//*[(@id = "art_texte")]')) %&gt;%
  map(html_text)</code></pre>
<p>
<code>texts</code> is a list containing the raw text from the website. I used several functions from the <code>{rvest}</code> package to do this. I won’t comment on them, because this is not a tutorial about webscraping (I’ve written several of those already), but a rant about keyboard layout gosh darn it.
</p>
<p>
Anyway, let’s now take a look at the character frequencies, and put that in a neat data frame:
</p>
<pre class="r"><code>characters &lt;- texts %&gt;%
  map(~strsplit(., split = "")) %&gt;%
  unlist() %&gt;%
  map(~strsplit(., split = "")) %&gt;%
  unlist() %&gt;%
  tolower() %&gt;%
  str_extract_all(pattern = "[:alpha:]") %&gt;%
  unlist() %&gt;%
  table() %&gt;%  
  as.data.frame()</code></pre>
<p>
Computing the frequencies is now easy:
</p>
<pre class="r"><code>characters &lt;- characters %&gt;%
  mutate(frequencies = round(Freq/sum(Freq)*100, digits = 2)) %&gt;%
  arrange(desc(frequencies)) %&gt;%  
  janitor::clean_names()</code></pre>
<p>
Let’s start with the obvious differences: there is not a single instance of the characters <code>è</code>, <code>ê</code> or <code>ç</code>, which are used in French only. There are however instances of <code>ü</code>, <code>ä</code>, and <code>ë</code>. These characters should be easily accessible, however their frequencies are so low, that they could still only be accessible using a modifier key, and it would not be a huge issue. However, since <code>ç</code> does not appear at all, maybe it could be replaced by <code>ä</code> and <code>ê</code> could be replaced by <code>ë</code>. But we must keep in mind that since the average Luxembourger has to very often switch between so many languages, I would suggest that these French characters that would be replaced should still be accessible using a modifier such as <code>Alt Gr</code>. As for the rest, the layout as it stands is likely quite ok. Well, actually I know it’s ok, because when I write in Luxembourguish using the BÉPO layout, I find it quite easy to do. But let’s grab a French and a German text, and see how the ranking of the characters compare. Let’s get some French text:
</p>
<details>
<p>
</p><summary>
Click to read the French text
</summary>
<p></p>
<pre class="r"><code>french &lt;- "Au commencement, Dieu créa les cieux et la terre.
La terre était informe et vide: il y avait des ténèbres à la surface de l'abîme, et l'esprit de Dieu se mouvait au-dessus des eaux.
Dieu dit: Que la lumière soit! Et la lumière fut.
Dieu vit que la lumière était bonne; et Dieu sépara la lumière d'avec les ténèbres.
Dieu appela la lumière jour, et il appela les ténèbres nuit. Ainsi, il y eut un soir, et il y eut un matin: ce fut le premier jour.
Dieu dit: Qu'il y ait une étendue entre les eaux, et qu'elle sépare les eaux d'avec les eaux.
Et Dieu fit l'étendue, et il sépara les eaux qui sont au-dessous de l'étendue d'avec les eaux qui sont au-dessus de l'étendue. Et cela fut ainsi.
Dieu appela l'étendue ciel. Ainsi, il y eut un soir, et il y eut un matin: ce fut le second jour.
Dieu dit: Que les eaux qui sont au-dessous du ciel se rassemblent en un seul lieu, et que le sec paraisse. Et cela fut ainsi.
Dieu appela le sec terre, et il appela l'amas des eaux mers. Dieu vit que cela était bon.
Puis Dieu dit: Que la terre produise de la verdure, de l'herbe portant de la semence, des arbres fruitiers donnant du fruit selon leur espèce et ayant en eux leur semence sur la terre. Et cela fut ainsi.
La terre produisit de la verdure, de l'herbe portant de la semence selon son espèce, et des arbres donnant du fruit et ayant en eux leur semence selon leur espèce. Dieu vit que cela était bon.
Ainsi, il y eut un soir, et il y eut un matin: ce fut le troisième jour.
Dieu dit: Qu'il y ait des luminaires dans l'étendue du ciel, pour séparer le jour d'avec la nuit; que ce soient des signes pour marquer les époques, les jours et les années;
et qu'ils servent de luminaires dans l'étendue du ciel, pour éclairer la terre. Et cela fut ainsi.
Dieu fit les deux grands luminaires, le plus grand luminaire pour présider au jour, et le plus petit luminaire pour présider à la nuit; il fit aussi les étoiles.
Dieu les plaça dans l'étendue du ciel, pour éclairer la terre,
pour présider au jour et à la nuit, et pour séparer la lumière d'avec les ténèbres. Dieu vit que cela était bon.
Ainsi, il y eut un soir, et il y eut un matin: ce fut le quatrième jour.
Dieu dit: Que les eaux produisent en abondance des animaux vivants, et que des oiseaux volent sur la terre vers l'étendue du ciel.
Dieu créa les grands poissons et tous les animaux vivants qui se meuvent, et que les eaux produisirent en abondance selon leur espèce; il créa aussi tout oiseau ailé selon son espèce. Dieu vit que cela était bon.
Dieu les bénit, en disant: Soyez féconds, multipliez, et remplissez les eaux des mers; et que les oiseaux multiplient sur la terre.
Ainsi, il y eut un soir, et il y eut un matin: ce fut le cinquième jour.
Dieu dit: Que la terre produise des animaux vivants selon leur espèce, du bétail, des reptiles et des animaux terrestres, selon leur espèce. Et cela fut ainsi.
Dieu fit les animaux de la terre selon leur espèce, le bétail selon son espèce, et tous les reptiles de la terre selon leur espèce. Dieu vit que cela était bon.
Puis Dieu dit: Faisons l'homme à notre image, selon notre ressemblance, et qu'il domine sur les poissons de la mer, sur les oiseaux du ciel, sur le bétail, sur toute la terre, et sur tous les reptiles qui rampent sur la terre.
Dieu créa l'homme à son image, il le créa à l'image de Dieu, il créa l'homme et la femme.
Dieu les bénit, et Dieu leur dit: Soyez féconds, multipliez, remplissez la terre, et l'assujettissez; et dominez sur les poissons de la mer, sur les oiseaux du ciel, et sur tout animal qui se meut sur la terre.
Et Dieu dit: Voici, je vous donne toute herbe portant de la semence et qui est à la surface de toute la terre, et tout arbre ayant en lui du fruit d'arbre et portant de la semence: ce sera votre nourriture.
Et à tout animal de la terre, à tout oiseau du ciel, et à tout ce qui se meut sur la terre, ayant en soi un souffle de vie, je donne toute herbe verte pour nourriture. Et cela fut ainsi.
Dieu vit tout ce qu'il avait fait et voici, cela était très bon. Ainsi, il y eut un soir, et il y eut un matin: ce fut le sixième jour.
Joe Paterno, né le 21 décembre 1926 à Brooklyn et mort le 22 janvier 2012 à State College, est un joueur et entraîneur américain de football américain universitaire. Figure historique et emblématique des Nittany Lions de Penn State entre 1966 et 2011, il est l'entraîneur le plus victorieux de l'histoire du football américain universitaire avec 409 succès en Division I. Son image est toutefois ternie en fin de carrière à cause de soupçons de négligence dans une affaire d'agressions sexuelles sur mineurs.

Lors de ses brillantes études de droit à l'université Brown, Joe Paterno joue au football américain et est entraîné par Rip Engle. Ce dernier, embauché par l'université de Penn State, le recrute comme entraîneur assistant en 1950. Pendant quinze saisons, l'assistant fait ses preuves avant de devenir entraîneur principal des Nittany Lions en 1965. Surnommé JoePa, il connaît rapidement le succès. Invaincu en 1968 et 1969, il est désiré par plusieurs franchises de la National Football League (NFL), mais refuse pour conserver son rôle d'éducateur. Entraîneur de l'équipe universitaire championne en 1982 et 1986, vainqueur des quatre principaux Bowls universitaires, il intègre le College Football Hall of Fame en 2007 alors qu'il est encore en activité, un accomplissement rare.

Reconnu pour ses succès sportifs, académiques et son exemplarité, JoePa est adulé comme une icône populaire dans la région de State College. Onze jours après avoir célébré sa 409e victoire avec les Lions, il est démis de ses fonctions à la suite du scandale des agressions sexuelles de l'Université d'État de Pennsylvanie. Accusé d'avoir couvert les abus sexuels de Jerry Sandusky, son image est ternie par cette affaire au retentissement international. Il meurt deux mois plus tard des suites d'un cancer du poumon.
Chacun peut publier immédiatement du contenu en ligne, à condition de respecter les règles essentielles établies par la Fondation Wikimedia et par la communauté ; par exemple, la vérifiabilité du contenu, l'admissibilité des articles et garder une attitude cordiale.

De nombreuses pages d’aide sont à votre disposition, notamment pour créer un article, modifier un article ou insérer une image. N’hésitez pas à poser une question pour être aidé dans vos premiers pas, notamment dans un des projets thématiques ou dans divers espaces de discussion.

Les pages de discussion servent à centraliser les réflexions et les remarques permettant d’améliorer les articles.
En 1894, l’explorateur Gustav Adolf von Götzen suivait les traces d’un missionnaire en provenance de la cote orientale d’Afrique. Pendant qu’il se rendait au Rwanda, il découvre un petit village des pécheurs appelé Ngoma qui traduit signifie tam tam, par déformation il écrivit Goma. Ngoma devint un poste belge en face de celui de Rubavu (au Rwanda) habité par les Allemands. Au début, la cohabitation entre ces deux postes n’était pas facile. À un certain moment, les chefs coutumiers du Rwanda, en complicité avec les Allemands attaquent les Belges de Goma. Ces derniers se réfugient à Bukavu et laissent les envahisseurs occuper la ville. Après des négociations, les Allemands replient vers le Rwanda et les Belges reprennent leur position initiale comme poste colonial. L’afflux des colonisateurs dans ce village joue un rôle important dans son évolution pour devenir une grande agglomération. Les colonisateurs venaient d’installer le chef lieu du district Belge à Rutshuru ou vivait l’administrateur colonial. Le chef lieu passera de Rutshuru à Goma.

En ce moment, Goma reste un poste de transaction lacustre avec Bukavu qui était une ville minière. Plus tard, Rutshuru, Masisi, Kalehe, Gisenyi, etc. déverseront leurs populations dans Goma, à la rechercher de l’emploi au près des colonisateurs. C’est en cette période que vu le jour le quartier Birere (un bidonville de Goma) autour des entrepôts, bureaux et habitations des colons. Le nom Birere (littéralement feuilles de bananier) vient du fait qu’à l’époque, les gens y construisaient en feuilles des bananiers.

La ville est la base arrière de l'opération Turquoise organisée en 1994 à la fin du génocide rwandais.

La ville et ses environs abriteront dans des camps autour de 650 000 réfugiés hutus de 1994 jusqu'à la chute du Zaïre, dont certains supposés anciens génocidaires. Selon des ONG, l'AFDL procède à des massacres dans les camps entre 1996 et 19971.

De 1998 à 2002/2003, la ville, sous contrôle du Rassemblement congolais pour la démocratie (RCD) pro-rwandais échappe au contrôle du gouvernement congolais.

De nombreux viols, massacres et crimes de guerre y ont été perpétrés entre 1996 et 2006 par les troupes des généraux rebelles du RCD, essentiellement sous les généraux Nkundabatware et Mutebusi.

En 2002, le Nyiragongo entra en éruption, et une coulée de lave atteignit le centre de la ville. La lave n'a pas atteint le lac Kivu fort heureusement, en effet ce lac est un lac méromictique et un changement brutal de chaleur aurait des conséquences graves : Éruption limnique.

Débordant de populations fuyant les violences, Goma compte en 2012 plus de 400 000 habitants. Ceux qui ne peuvent pas trouver d'abri remplissent les camps de réfugiés, où l'ONU et les ONG se débattent pour leur fournir nourriture, eau et combustible."</code></pre>
</details>
<pre class="r"><code>characters_fr &lt;- french %&gt;%
  map(~strsplit(., split = "")) %&gt;%
  unlist() %&gt;%
  map(~strsplit(., split = "")) %&gt;%
  unlist() %&gt;%
  tolower() %&gt;%
  str_extract_all(pattern = "[:alpha:]") %&gt;%
  unlist() %&gt;%
  table() %&gt;%  
  as.data.frame() %&gt;%  
  mutate(frequencies = round(Freq/sum(Freq)*100, digits = 2)) %&gt;%
  arrange(desc(frequencies)) %&gt;%  
  janitor::clean_names()</code></pre>
<p>
Let’s now do the same for German:
</p>
<details>
<p>
</p><summary>
Click to read the German text
</summary>
<p></p>
<pre class="r"><code>german &lt;- "Am Anfang schuf Gott Himmel und Erde.
Und die Erde war wüst und leer, und es war finster auf der Tiefe; und der Geist Gottes schwebte auf dem Wasser.
Und Gott sprach: Es werde Licht! und es ward Licht.
Und Gott sah, daß das Licht gut war. Da schied Gott das Licht von der Finsternis
und nannte das Licht Tag und die Finsternis Nacht. Da ward aus Abend und Morgen der erste Tag.
Und Gott sprach: Es werde eine Feste zwischen den Wassern, und die sei ein Unterschied zwischen den Wassern.
Da machte Gott die Feste und schied das Wasser unter der Feste von dem Wasser über der Feste. Und es geschah also.
Und Gott nannte die Feste Himmel. Da ward aus Abend und Morgen der andere Tag.
Und Gott sprach: Es sammle sich das Wasser unter dem Himmel an besondere Örter, daß man das Trockene sehe. Und es geschah also.
Und Gott nannte das Trockene Erde, und die Sammlung der Wasser nannte er Meer. Und Gott sah, daß es gut war.
Und Gott sprach: Es lasse die Erde aufgehen Gras und Kraut, das sich besame, und fruchtbare Bäume, da ein jeglicher nach seiner Art Frucht trage und habe seinen eigenen Samen bei sich selbst auf Erden. Und es geschah also.
Und die Erde ließ aufgehen Gras und Kraut, das sich besamte, ein jegliches nach seiner Art, und Bäume, die da Frucht trugen und ihren eigenen Samen bei sich selbst hatten, ein jeglicher nach seiner Art. Und Gott sah, daß es gut war.
Da ward aus Abend und Morgen der dritte Tag.
Und Gott sprach: Es werden Lichter an der Feste des Himmels, die da scheiden Tag und Nacht und geben Zeichen, Zeiten, Tage und Jahre
und seien Lichter an der Feste des Himmels, daß sie scheinen auf Erden. Und es geschah also.
Und Gott machte zwei große Lichter: ein großes Licht, das den Tag regiere, und ein kleines Licht, das die Nacht regiere, dazu auch Sterne.
Und Gott setzte sie an die Feste des Himmels, daß sie schienen auf die Erde
und den Tag und die Nacht regierten und schieden Licht und Finsternis. Und Gott sah, daß es gut war.
Da ward aus Abend und Morgen der vierte Tag.
Und Gott sprach: Es errege sich das Wasser mit webenden und lebendigen Tieren, und Gevögel fliege auf Erden unter der Feste des Himmels.
Und Gott schuf große Walfische und allerlei Getier, daß da lebt und webt, davon das Wasser sich erregte, ein jegliches nach seiner Art, und allerlei gefiedertes Gevögel, ein jegliches nach seiner Art. Und Gott sah, daß es gut war.
Und Gott segnete sie und sprach: Seid fruchtbar und mehrt euch und erfüllt das Wasser im Meer; und das Gefieder mehre sich auf Erden.
Da ward aus Abend und Morgen der fünfte Tag.
Und Gott sprach: Die Erde bringe hervor lebendige Tiere, ein jegliches nach seiner Art: Vieh, Gewürm und Tiere auf Erden, ein jegliches nach seiner Art. Und es geschah also.
Und Gott machte die Tiere auf Erden, ein jegliches nach seiner Art, und das Vieh nach seiner Art, und allerlei Gewürm auf Erden nach seiner Art. Und Gott sah, daß es gut war.
Und Gott sprach: Laßt uns Menschen machen, ein Bild, das uns gleich sei, die da herrschen über die Fische im Meer und über die Vögel unter dem Himmel und über das Vieh und über die ganze Erde und über alles Gewürm, das auf Erden kriecht.
Und Gott schuf den Menschen ihm zum Bilde, zum Bilde Gottes schuf er ihn; und schuf sie einen Mann und ein Weib.
Und Gott segnete sie und sprach zu ihnen: Seid fruchtbar und mehrt euch und füllt die Erde und macht sie euch untertan und herrscht über die Fische im Meer und über die Vögel unter dem Himmel und über alles Getier, das auf Erden kriecht.
Und Gott sprach: Seht da, ich habe euch gegeben allerlei Kraut, das sich besamt, auf der ganzen Erde und allerlei fruchtbare Bäume, die sich besamen, zu eurer Speise,
und allem Getier auf Erden und allen Vögeln unter dem Himmel und allem Gewürm, das da lebt auf Erden, daß sie allerlei grünes Kraut essen. Und es geschah also.
Und Gott sah alles an, was er gemacht hatte; und siehe da, es war sehr gut. Da ward aus Abend und Morgen der sechste Tag.
Während des Bürgerkrieges und Völkermords im nahe angrenzenden Ruanda 1994 war Goma eines der Hauptziele für Flüchtlinge. Unter diesen waren nebst Zivilisten auch Mittäter des Genozids. Nachdem über eine Million Flüchtlinge die Stadt erreicht hatten, brach in den Lagern eine Cholera-Epidemie aus, die mehrere Tausend Opfer forderte. In den Jahren 1997 und 1998, als der Bürgerkrieg im Kongo nach dem Sturz von Präsident Mobutu Sese Seko eskalierte, eroberten ruandische Regierungstruppen Goma. Im Zuge der Verfolgung von Hutu, die in der Stadt Zuflucht gesucht hatten, töteten sie auch Hunderte Unbeteiligte.

Im Jahre 2002 wurde die Stadt von einem Lavastrom aus dem etwa 14 km entfernten Nyiragongo im Norden zu großen Teilen zerstört. Viele Gebäude gerade im Stadtzentrum sowie der Flughafen Goma waren betroffen. Von den 3.000 Metern der Start- und Landebahn sind bis heute noch fast 1.000 Meter unter einer Lavaschicht begraben, so dass der internationale Verkehr ihn meidet. Rund 250.000 Einwohner der Stadt mussten flüchten. Es gab 147 Todesopfer, viele Flüchtlinge blieben obdachlos oder haben sich am Rande der Lavafelder Notunterkünfte gebaut. Seit April 2009 wird unter Führung der Welthungerhilfe das Rollfeld des Flughafens von der Lava befreit. Die Bedrohung, dass sich bei einer erneuten Eruption Lavamassen aus dem innerhalb des Vulkankraters befindlichen Lavasee erneut ins Tal und auf die Stadt ergießen, besteht nach wie vor.[3]

Am 15. April 2008 raste nach dem Start vom Flughafen Goma eine Douglas DC-9 mit 79 Passagieren und 6 Besatzungsmitgliedern über das südliche Startbahnende hinaus in das Wohn- und Marktgebiet Birere. Etwa 40 Personen aus dem angrenzenden Siedlungsgebiet kamen ums Leben, mindestens 53 Passagiere und die 6 Besatzungsmitglieder überlebten jedoch. Das Feuer aus dem brennenden Wrack konnte sich aufgrund des starken Regens nicht ausbreiten, Anwohner konnten das Feuer zusätzlich eindämmen.

Zehntausende Menschen flohen Ende Oktober 2008 aufgrund einer Offensive von Tutsi-Rebellen aus der Stadt.[4]

Am 21. November 2012 wurden große Teile der Stadt von der gegen die Zentralregierung unter Präsident Joseph Kabila kämpfenden Rebellenbewegung M23 eingenommen. Dort stationierte UNO-Friedens-Truppen griffen im Gegensatz zu früheren Aktivitäten nicht mehr ein.[5] Am 1. Dezember begannen sie nach Überschreitung eines Ultimatums der Internationalen Konferenz der Großen Seen Afrikas und zwei Resolutionen des UN-Sicherheitsrats, sich aus der Stadt zurückzuziehen.

Im Jahre 2019 wurden mehrere Einzelfälle von Ebola in der Stadt registriert, nachdem die Ebola Epidemie bereits zuvor im Ostkongo ausgebrochen war.[6]

Seit 1959 ist Goma Sitz des römisch-katholischen Bistums Goma.
Die Transporteure werden Frachtführer (in Österreich Frächter) genannt. Sie organisieren nicht den Transport, sondern führen diesen aus, meistens im Auftrag eines Spediteurs. Die Höhe der Fracht wird im Frachtvertrag vereinbart und in der Regel im Frachtbrief festgehalten. Seit mit der Transportrechtsreform 1998 in Deutschland die Erstellung eines Frachtbriefes für nationale Transporte nicht mehr zwingend erforderlich ist, sondern auch Lieferscheine, Ladelisten oder vergleichbare Papiere als Warenbegleitdokument verwendet werden können, wird zunehmend kein Frachtbrief mehr ausgestellt. Beim Frachtbrief gibt es drei Originalausfertigungen. Eine Ausfertigung verbleibt beim Absender, nachdem ihm darauf der Frachtführer die Übernahme des Frachtguts bestätigt hat. Die zweite verbleibt nach Ablieferung des Frachtguts als Ablieferbestätigung beim Frachtführer und die dritte erhält der Empfänger.

Für die Verladung des Frachtguts ist der Absender zuständig. Er ist dabei gem. § 412 HGB für eine beförderungssichere Verladung des Frachtguts verantwortlich, wohingegen der Frachtführer für die verkehrssichere Verladung (z. B. Gewichtsverteilung, Einhaltung der zulässigen Achslasten), als auch für die Ladungssicherung zu sorgen hat.

Bei Kontrollen muss der Frachtbrief den Zoll- und Polizeibehörden, sowie dem Bundesamt für Güterverkehr (BAG) ausgehändigt werden.

Es gibt anmeldepflichtige Frachtgüter, für deren Transport es einer ausdrücklichen behördlichen Genehmigung bedarf. Schwertransporte erfordern eine behördliche Ausnahmegenehmigung und bei Überschreiten bestimmter Abmessungen sind gemäß § 29 Absatz. 3 StVO (Übermäßige Straßennutzung) definitiv Begleitfahrzeuge und/oder eine Begleitung durch die Polizei vorgeschrieben, um Sicherungsmaßnahmen einzuleiten und für einen reibungslosen Ablauf zu sorgen. Fällt das zu befördernde Frachtgut unter die Gefahrgutverordnung, muss das Transportfahrzeug neben der Einhaltung gefahrgutrelevanter Vorschriften auch mit entsprechenden Warntafeln gekennzeichnet sein. Darüber hinaus benötigt dann der Fahrzeugführer und ein eventueller Beifahrer auch eine ADR-Bescheinigung.

Die Aufteilung der Frachtkosten zwischen Absender und Empfänger wird über die im Kaufvertrag festgehaltenen Lieferbedingungen geregelt, im internationalen Warenverkehr durch die Incoterms."</code></pre>
</details>
<pre class="r"><code>characters_gr &lt;- german %&gt;%
  map(~strsplit(., split = "")) %&gt;%
  unlist() %&gt;%
  map(~strsplit(., split = "")) %&gt;%
  unlist() %&gt;%
  tolower() %&gt;%
  str_extract_all(pattern = "[:alpha:]") %&gt;%
  unlist() %&gt;%
  table() %&gt;%  
  as.data.frame() %&gt;%  
  mutate(frequencies = round(Freq/sum(Freq)*100, digits = 2)) %&gt;%
  arrange(desc(frequencies)) %&gt;%
  janitor::clean_names()</code></pre>
<p>
Let’s now visualize how the rankings evolve between these three languages. For this, I’m using the <code>newggslopegraph()</code> function from the <code>{CGPfunctions}</code> package:
</p>
<pre class="r"><code>characters$rank &lt;- seq(1, 30)
characters_fr$rank &lt;- seq(1, 36)
characters_gr$rank &lt;- seq(1, 28)

characters_fr &lt;- characters_fr %&gt;%
  select(letters = x, rank, frequencies) %&gt;%
  mutate(language = "french")

characters_gr &lt;- characters_gr %&gt;%
  select(letters = x, rank, frequencies) %&gt;%
  mutate(language = "german")

characters &lt;- characters %&gt;%
  select(letters = x, rank, frequencies) %&gt;%
  mutate(language = "luxembourguish")

characters_df &lt;- bind_rows(characters, characters_fr, characters_gr)

CGPfunctions::newggslopegraph(characters_df, 
                              language,
                              rank,
                              letters,
                              Title = "Character frequency ranking for the Luxembourguish official languages",
                              SubTitle = NULL,
                              Caption = NULL,
                              YTextSize = 4) </code></pre>
<pre><code>## Registered S3 methods overwritten by 'lme4':
##   method                          from
##   cooks.distance.influence.merMod car 
##   influence.merMod                car 
##   dfbeta.influence.merMod         car 
##   dfbetas.influence.merMod        car</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/bepo_lu-16-1.png" width="80%" height="auto">
</p>
<details>
<p>
</p><summary>
Click to look at the raw data, which contains the frequencies
</summary>
<p></p>
<pre class="r"><code>characters_df </code></pre>
<pre><code>##    letters rank frequencies       language
## 1        e    1       16.19 luxembourguish
## 2        n    2        9.61 luxembourguish
## 3        s    3        6.94 luxembourguish
## 4        a    4        6.56 luxembourguish
## 5        i    5        6.44 luxembourguish
## 6        t    6        6.16 luxembourguish
## 7        d    7        5.56 luxembourguish
## 8        r    8        5.42 luxembourguish
## 9        h    9        5.21 luxembourguish
## 10       u   10        3.76 luxembourguish
## 11       g   11        3.70 luxembourguish
## 12       m   12        3.26 luxembourguish
## 13       o   13        3.07 luxembourguish
## 14       l   14        2.81 luxembourguish
## 15       c   15        2.51 luxembourguish
## 16       w   16        2.23 luxembourguish
## 17       é   17        1.56 luxembourguish
## 18       k   18        1.42 luxembourguish
## 19       f   19        1.34 luxembourguish
## 20       ä   20        1.18 luxembourguish
## 21       z   21        1.03 luxembourguish
## 22       p   22        1.02 luxembourguish
## 23       j   23        0.78 luxembourguish
## 24       ë   24        0.72 luxembourguish
## 25       b   25        0.68 luxembourguish
## 26       v   26        0.68 luxembourguish
## 27       ü   27        0.13 luxembourguish
## 28       q   28        0.01 luxembourguish
## 29       x   29        0.01 luxembourguish
## 30       y   30        0.01 luxembourguish
## 31       e    1       15.40         french
## 32       s    2        7.81         french
## 33       i    3        7.63         french
## 34       t    4        7.52         french
## 35       a    5        7.47         french
## 36       u    6        7.03         french
## 37       r    7        6.74         french
## 38       n    8        6.70         french
## 39       l    9        6.31         french
## 40       o   10        4.74         french
## 41       d   11        4.14         french
## 42       c   12        3.00         french
## 43       p   13        2.43         french
## 44       m   14        2.39         french
## 45       é   15        1.84         french
## 46       v   16        1.42         french
## 47       b   17        1.08         french
## 48       f   18        1.08         french
## 49       g   19        0.96         french
## 50       q   20        0.82         french
## 51       x   21        0.57         french
## 52       è   22        0.51         french
## 53       h   23        0.51         french
## 54       y   24        0.44         french
## 55       à   25        0.40         french
## 56       j   26        0.37         french
## 57       z   27        0.18         french
## 58       w   28        0.14         french
## 59       î   29        0.11         french
## 60       k   30        0.11         french
## 61       ô   31        0.08         french
## 62       ç   32        0.03         french
## 63       ê   33        0.01         french
## 64       ï   34        0.01         french
## 65       ö   35        0.01         french
## 66       ù   36        0.01         french
## 67       e    1       16.58         german
## 68       n    2        9.00         german
## 69       r    3        8.05         german
## 70       a    4        6.71         german
## 71       d    5        6.55         german
## 72       t    6        6.47         german
## 73       s    7        6.38         german
## 74       i    8        6.35         german
## 75       u    9        4.63         german
## 76       h   10        4.44         german
## 77       g   11        3.78         german
## 78       l   12        3.09         german
## 79       c   13        2.80         german
## 80       m   14        2.49         german
## 81       o   15        2.29         german
## 82       f   16        2.28         german
## 83       b   17        2.12         german
## 84       w   18        1.11         german
## 85       v   19        0.85         german
## 86       z   20        0.84         german
## 87       ü   21        0.77         german
## 88       p   22        0.65         german
## 89       k   23        0.63         german
## 90       ä   24        0.34         german
## 91       ß   25        0.33         german
## 92       ö   26        0.26         german
## 93       j   27        0.19         german
## 94       y   28        0.01         german</code></pre>
</details>
<p>
Certain things pop out of this plot: the rankings of the German and Luxembourguish languages are more similar than the rankings of French and Luxembourguish, but overall, the three languages have practically the same top 10 characters. Using the same base as the BÉPO layout should be comfortable enough, but the characters <code>h</code> and <code>g</code>, which are not very common in French, are much more common in Luxembourguish, and should thus be better placed. I would advise against using the German ergonomic/optimized layout, however, because as I said in the beginning, French is still probably the most written language, certainly more often written than German. So even though the frequencies of characters are very similar between Luxembourguish and German, I would still prefer to use the French BÉPO layout.
</p>
<p>
I don’t know if there ever will be an ergonomic/optimized layout for Luxembourguish, but I sure hope that more and more people will start using layouts such as the BÉPO, which are really great to use. It takes some time to get used to, but in general in about one week of usage, maybe two, you should be as fast as you were on the legacy layout.
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2020-03-26-bepo_lu.html</guid>
  <pubDate>Fri, 27 Mar 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Explainbility of {tidymodels} models with {iml}</title>
  <link>https://b-rodrigues.github.io/posts/2020-03-10-exp_tidymodels.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://en.wikipedia.org/wiki/Rhetoric"> <img src="https://b-rodrigues.github.io/assets/img/exp_tidymodels.jpg" title="'{rethoric}' would be a sick package name for explainability" width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<p>
In my previous <a href="../posts/2020-03-08-tidymodels.html">blog post</a>, I have shown how you could use <code>{tidymodels}</code> to train several machine learning models. Now, let’s take a look at getting some explanations out of them, using the <code>{iml}</code> package. Originally I did not intend to create a separate blog post, but I have encountered… an issue, or bug, when using both <code>{iml}</code> and <code>{tidymodels}</code> and I felt that it was important that I write about it. Maybe it’s just me that’s missing something, and you, kind reader, might be able to give me an answer. But let’s first reload the models from last time (the same packages as on the previous blog post are loaded):
</p>
<pre class="r"><code>trained_models_list</code></pre>
<pre><code>## [[1]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 
## [[2]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 
## [[3]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 
## [[4]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
## 
## [[5]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;</code></pre>
<p>
Let’s see which of the models performed best (in cross-validation):
</p>
<pre class="r"><code>trained_models_list %&gt;%
  map(show_best, metric = "accuracy", n = 1)</code></pre>
<pre><code>## [[1]]
## # A tibble: 1 x 7
##    penalty mixture .metric  .estimator  mean     n std_err
##      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1 6.57e-10  0.0655 accuracy binary     0.916    10 0.00179
## 
## [[2]]
## # A tibble: 1 x 7
##    mtry trees .metric  .estimator  mean     n std_err
##   &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1    13  1991 accuracy binary     0.929    10 0.00172
## 
## [[3]]
## # A tibble: 1 x 7
##   num_terms prune_method .metric  .estimator  mean     n std_err
##       &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1         5 backward     accuracy binary     0.904    10 0.00186
## 
## [[4]]
## # A tibble: 1 x 9
##    mtry trees tree_depth learn_rate .metric  .estimator  mean     n std_err
##   &lt;int&gt; &lt;int&gt;      &lt;int&gt;      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1    12  1245         12     0.0770 accuracy binary     0.929    10 0.00175
## 
## [[5]]
## # A tibble: 1 x 7
##   hidden_units    penalty .metric  .estimator  mean     n std_err
##          &lt;int&gt;      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1           10 0.00000307 accuracy binary     0.917    10 0.00209</code></pre>
<p>
Seems like the second model, the random forest performed the best (highest mean accuracy with lowest standard error). So let’s retrain the model on the whole training set and see how it fares on the testing set:
</p>
<pre class="r"><code>rf_specs &lt;- trained_models_list[[2]]</code></pre>
<p>
Let’s save the best model specification in a variable:
</p>
<pre class="r"><code>best_rf_spec &lt;- show_best(rf_specs, "accuracy", 1)</code></pre>
<p>
Let’s now retrain this model, using a workflow:
</p>
<pre class="r"><code>best_rf_model &lt;- rand_forest(mode = "classification", mtry = best_rf_spec$mtry,
                           trees = best_rf_spec$trees) %&gt;%
  set_engine("ranger")

preprocess &lt;- recipe(job_search ~ ., data = pra) %&gt;%
  step_dummy(all_predictors())

pra_wflow_best &lt;- workflow() %&gt;%
  add_recipe(preprocess) %&gt;%
  add_model(best_rf_model)

best_model_fitted &lt;- fit(pra_wflow_best, data = pra_train)</code></pre>
<pre><code>## Warning: The following variables are not factor vectors and will be ignored:
## `hours`</code></pre>
<p>
and let’s take a look at the confusion matrix:
</p>
<pre class="r"><code>predictions &lt;- predict(best_model_fitted, new_data = pra_test) %&gt;%
  bind_cols(pra_test)

predictions %&gt;%
  mutate(job_search = as.factor(job_search)) %&gt;%  
  accuracy(job_search, .pred_class)</code></pre>
<pre><code>## # A tibble: 1 x 3
##   .metric  .estimator .estimate
##   &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;
## 1 accuracy binary         0.924</code></pre>
<pre class="r"><code>predictions %&gt;%
  mutate(job_search = as.factor(job_search)) %&gt;%  
  conf_mat(job_search, .pred_class) </code></pre>
<pre><code>##           Truth
## Prediction    N    S
##          N 2539  156
##          S   64  149</code></pre>
<p>
We see that predicting class <code>S</code> (“Si”, meaning, “yes” in Spanish) is tricky. One would probably need to use techniques such as <code>SMOTE</code> to deal with this (see this <a href="https://www.brodrigues.co/blog/2018-02-11-census-random_forest/">blog post</a> for more info). Anyways, this is not today’s topic.
</p>
<p>
Let’s say that we are satisfied with the model and want some explanations out of it. I have already blogged about it in the past, so if you want more details, you can read this <a href="https://www.brodrigues.co/blog/2018-02-11-census-random_forest/">blog post</a>.
</p>
<p>
Now, what is important, is that I have defined a complete workflow to deal with the data preprocessing and then the training of the model. So I’ll be using this workflow as well to get my explainability. What I mean with this is the following: to get explanations, we need a model, and a way to get predictions out of it. As I have shown before, my fitted workflow is able to give me predictions. So I should have every needed ingredient; <code>{iml}</code>, the package that I am using for explainability provides several functions that work all the same; you first define an object that takes as an input the fitted model, the design matrix, the target variable and the prediction function. Let’s start with defining the design matrix and the target variable:
</p>
<pre class="r"><code>library("iml")

features &lt;- pra_test %&gt;%
  select(-job_search)

target &lt;- pra_test %&gt;%
  mutate(job_search = as.factor(job_search)) %&gt;%  
  select(job_search)</code></pre>
<p>
Now, let’s define the predict function:
</p>
<pre class="r"><code>predict_wrapper &lt;- function(model, newdata){
  workflows:::predict.workflow(object = model, new_data = newdata)
}</code></pre>
<p>
Because a workflow is a bit special, I need to define this wrapper function that wraps the <code>workflows:::predict.workflow()</code> function. Normally, users should not have to deal with this function; as you can see, to access it I had to use the very special <code>:::</code> function. <code>:::</code> permits users to access <em>private</em> functions (not sure if this is the right term; what I mean is that private functions are used internally by the package and should not be available to users. AFAIK, this is how these functions are called in Python). I tried simply using the <code>predict()</code> function, which works interactively but I was getting issues with it when I was providing it to the constructor below:
</p>
<pre class="r"><code>predictor &lt;- Predictor$new(
                         model = best_model_fitted,
                         data = features, 
                         y = target,
                         predict.fun = predict_wrapper
                       )</code></pre>
<p>
This creates a <code>Predictor</code> object from which I am now able to get explanations. For example, for feature importance, I would write the following:
</p>
<pre class="r"><code>feature_importance &lt;- FeatureImp$new(predictor, loss = "ce")

plot(feature_importance)</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/exp_tidymodels-13-1.png" width="80%" height="auto">
</p>
<p>
And this is where I noticed that something was wrong; the variables we are looking at are categorical variables. So why am I not seeing the categories? Why is the most important variable the contract type, without the category of the contract type that is the most important? Remember that I created dummy variables using a recipe. So I was expecting something like <code>type_of_contract_type_1</code>, <code>type_of_contract_type_2</code>, etc… as variables.
</p>
<p>
This made me want to try to fit the model “the old way”, without using workflows. So for this I need to use the <code>prep()</code>, <code>juice()</code> and <code>bake()</code> functions, which are included in the <code>{recipes}</code> package. I won’t go into much detail, but the idea is that <code>prep()</code> is used to train the recipe, and compute whatever is needed to preprocess the data (such as means and standard deviations for normalization). For this, you should use the training data only. <code>juice()</code> returns the preprocessed training set, and <code>bake()</code> is then used to preprocessed a new data set, for instance the test set, using the same estimated parameters that were obtained with <code>prep()</code>.
</p>
<p>
Using workflows avoids having to do these steps manually, but what I am hoping is that doing this manually will solve my issue. So let’s try:
</p>
<pre class="r"><code># without workflows
trained_recipe &lt;- prep(preprocess, training = pra_train)</code></pre>
<pre><code>## Warning: The following variables are not factor vectors and will be ignored:
## `hours`</code></pre>
<pre class="r"><code>pra_train_prep &lt;- juice(trained_recipe)


best_model_fit &lt;- fit(best_rf_model, job_search ~ ., data = pra_train_prep)


pra_test_bake_features &lt;- bake(trained_recipe, pra_test) %&gt;%
  select(-job_search)


predict_wrapper2 &lt;- function(model, newdata){
  predict(object = model, new_data = newdata)
}

predictor2 &lt;- Predictor$new(
                          model = best_model_fit,
                          data = pra_test_bake_features, 
                          y = target,
                          predict.fun = predict_wrapper2
                        )

feature_importance2 &lt;- FeatureImp$new(predictor2, loss = "ce")

plot(feature_importance2)</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/exp_tidymodels-14-1.png" width="80%" height="auto">
</p>
<p>
Eureka! As you can see, the issue is now solved; we now have all the variables that were used for training the model, also in our explanations. I don’t know exactly what’s going on; is this a bug? Is it because the <code>{workflows}</code> package makes this process too streamlined that it somehow <em>rebuilds</em> the features and then returns the results? I have no idea. In any case, it would seem that for the time being, doing the training and explanations without the <code>{workflows}</code> package is the way to go if you require explanations as well.
</p>



 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2020-03-10-exp_tidymodels.html</guid>
  <pubDate>Tue, 10 Mar 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Machine learning with {tidymodels}</title>
  <link>https://b-rodrigues.github.io/posts/2020-03-08-tidymodels.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://autonxt.net/bosozoku-japans-car-tuning-subculture/"> <img src="https://b-rodrigues.github.io/assets/img/jap_tune.jpg" title="Just because you tune your models, doesn't mean you can't overfit" width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<section id="intro-what-is-tidymodels" class="level2">
<h2 class="anchored" data-anchor-id="intro-what-is-tidymodels">
Intro: what is <code>{tidymodels}</code>
</h2>
<p>
I have already written about <code>{tidymodels}</code> in the <a href="https://www.brodrigues.co/blog/2018-11-25-tidy_cv/">past</a> but since then, the <code>{tidymodels}</code> meta-package has evolved quite a lot. If you don’t know what <code>{tidymodels}</code> is, it is a suite of packages that make machine learning with R a breeze. R has many packages for machine learning, each with their own syntax and function arguments. <code>{tidymodels}</code> aims at providing an unified interface which allows data scientists to focus on the problem they’re trying to solve, instead of wasting time with learning package specificities.
</p>
<p>
The packages included in <code>{tidymodels}</code> are:
</p>
<ul>
<li>
<a href="https://tidymodels.github.io/parsnip/articles/parsnip_Intro.html">{parsnip}</a> for model definition
</li>
<li>
<a href="https://tidymodels.github.io/recipes/">{recipes}</a> for data preprocessing and feature engineering
</li>
<li>
<a href="https://tidymodels.github.io/rsample/">{rsample}</a> to resample data (useful for cross-validation)
</li>
<li>
<a href="https://tidymodels.github.io/yardstick/index.html">{yardstick}</a> to evaluate model performance
</li>
<li>
<a href="https://tidymodels.github.io/dials/index.html">{dials}</a> to define tuning parameters of your models
</li>
<li>
<a href="https://tidymodels.github.io/tune/">{tune}</a> for model tuning
</li>
<li>
<a href="https://tidymodels.github.io/workflows/">{workflows}</a> which allows you to bundle everything together and train models easily
</li>
</ul>
<p>
There are some others, but I will not cover these. This is a lot of packages, and you might be worried of getting lost; however, in practice I noticed that loading <code>{tidymodels}</code> and then using the functions I needed was good enough. Only rarely did I need to know from which package a certain function came, and the more you use these, the better you know them, obviously. Before continuing, one final and important note: these packages are still in heavy development, so you might not want to use them in production yet. I don’t know how likely it is that the api still evolves, but my guess is that it is likely. However, even though it might be a bit early to use these packages for production code, I think it is important to learn about them as soon as possible and see what is possible with them.
</p>
<p>
As I will show you, these packages do make the process of training machine learning models a breeze, and of course they integrate very well with the rest of the <code>{tidyverse}</code> packages. The problem we’re going to tackle is to understand which variables play an important role in the probability of someone looking for a job. I’ll use Eustat’s microdata, which I already discussed in my <a href="https://www.brodrigues.co/blog/2020-02-23-synthpop/">previous blog post</a>. The dataset can be downloaded from <a href="https://en.eustat.eus/estadisticas/tema_37/opt_0/tipo_11/temas.html">here</a>, and is called <em>Population with relation to activity (PRA)</em>.
</p>
</section>
<section id="the-problem-at-hand" class="level2">
<h2 class="anchored" data-anchor-id="the-problem-at-hand">
The problem at hand
</h2>
<p>
The dataset contains information on residents from the Basque country, and focuses on their labour supply. Thus, we have information on how many hours people work a week, if they work, in which industry, what is their educational attainment and whether they’re looking for a job. The first step, as usual, is to load the data and required packages:
</p>
<pre class="r"><code>library(tidyverse)
library(tidymodels)
library(readxl)
library(naniar)
library(janitor)
library(furrr)

list_data &lt;- Sys.glob("~/Documents/b-rodrigues.github.com/content/blog/MICRO*.csv")

dataset &lt;- map(list_data, read_csv2) %&gt;%
  bind_rows()

dictionary &lt;- read_xlsx("~/Documents/b-rodrigues.github.com/content/blog/Microdatos_PRA_2019/diseño_registro_microdatos_pra.xlsx", sheet="Valores",
                        col_names = FALSE)

col_names &lt;- dictionary %&gt;%
  filter(!is.na(...1)) %&gt;%
  dplyr::select(1:2)

english &lt;- readRDS("~/Documents/b-rodrigues.github.com/content/blog/english_col_names.rds")

col_names$english &lt;- english

colnames(dataset) &lt;- col_names$english

dataset &lt;- janitor::clean_names(dataset)</code></pre>
<p>
Let’s take a look at the data:
</p>
<pre class="r"><code>head(dataset)</code></pre>
<pre><code>## # A tibble: 6 x 33
##   household_number survey_year reference_quart… territory capital   sex
##              &lt;dbl&gt;       &lt;dbl&gt;            &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;
## 1                1        2019                1 48              9     6
## 2                1        2019                1 48              9     1
## 3                2        2019                1 48              1     1
## 4                2        2019                1 48              1     6
## 5                2        2019                1 48              1     6
## 6                2        2019                1 48              1     1
## # … with 27 more variables: place_of_birth &lt;dbl&gt;, age &lt;chr&gt;, nationality &lt;dbl&gt;,
## #   level_of_studies_completed &lt;dbl&gt;, ruled_teaching_system &lt;chr&gt;,
## #   occupational_training &lt;chr&gt;, retirement_situation &lt;dbl&gt;,
## #   homework_situation &lt;dbl&gt;, part_time_employment &lt;dbl&gt;,
## #   short_time_cause &lt;dbl&gt;, job_search &lt;chr&gt;, search_reasons &lt;dbl&gt;,
## #   day_searched &lt;dbl&gt;, make_arrangements &lt;chr&gt;, search_form &lt;chr&gt;,
## #   search_months &lt;dbl&gt;, availability &lt;chr&gt;,
## #   relationship_with_the_activity &lt;dbl&gt;,
## #   relationship_with_the_activity_2 &lt;chr&gt;, main_occupation &lt;dbl&gt;,
## #   main_activity &lt;chr&gt;, main_professional_situation &lt;dbl&gt;,
## #   main_institutional_sector &lt;dbl&gt;, type_of_contract &lt;dbl&gt;, hours &lt;dbl&gt;,
## #   relationship &lt;dbl&gt;, elevator &lt;dbl&gt;</code></pre>
<p>
There are many columns, most of them are categorical variables and unfortunately the levels in the data are only some non-explicit codes. The excel file I have loaded, which I called <code>dictionary</code> contains the codes and their explanation. I kept the file opened while I was working, especially for missing values imputation. Indeed, there are missing values in the data, and one should always try to understand why before blindly imputing them. Indeed, there might be a very good reason why data might be missing for a particular column. For instance, if children are also surveyed, they would have an <code>NA</code> in the, say, <code>main_occupation</code> column which gives the main occupation of the surveyed person. This might seem very obvious, but sometimes these reasons are not so obvious at all. You should always go back with such questions to the data owners/producers, because if not, you will certainly miss something very important. Anyway, the way I tackled this issue was by looking at the variables with missing data and checking two-way tables with other variables. For instance, to go back to my example from before, I would take a look at the two-way frequency table between <code>age</code> and <code>main_occupation</code>. If all the missing values from <code>main_occupation</code> where only for people 16 or younger, then it would be quite safe to assume that I was right, and I could recode these <code>NA</code>s in <code>main_occupation</code> to <code>"without occupation"</code> for instance. I’ll spare you all this exploration, and go straight to the data cleaning:
</p>
<pre class="r"><code>dataset &lt;- dataset %&gt;%
  mutate(main_occupation2 = ifelse(is.na(main_occupation),
                                   "without_occupation",
                                   main_occupation))

dataset &lt;- dataset %&gt;%
  mutate(main_professional_situation2 = ifelse(is.na(main_professional_situation),
                                               "without_occupation",
                                               main_professional_situation))

# People with missing hours are actually not working, so I put them to 0
dataset &lt;- dataset %&gt;%
  mutate(hours = ifelse(is.na(hours), 0, hours))

# Short time gives the reason why people are working less hours than specified in their contract
dataset &lt;- dataset %&gt;%
  mutate(short_time_cause = ifelse(hours == 0 | is.na(short_time_cause), 
                                   "without_occupation",
                                   short_time_cause))

dataset &lt;- dataset %&gt;%
  mutate(type_of_contract = ifelse(is.na(type_of_contract),
                                   "other_contract",
                                   type_of_contract))</code></pre>
<p>
Let’s now apply some further cleaning:
</p>
<pre class="r"><code>pra &lt;- dataset %&gt;%
  filter(age %in% c("04", "05", "06", "07", "08", "09", "10", "11", "12", "13")) %&gt;%
  filter(retirement_situation == 4) %&gt;%    
  filter(!is.na(job_search)) %&gt;%  
  select(capital, sex, place_of_birth, age, nationality, level_of_studies_completed,
         occupational_training, job_search, main_occupation2, type_of_contract,
         hours, short_time_cause, homework_situation,
         main_professional_situation2) %&gt;%
  mutate_at(.vars = vars(-hours), .funs=as.character) %&gt;%
  mutate(job_search = as.factor(job_search))</code></pre>
<p>
I only keep people that are not retired and of ages where they could work. I remove rows where <code>job_search</code>, the target, is missing, mutate all variables but <code>hours</code> to character and <code>job_search</code> to factor. At first, I made every categorical column a factor but I got problems for certain models. I think the issue came from the recipe that I defined (I’ll talk about it below), but the problem was resolved if categorical variables were defined as character variables. However, for certain models, the target (I think it was <code>xgboost</code>) needs to be a factor variable for classification problems.
</p>
<p>
Let’s take a look at the data and check if any more data is missing:
</p>
<pre class="r"><code>str(pra)</code></pre>
<pre><code>## Classes 'spec_tbl_df', 'tbl_df', 'tbl' and 'data.frame': 29083 obs. of  14 variables:
##  $ capital                     : chr  "9" "9" "1" "1" ...
##  $ sex                         : chr  "6" "1" "1" "6" ...
##  $ place_of_birth              : chr  "1" "1" "1" "1" ...
##  $ age                         : chr  "09" "09" "11" "10" ...
##  $ nationality                 : chr  "1" "1" "1" "1" ...
##  $ level_of_studies_completed  : chr  "1" "2" "3" "3" ...
##  $ occupational_training       : chr  "N" "N" "N" "N" ...
##  $ job_search                  : Factor w/ 2 levels "N","S": 1 1 1 1 1 1 1 1 1 1 ...
##  $ main_occupation2            : chr  "5" "7" "3" "2" ...
##  $ type_of_contract            : chr  "1" "other_contract" "other_contract" "1" ...
##  $ hours                       : num  36 40 40 40 0 0 22 38 40 0 ...
##  $ short_time_cause            : chr  "2" "2" "2" "2" ...
##  $ homework_situation          : chr  "1" "2" "2" "2" ...
##  $ main_professional_situation2: chr  "4" "2" "3" "4" ...</code></pre>
<pre class="r"><code>vis_miss(pra)</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/tidymodels-7-1.png" width="80%" height="auto">
</p>
<p>
The final dataset contains 29083 observations. Look’s like we’re good to go.
</p>
</section>
<section id="setting-up-the-training-resampling" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-training-resampling">
Setting up the training: resampling
</h2>
<p>
In order to properly train a model, one needs to split the data into two: a part for trying out models with different configuration of hyper-parameters, and another part for final evaluation of the model. This is achieved with <code>rsample::initial_split()</code>:
</p>
<pre class="r"><code>pra_split &lt;- initial_split(pra, prop = 0.9)</code></pre>
<p>
<code>pra_split</code> now contains a training set and a testing set. We can get these by using the <code>rsample::training()</code> and <code>rsample::testing()</code> functions:
</p>
<pre class="r"><code>pra_train &lt;- training(pra_split)
pra_test &lt;- testing(pra_split)</code></pre>
<p>
We can’t stop here though. First we need to split the training set further, in order to perform cross validation. Cross validation will allow us to select the best model; by best I mean a model that has a good hyper-parameter configuration, enabling the model to generalize well to unseen data. I do this by creating 10 splits from the training data (I won’t touch the testing data up until the very end. This testing data is thus sometimes called the holdout set as well):
</p>
<pre class="r"><code>pra_cv_splits &lt;- vfold_cv(pra_train, v = 10)</code></pre>
<p>
Let’s take a look at this object:
</p>
<pre class="r"><code>pra_cv_splits</code></pre>
<pre><code>## #  10-fold cross-validation 
## # A tibble: 10 x 2
##    splits               id    
##    &lt;named list&gt;         &lt;chr&gt; 
##  1 &lt;split [23.6K/2.6K]&gt; Fold01
##  2 &lt;split [23.6K/2.6K]&gt; Fold02
##  3 &lt;split [23.6K/2.6K]&gt; Fold03
##  4 &lt;split [23.6K/2.6K]&gt; Fold04
##  5 &lt;split [23.6K/2.6K]&gt; Fold05
##  6 &lt;split [23.6K/2.6K]&gt; Fold06
##  7 &lt;split [23.6K/2.6K]&gt; Fold07
##  8 &lt;split [23.6K/2.6K]&gt; Fold08
##  9 &lt;split [23.6K/2.6K]&gt; Fold09
## 10 &lt;split [23.6K/2.6K]&gt; Fold10</code></pre>
</section>
<section id="preprocessing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preprocessing-the-data">
Preprocessing the data
</h2>
<p>
I have already pre-processed the missing values in the dataset, so there is not much more that I can do. I will simply create dummy variables out of the categorical variables using <code>step_dummy()</code>:
</p>
<pre class="r"><code>preprocess &lt;- recipe(job_search ~ ., data = pra) %&gt;%
  step_dummy(all_predictors())</code></pre>
<p>
<code>preprocess</code> is a recipe that defines the transformations that must be applied to the training data before fitting. In this case there is only one step; transforming all the predictors into dummies (<code>hours</code> is a numeric variable and will be ignored by this step). The recipe also defines the formula that will be fitted by the models, <code>job_search ~ .</code>, and takes <code>data</code> as a further argument. This is only to give the data frame specification to <code>recipe()</code>: it could even be an empty data frame with the right column names and types. This is why I give it the original data <code>pra</code> and not the training set <code>pra_train</code>. Because this recipe is very simple, it could be applied to the original raw data <code>pra</code> and then I could do the split into training and testing set, as well as further splitting the training set into 10 cross-validation sets. However, this is not the recommended way of applying pre-processing steps. Pre-processing needs to happen inside the cross-validation loop, not outside of it. Why? Suppose that you are normalizing a numeric variable, meaning, substracting its mean from it and dividing by its standard deviation. If you do this operation outside of cross-validation, and even worse, before splitting the data into training and testing set, you will be leaking information from the testing set into the training set. The mean will contain information from the testing set, which will be picked up by the model. It is much better and “realistic” to first split the data and then apply the pre-processing (remember that <em>hiding</em> the test set from the model is supposed to simulate the fact that new, completely unseen data, is thrown at your model once it’s put into production). The same logic applies to cross-validation splits; each split contains now also a training and a testing set (which I will be calling analysis and assessment sets, following <code>{tidymodels}</code>’s author, <a href="https://twitter.com/topepos/status/1066131042615140353?s=20">Max Kuhn</a>) and thus the pre-processing needs to be applied inside the cross-validation loop, meaning that the analysis set will be processed on the fly.
</p>
</section>
<section id="model-definition" class="level2">
<h2 class="anchored" data-anchor-id="model-definition">
Model definition
</h2>
<p>
We come now to the very interesting part: model definition. With <code>{parsnip}</code>, another <code>{tidymodels}</code> package, defining models is always the same, regardless of the underlying package doing the heavy lifting. For instance, to define a logistic regression one would simply write:
</p>
<pre class="r"><code># logistic regression 
logit_tune_pra &lt;- logistic_reg() %&gt;%
  set_engine("glm")</code></pre>
<p>
This defines a standard logistic regression, powered by the <code>glm()</code> <em>engine</em> or function. The way to do this in vanilla R would be :
</p>
<pre class="r"><code>glm(y ~ ., data = mydata, family = "binomial")</code></pre>
<p>
The difference here is that the formula is contained in the <code>glm()</code> function; in our case it is contained in the recipe, which is why I don’t repeat it in the model definition above. You might wonder what the added value of using <code>{tidymodels}</code> for this is. Well, suppose now that I would like to run a logistic regression but with regularization. I would use <code>{glmnet}</code> for this but would need to know the specific syntax of <code>glmnet()</code> which, as you will see, is very different than the one for <code>glm()</code>:
</p>
<pre class="r"><code>  glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = 1.6)</code></pre>
<p>
<code>glmnet()</code>, unlike <code>glm()</code>, does not use a formula as an input, but two matrices, one for the design matrix, and another for the target variable. Using <code>{parsnip}</code>, however, I simply need to change the engine from <code>"glm"</code> to <code>"glmnet"</code>:
</p>
<pre class="r"><code># logistic regression 
logit_tune_pra &lt;- logistic_reg() %&gt;%
  set_engine("glmnet")</code></pre>
<p>
This makes things much simpler as now users only need to learn how to use <code>{parsnip}</code>. However, it is of course still important to read the documentation of the original packages, because it is were hyper-parameters are discussed. Another advantage of <code>{parsnip}</code> is that the same words are used to speak of the same hyper-parameters . For instance for tree-based methods, the number of trees is sometimes <code>ntree</code> then in another package <code>num_trees</code>, and is again different in yet another package. In <code>{parsnip}</code>’s interface for tree-based methods, this parameter is simply called <code>tree</code>. Users can fix the value of hyper-parameters directly by passing values to, say, <code>tree</code> (as in <code>"tree" = 200</code>), or they can tune these hyper-parameters. To do so, one needs to tag them, like so:
</p>
<pre class="r"><code># logistic regression 
logit_tune_pra &lt;- logistic_reg(penalty = tune(), mixture = tune()) %&gt;%
  set_engine("glmnet")</code></pre>
<p>
This defines <code>logit_tune_pra</code> with 2 hyper-parameters that must be tuned using cross-validation, the penalty and the amount of mixture between penalties (this is for elasticnet regularization).
</p>
<p>
Now, I will define 5 different models, with different hyper-parameters to tune, and I will also define a grid of hyper-parameters of size 10 for each model. This means that I will train these 5 models 10 times, each time with a different hyper-parameter configuration. To define the grid, I use the <code>grid_max_entropy()</code> function from the <code>{dials}</code> package. This creates a grid with points that are randomly drawn from the parameter space in a way that ensures that the combination we get covers the whole space, or at least are not too far away from any portion of the space. Of course, the more configuration you try, the better, but the longer the training will run.
</p>
<pre class="r"><code># Logistic regression
logit_tune_pra &lt;- logistic_reg(penalty = tune(), mixture = tune()) %&gt;%
  set_engine("glmnet")

# Hyperparameter grid
logit_grid &lt;- logit_tune_pra %&gt;%
  parameters() %&gt;%
  grid_max_entropy(size = 10)

# Workflow bundling every step 
logit_wflow &lt;- workflow() %&gt;%
  add_recipe(preprocess) %&gt;%
  add_model(logit_tune_pra)

# random forest
rf_tune_pra &lt;- rand_forest(mtry = tune(), trees = tune()) %&gt;%
  set_engine("ranger") %&gt;%
  set_mode("classification")

rf_grid &lt;- rf_tune_pra %&gt;%
  parameters() %&gt;%
  finalize(select(pra, -job_search)) %&gt;%  
  grid_max_entropy(size = 10)

rf_wflow &lt;- workflow() %&gt;%
  add_recipe(preprocess) %&gt;%
  add_model(rf_tune_pra)

# mars model
mars_tune_pra &lt;- mars(num_terms = tune(), prod_degree = 2, prune_method = tune()) %&gt;%
  set_engine("earth") %&gt;%
  set_mode("classification")

mars_grid &lt;- mars_tune_pra %&gt;%
  parameters() %&gt;%
  grid_max_entropy(size = 10)

mars_wflow &lt;- workflow() %&gt;%
  add_recipe(preprocess) %&gt;%
  add_model(mars_tune_pra)

#boosted trees
boost_tune_pra &lt;- boost_tree(mtry = tune(), tree = tune(),
                             learn_rate = tune(), tree_depth = tune()) %&gt;%
  set_engine("xgboost") %&gt;%
  set_mode("classification")

boost_grid &lt;- boost_tune_pra %&gt;%
  parameters() %&gt;%
  finalize(select(pra, -job_search)) %&gt;%  
  grid_max_entropy(size = 10)

boost_wflow &lt;- workflow() %&gt;%
  add_recipe(preprocess) %&gt;%
  add_model(boost_tune_pra)

#neural nets
keras_tune_pra &lt;- mlp(hidden_units = tune(), penalty = tune(), activation = "relu") %&gt;%
  set_engine("keras") %&gt;%
  set_mode("classification")

keras_grid &lt;- keras_tune_pra %&gt;%
  parameters() %&gt;%
  grid_max_entropy(size = 10)

keras_wflow &lt;- workflow() %&gt;%
  add_recipe(preprocess) %&gt;%
  add_model(keras_tune_pra)</code></pre>
<p>
For each model, I defined three objects; the model itself, for instance <code>keras_tune_pra</code>, then a grid of hyper-parameters, and finally a workflow. To define the grid, I need to extract the parameters to tune using the <code>parameters()</code> function, and for tree based methods, I also need to use <code>finalize()</code> to set the <code>mtry</code> parameter. This is because <code>mtry</code> depends on the dimensions of the data (the value of <code>mtry</code> cannot be larger than the number of features), so I need to pass on this information to…well, finalize the grid. Then I can choose the size of the grid and how I want to create it (randomly, or using max entropy, or regularly spaced…). A workflow bundles the pre-processing and the model definition together, and makes fitting the model very easy. Workflows make it easy to run the pre-processing inside the cross-validation loop. Workflow objects can be passed to the fitting function, as we shall see in the next section.
</p>
</section>
<section id="fitting-models-with-tidymodels" class="level2">
<h2 class="anchored" data-anchor-id="fitting-models-with-tidymodels">
Fitting models with <code>{tidymodels}</code>
</h2>
<p>
Fitting one model with <code>{tidymodels}</code> is quite easy:
</p>
<pre class="r"><code>fitted_model &lt;- fit(model_formula, data = data_train)</code></pre>
<p>
and that’s it. If you define a workflow, which bundles pre-processing and model definition in one package, you need to pass it to <code>fit()</code> as well:
</p>
<pre class="r"><code>fitted_wflow &lt;- fit(model_wflow, data = data_train)</code></pre>
<p>
However, a single call to fit does not perform cross-validation. This simply trains the model on the training data, and that’s it. To perform cross validation, you can use either <code>fit_resamples()</code>:
</p>
<pre class="r"><code>fitted_resamples &lt;- fit_resamples(model_wflow,
                               resamples = my_cv_splits,
                               control = control_resamples(save_pred = TRUE))</code></pre>
<p>
or <code>tune_grid()</code>:
</p>
<pre class="r"><code>tuned_model &lt;- tune_grid(model_wflow,
                         resamples = my_cv_splits,
                         grid = my_grid,
                         control = control_resamples(save_pred = TRUE))</code></pre>
<p>
As you probably guessed it, <code>fit_resamples()</code> does not perform tuning; it simply fits a model specification (without varying hyper-parameters) to all the analysis sets contained in the <code>my_cv_splits</code> object (which contains the resampled training data for cross-validation), while <code>tune_grid()</code> does the same, but allows for varying hyper-parameters.
</p>
<p>
We thus are going to use <code>tune_grid()</code> to fit our models and perform hyper-paramater tuning. However, since I have 5 models and 5 grids, I’ll be using <code>map2()</code> for this. If you’re not familiar with <code>map2()</code>, here’s a quick example:
</p>
<pre class="r"><code>map2(c(1, 1, 1), c(2,2,2), `+`)</code></pre>
<pre><code>## [[1]]
## [1] 3
## 
## [[2]]
## [1] 3
## 
## [[3]]
## [1] 3</code></pre>
<p>
<code>map2()</code> maps the <code>+()</code> function to each element of both vectors successively. I’m going to use this to map the <code>tune_grid()</code> function to a list of models and a list of grids. But because this is going to take some time to run, and because I have an AMD Ryzen 5 1600X processor with 6 physical cores and 12 logical cores, I’ll by running this in parallel using <code>furrr::future_map2()</code>.
</p>
<p>
<code>furrr::future_map2()</code> will run one model per core, and the way to do it is to simply define how many cores I want to use, then replace <code>map2()</code> in my code by <code>future_map2()</code>:
</p>
<pre class="r"><code>wflow_list &lt;- list(logit_wflow, rf_wflow, mars_wflow, boost_wflow, keras_wflow)
grid_list &lt;- list(logit_grid, rf_grid, mars_grid, boost_grid, keras_grid)

plan(multiprocess, workers = 6)

trained_models_list &lt;- future_map2(.x = wflow_list,
                                   .y = grid_list,
                                   ~tune_grid(.x , resamples = pra_cv_splits, grid = .y))</code></pre>
<p>
Running this code took almost 3 hours. In the end, here is the result:
</p>
<pre class="r"><code>trained_models_list</code></pre>
<pre><code>## [[1]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 
## [[2]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 
## [[3]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 
## [[4]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 7]&gt; &lt;tibble [1 × 1]&gt;
## 
## [[5]]
## #  10-fold cross-validation 
## # A tibble: 10 x 4
##    splits               id     .metrics          .notes          
##  * &lt;list&gt;               &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          
##  1 &lt;split [23.6K/2.6K]&gt; Fold01 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  2 &lt;split [23.6K/2.6K]&gt; Fold02 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  3 &lt;split [23.6K/2.6K]&gt; Fold03 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  4 &lt;split [23.6K/2.6K]&gt; Fold04 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  5 &lt;split [23.6K/2.6K]&gt; Fold05 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  6 &lt;split [23.6K/2.6K]&gt; Fold06 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  7 &lt;split [23.6K/2.6K]&gt; Fold07 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  8 &lt;split [23.6K/2.6K]&gt; Fold08 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
##  9 &lt;split [23.6K/2.6K]&gt; Fold09 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;
## 10 &lt;split [23.6K/2.6K]&gt; Fold10 &lt;tibble [20 × 5]&gt; &lt;tibble [1 × 1]&gt;</code></pre>
<p>
I now have a list of 5 tibbles containing the analysis/assessment splits, the id identifying the cross-validation fold, a list-column containing information on model performance for that given split and some notes (if everything goes well, notes are empty). Let’s take a look at the column <code>.metrics</code> of the first model and for the first fold:
</p>
<pre class="r"><code>trained_models_list[[1]]$.metrics[[1]]</code></pre>
<pre><code>## # A tibble: 20 x 5
##     penalty mixture .metric  .estimator .estimate
##       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;
##  1 4.25e- 3  0.0615 accuracy binary         0.906
##  2 4.25e- 3  0.0615 roc_auc  binary         0.895
##  3 6.57e-10  0.0655 accuracy binary         0.908
##  4 6.57e-10  0.0655 roc_auc  binary         0.897
##  5 1.18e- 6  0.167  accuracy binary         0.908
##  6 1.18e- 6  0.167  roc_auc  binary         0.897
##  7 2.19e-10  0.371  accuracy binary         0.907
##  8 2.19e-10  0.371  roc_auc  binary         0.897
##  9 2.73e- 1  0.397  accuracy binary         0.885
## 10 2.73e- 1  0.397  roc_auc  binary         0.5  
## 11 1.72e- 6  0.504  accuracy binary         0.907
## 12 1.72e- 6  0.504  roc_auc  binary         0.897
## 13 1.25e- 9  0.633  accuracy binary         0.907
## 14 1.25e- 9  0.633  roc_auc  binary         0.897
## 15 6.62e- 6  0.880  accuracy binary         0.907
## 16 6.62e- 6  0.880  roc_auc  binary         0.897
## 17 6.00e- 1  0.899  accuracy binary         0.885
## 18 6.00e- 1  0.899  roc_auc  binary         0.5  
## 19 4.57e-10  0.989  accuracy binary         0.907
## 20 4.57e-10  0.989  roc_auc  binary         0.897</code></pre>
<p>
This shows how the 10 different configurations of the elasticnet model performed. To see how the model performed on the second fold:
</p>
<pre class="r"><code>trained_models_list[[1]]$.metrics[[2]]</code></pre>
<pre><code>## # A tibble: 20 x 5
##     penalty mixture .metric  .estimator .estimate
##       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;
##  1 4.25e- 3  0.0615 accuracy binary         0.913
##  2 4.25e- 3  0.0615 roc_auc  binary         0.874
##  3 6.57e-10  0.0655 accuracy binary         0.913
##  4 6.57e-10  0.0655 roc_auc  binary         0.877
##  5 1.18e- 6  0.167  accuracy binary         0.913
##  6 1.18e- 6  0.167  roc_auc  binary         0.878
##  7 2.19e-10  0.371  accuracy binary         0.913
##  8 2.19e-10  0.371  roc_auc  binary         0.878
##  9 2.73e- 1  0.397  accuracy binary         0.901
## 10 2.73e- 1  0.397  roc_auc  binary         0.5  
## 11 1.72e- 6  0.504  accuracy binary         0.913
## 12 1.72e- 6  0.504  roc_auc  binary         0.878
## 13 1.25e- 9  0.633  accuracy binary         0.913
## 14 1.25e- 9  0.633  roc_auc  binary         0.878
## 15 6.62e- 6  0.880  accuracy binary         0.913
## 16 6.62e- 6  0.880  roc_auc  binary         0.878
## 17 6.00e- 1  0.899  accuracy binary         0.901
## 18 6.00e- 1  0.899  roc_auc  binary         0.5  
## 19 4.57e-10  0.989  accuracy binary         0.913
## 20 4.57e-10  0.989  roc_auc  binary         0.878</code></pre>
<p>
Hyper-Parameters are the same; it is only the cross validation fold that is different. To get the best performing model from such objects you can use <code>show_best()</code> which will extract the best performing models across all the cross validation folds:
</p>
<pre class="r"><code>show_best(trained_models_list[[1]], metric = "accuracy")</code></pre>
<pre><code>## # A tibble: 5 x 7
##    penalty mixture .metric  .estimator  mean     n std_err
##      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1 6.57e-10  0.0655 accuracy binary     0.916    10 0.00179
## 2 1.18e- 6  0.167  accuracy binary     0.916    10 0.00180
## 3 1.72e- 6  0.504  accuracy binary     0.916    10 0.00182
## 4 4.57e-10  0.989  accuracy binary     0.916    10 0.00181
## 5 6.62e- 6  0.880  accuracy binary     0.916    10 0.00181</code></pre>
<p>
This shows the 5 best configurations for elasticnet when looking at accuracy. Now how to get the best performing elasticnet regression, random forest, boosted trees, etc? Easy, using <code>map()</code>:
</p>
<pre class="r"><code>map(trained_models_list, show_best, metric = "accuracy")</code></pre>
<pre><code>## [[1]]
## # A tibble: 5 x 7
##    penalty mixture .metric  .estimator  mean     n std_err
##      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1 6.57e-10  0.0655 accuracy binary     0.916    10 0.00179
## 2 1.18e- 6  0.167  accuracy binary     0.916    10 0.00180
## 3 1.72e- 6  0.504  accuracy binary     0.916    10 0.00182
## 4 4.57e-10  0.989  accuracy binary     0.916    10 0.00181
## 5 6.62e- 6  0.880  accuracy binary     0.916    10 0.00181
## 
## [[2]]
## # A tibble: 5 x 7
##    mtry trees .metric  .estimator  mean     n std_err
##   &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1    13  1991 accuracy binary     0.929    10 0.00172
## 2    13  1180 accuracy binary     0.929    10 0.00168
## 3    12   285 accuracy binary     0.928    10 0.00168
## 4     8  1567 accuracy binary     0.927    10 0.00171
## 5     8   647 accuracy binary     0.927    10 0.00191
## 
## [[3]]
## # A tibble: 5 x 7
##   num_terms prune_method .metric  .estimator  mean     n std_err
##       &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1         5 backward     accuracy binary     0.904    10 0.00186
## 2         5 forward      accuracy binary     0.902    10 0.00185
## 3         4 exhaustive   accuracy binary     0.901    10 0.00167
## 4         4 seqrep       accuracy binary     0.901    10 0.00167
## 5         2 backward     accuracy binary     0.896    10 0.00209
## 
## [[4]]
## # A tibble: 5 x 9
##    mtry trees tree_depth learn_rate .metric  .estimator  mean     n std_err
##   &lt;int&gt; &lt;int&gt;      &lt;int&gt;      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1    12  1245         12   7.70e- 2 accuracy binary     0.929    10 0.00175
## 2     1   239          8   8.23e- 2 accuracy binary     0.927    10 0.00186
## 3     1   835         14   8.53e-10 accuracy binary     0.913    10 0.00232
## 4     4  1522         12   2.22e- 5 accuracy binary     0.896    10 0.00209
## 5     6   313          2   1.21e- 8 accuracy binary     0.896    10 0.00209
## 
## [[5]]
## # A tibble: 5 x 7
##   hidden_units  penalty .metric  .estimator  mean     n std_err
##          &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
## 1           10 3.07e- 6 accuracy binary     0.917    10 0.00209
## 2            6 1.69e-10 accuracy binary     0.917    10 0.00216
## 3            4 2.32e- 7 accuracy binary     0.916    10 0.00194
## 4            7 5.52e- 5 accuracy binary     0.916    10 0.00163
## 5            8 1.13e- 9 accuracy binary     0.916    10 0.00173</code></pre>
<p>
Now, we need to test these models on the holdout set, but this post is already quite long. In the next blog post, I will retrain the top best performing models for each type of model and see how they fare against the holdout set. I’ll be also looking at explainability, so stay tuned!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2020-03-08-tidymodels.html</guid>
  <pubDate>Sun, 08 Mar 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Synthetic micro-datasets: a promising middle ground between data privacy and data analysis</title>
  <link>https://b-rodrigues.github.io/posts/2020-02-23-synthpop.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://twitter.com/scienceshitpost/status/1218199897654120449"> <img src="https://b-rodrigues.github.io/assets/img/fake_car.png" title="A purpoise can be assumed to be a kind of fake car." width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<section id="intro-the-need-for-microdata-and-the-risk-of-disclosure" class="level2">
<h2 class="anchored" data-anchor-id="intro-the-need-for-microdata-and-the-risk-of-disclosure">
Intro: the need for microdata, and the risk of disclosure
</h2>
<p>
Survey and administrative data are essential for scientific research, however accessing such datasets can be very tricky, or even impossible. In my previous job I was responsible for getting access to such “scientific micro-datasets” from institutions like Eurostat. In general, getting access to these micro datasets was only a question of filling out some forms and signing NDAs. But this was true only because my previous employer was an accredited research entity. Companies from the private sector or unaffiliated, individual, researchers cannot get access to the microdata sets. This is because institutions that produce such datasets absolutely do not want any type of personal information to be disclosed.
</p>
<p>
For instance, with the labour force survey, a National Statistical Institute (NSI) collects information about wages, family structure, educational attainment and much more. If, say, a politician would answer to the survey and his answers would leak to the public that would be disastrous for NSIs. So this is why access is restricted to accredited research institutions. You may be asking yourself, “how could the politicians answers leak? The data is anonymized!” Indeed it is, but in some cases that may not be enough to ensure that information does not get disclosed. Suppose that the dataset contains enough information to allow you to know for certain that you found said politician, assume that this politician is a 43 year old man, has two children, a PhD in theology and lives in Strassen, one of Luxembourg-City very nice neighborhoods. It would be quite easy to find him in the dataset and then find out his wage.
</p>
<p>
To avoid this, researchers are required to perform output checking, which means going through the set of outputs (summary tables, graphs, tables with regression coefficients…) and making sure that it is not possible to find out individuals. For instance, in Luxembourg there are two companies in the tobacco industry. Luxembourg’s NSI cannot release the total turnover of the industry, because then company A would subtract its turnover from the total and find out its competitor’s turnover. Now these are all hypothetical examples, and we might argue that the risk of leakage is quite low, especially if NSIs make sure to lower the precision of the variables, by providing age categories instead of the exact age for example. Or capping wages that exceed a certain fixed amount. In any case for now most NSIs don’t release micro data to the public, and this poses some challenges for research. First of all, even for researchers, it would be great if the data was freely accessible. It would allow research to go straight to data analysis and look at the structure of the data before applying for access, with the risk of getting access to useless data. And of course it would be great for the public at large to be able to freely access such data, for educational purposes at the very least. It would also increase competition between research institutions and the private sector when it comes to conducting studies using such data. Free access to the microdata would level the playing field. Now, some NSIs do release micro data to the public, see Eustat, the NSI from the Basque country, an autonomous region of Spain. It is not clear to me if they also have more detailed data that is only accessible to researchers, but the data they offer is already quite interesting.
</p>
<p>
A middle ground between only releasing data to researchers and making it completely freely accessible is to create a synthetic dataset, which does not contain any of the original records, but which still allows to perform meaningful analyses.
</p>
<p>
I’m not yet very familiar with the details of the procedure, but in this blog post I’ll use Eustat’s microdata to generate a synthetic dataset. I’ll then perform the same analysis on both the original dataset and the synthetic dataset. The dataset I’ll be using can be found <a href="https://en.eustat.eus/estadisticas/tema_37/opt_0/tipo_11/temas.html">here</a>, and is called <em>Population with relation to activity (PRA)</em>:
</p>
<p>
<em>The Survey on the Population in Relation to Activity operation is a continuous source of information on the characteristics and dynamics of the labour force of the Basque Country. It records the relation to productive activity of the population resident in family households, as well as the changes produced in labour situations; it produces indicators of conjunctural variations in the evolution of the active population; it also estimates the degree of participation of the population in economically non-productive activities. It offers information on the province and capital level.</em>
</p>
<p>
I’ll then compare the results of the analyses performed on the two datasets which will hopefully be very similar. To create the synthetic dataset, I’ll be using the <code>{synthpop}</code> package. You can read the detailed vignette <a href="https://cran.r-project.org/web/packages/synthpop/vignettes/synthpop.pdf">here - pdf warning -</a>. First, let me perform some cleaning steps. There are four datasets included in the archive. Let’s load them:
</p>
<pre class="r"><code>library(tidyverse)
library(tidymodels)
library(readxl)
library(synthpop)

list_data &lt;- Sys.glob("MICRO*.csv")

dataset &lt;- map(list_data, read_csv2) %&gt;%
  bind_rows()

head(dataset)</code></pre>
<p>
The columns are labeled in Spanish so I’m copy pasting the labels into Google translate and paste them back into my script. I saved the English names into the english.rds object for posterity. These steps are detailed in the next lines:
</p>
<pre class="r"><code>dictionary &lt;- read_xlsx("Microdatos_PRA_2019/diseño_registro_microdatos_pra.xlsx", sheet="Valores",
                        col_names = FALSE)</code></pre>
<pre><code>## New names:
## * `` -&gt; ...1
## * `` -&gt; ...2
## * `` -&gt; ...3</code></pre>
<pre class="r"><code>col_names &lt;- dictionary %&gt;%
  filter(!is.na(...1)) %&gt;%
  dplyr::select(1:2)

# copy to clipboard, paste to google translate
# couldn't be bothered to use an api and google cloud or whatever
#clipr::write_clip(col_names$`...2`)

#english &lt;- clipr::read_clip()

english &lt;- readRDS("english_col_names.rds")

col_names$english &lt;- english

colnames(dataset) &lt;- col_names$english

dataset &lt;- janitor::clean_names(dataset)</code></pre>
<p>
I now create a function that will perform the cleaning steps:
</p>
<pre class="r"><code>basic_cleaning &lt;- function(dataset){
  dataset %&gt;%
  dplyr::filter(age %in% c("05", "06", "07", "08", "09", "10", "11")) %&gt;%
  dplyr::filter(!is.na(job_search)) %&gt;%  
  dplyr::select(territory, capital, sex, place_of_birth, age, nationality, level_of_studies_completed,
                job_search, main_occupation, type_of_contract, hours) %&gt;%
  dplyr::mutate_at(.vars = vars(-hours), .funs=as.factor)
}</code></pre>
</section>
<section id="putting-on-my-econometricians-hat" class="level2">
<h2 class="anchored" data-anchor-id="putting-on-my-econometricians-hat">
Putting on my econometricians hat
</h2>
<p>
Let’s now suppose that I’m only interested in running a logistic regression:
</p>
<pre class="r"><code>pra &lt;- basic_cleaning(dataset)

head(pra)</code></pre>
<pre><code>## # A tibble: 6 x 11
##   territory capital sex   place_of_birth age   nationality level_of_studie…
##   &lt;fct&gt;     &lt;fct&gt;   &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt; &lt;fct&gt;       &lt;fct&gt;           
## 1 48        9       6     1              09    1           1               
## 2 48        9       1     1              09    1           2               
## 3 48        1       1     1              11    1           3               
## 4 48        1       6     1              10    1           3               
## 5 48        9       6     1              07    1           3               
## 6 48        9       1     1              09    1           1               
## # … with 4 more variables: job_search &lt;fct&gt;, main_occupation &lt;fct&gt;,
## #   type_of_contract &lt;fct&gt;, hours &lt;dbl&gt;</code></pre>
<pre class="r"><code>logit_model &lt;- glm(job_search ~ ., data = pra, family = binomial())

# Create a tidy dataset with the results of the regression
tidy_logit_model &lt;- tidy(logit_model, conf.int = TRUE) %&gt;%
  mutate(dataset = "true")</code></pre>
<p>
Let’s now take a look at the coefficients, by plotting their value along with their confidence intervals:
</p>
<pre class="r"><code>ggplot(tidy_logit_model, aes(x = term, y = estimate)) +
  geom_point(colour = "#82518c") +
  geom_hline(yintercept = 0, colour = "red") +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), colour = "#657b83") +
  brotools::theme_blog() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/synthpop-8-1.png" width="80%" height="auto">
</p>
<p>
Ok, so now, how would the results change if I run the same analysis on the synthetic dataset? First, I need to generate this synthetic dataset:
</p>
<pre class="r"><code>my_seed &lt;- 1234

synthetic_data &lt;- syn(pra, seed = my_seed)</code></pre>
<pre><code>## Synthesis
## -----------
##  territory capital sex place_of_birth age nationality level_of_studies_completed job_search main_occupation type_of_contract
##  hours</code></pre>
<p>
The synthetic data is generated by a single call to the <code>syn()</code> function included in the <code>{synthpop}</code> package. Let’s take a look at the generated object:
</p>
<pre class="r"><code>synthetic_data</code></pre>
<pre><code>## Call:
## ($call) syn(data = pra, seed = my_seed)
## 
## Number of synthesised data sets: 
## ($m)  1 
## 
## First rows of synthesised data set: 
## ($syn)
##   territory capital sex place_of_birth age nationality
## 1        48       9   1              1  06           1
## 2        01       9   6              3  09           1
## 3        48       3   1              1  08           1
## 4        48       9   6              1  11           1
## 5        20       2   6              1  09           1
## 6        48       1   6              1  11           1
##   level_of_studies_completed job_search main_occupation type_of_contract hours
## 1                          3          N               2                1    40
## 2                          1          S               9                6    10
## 3                          1          N               6             &lt;NA&gt;    32
## 4                          2          N               4                1    32
## 5                          3          N               5             &lt;NA&gt;    40
## 6                          1          S               7             &lt;NA&gt;    NA
## ...
## 
## Synthesising methods: 
## ($method)
##                  territory                    capital 
##                   "sample"                     "cart" 
##                        sex             place_of_birth 
##                     "cart"                     "cart" 
##                        age                nationality 
##                     "cart"                     "cart" 
## level_of_studies_completed                 job_search 
##                     "cart"                     "cart" 
##            main_occupation           type_of_contract 
##                     "cart"                     "cart" 
##                      hours 
##                     "cart" 
## 
## Order of synthesis: 
## ($visit.sequence)
##                  territory                    capital 
##                          1                          2 
##                        sex             place_of_birth 
##                          3                          4 
##                        age                nationality 
##                          5                          6 
## level_of_studies_completed                 job_search 
##                          7                          8 
##            main_occupation           type_of_contract 
##                          9                         10 
##                      hours 
##                         11 
## 
## Matrix of predictors: 
## ($predictor.matrix)
##                            territory capital sex place_of_birth age nationality
## territory                          0       0   0              0   0           0
## capital                            1       0   0              0   0           0
## sex                                1       1   0              0   0           0
## place_of_birth                     1       1   1              0   0           0
## age                                1       1   1              1   0           0
## nationality                        1       1   1              1   1           0
## level_of_studies_completed         1       1   1              1   1           1
## job_search                         1       1   1              1   1           1
## main_occupation                    1       1   1              1   1           1
## type_of_contract                   1       1   1              1   1           1
## hours                              1       1   1              1   1           1
##                            level_of_studies_completed job_search
## territory                                           0          0
## capital                                             0          0
## sex                                                 0          0
## place_of_birth                                      0          0
## age                                                 0          0
## nationality                                         0          0
## level_of_studies_completed                          0          0
## job_search                                          1          0
## main_occupation                                     1          1
## type_of_contract                                    1          1
## hours                                               1          1
##                            main_occupation type_of_contract hours
## territory                                0                0     0
## capital                                  0                0     0
## sex                                      0                0     0
## place_of_birth                           0                0     0
## age                                      0                0     0
## nationality                              0                0     0
## level_of_studies_completed               0                0     0
## job_search                               0                0     0
## main_occupation                          0                0     0
## type_of_contract                         1                0     0
## hours                                    1                1     0</code></pre>
<p>
As you can see, <code>synthetic_data</code> is a list with several elements. The data is inside the <code>syn</code> element. Let’s extract it, and perform the same analysis from before:
</p>
<pre class="r"><code>syn_pra &lt;- synthetic_data$syn

head(syn_pra)</code></pre>
<pre><code>##   territory capital sex place_of_birth age nationality
## 1        48       9   1              1  06           1
## 2        01       9   6              3  09           1
## 3        48       3   1              1  08           1
## 4        48       9   6              1  11           1
## 5        20       2   6              1  09           1
## 6        48       1   6              1  11           1
##   level_of_studies_completed job_search main_occupation type_of_contract hours
## 1                          3          N               2                1    40
## 2                          1          S               9                6    10
## 3                          1          N               6             &lt;NA&gt;    32
## 4                          2          N               4                1    32
## 5                          3          N               5             &lt;NA&gt;    40
## 6                          1          S               7             &lt;NA&gt;    NA</code></pre>
<pre class="r"><code>syn_pra &lt;- basic_cleaning(syn_pra)

logit_model_syn &lt;- glm(job_search ~ ., data = syn_pra, family = binomial())

tidy_logit_syn &lt;- tidy(logit_model_syn, conf.int = TRUE) %&gt;%
  mutate(dataset = "syn")

ggplot(tidy_logit_syn, aes(x = term, y = estimate)) +
  geom_point(colour = "#82518c") +
  geom_hline(yintercept = 0, colour = "red") +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), colour = "#657b83") +
  brotools::theme_blog() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/synthpop-12-1.png" width="80%" height="auto">
</p>
<p>
To ease the comparison between the coefficients of the model, let’s create a single graph:
</p>
<pre class="r"><code>coeff_models &lt;- bind_rows(list(tidy_logit_model, tidy_logit_syn))

ggplot(coeff_models, aes(x = term, y = estimate, colour = dataset)) +
  geom_point() +
  geom_hline(yintercept = 0) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
  brotools::theme_blog() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) </code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/synthpop-13-1.png" width="80%" height="auto">
</p>
<p>
This is quite interesting; generally, there is quite some overlap between the synthetic data and the real data! There are some differences though, for instance, <code>main_occupation6</code> is significant with the synthetic data, but is not with the real data. There’s the possibility to generate more than one synthetic dataset, which would very likely reduce the noise.
</p>
</section>
<section id="putting-on-my-data-scientist-hat" class="level2">
<h2 class="anchored" data-anchor-id="putting-on-my-data-scientist-hat">
Putting on my data scientist hat
</h2>
<p>
Now let’s suppose that I am only interested into prediction. For this, I am going to split my dataset into a training and testing set, then run a logistic regression and a random forest, assess the models’ performance with 10-fold cross validation. I’ll do this on both the real and the synthetic data. To perform the analysis, I’ll be using the <code>{tidymodels}</code> framework; I’m going to explain the code that follows line by line, because I’ll very likely write a blog post focusing on <code>{tidymodels}</code> soon.
</p>
<p>
So, let’s write a function that does exactly what I explained above:
</p>
<pre class="r"><code>training_and_evaluating &lt;- function(dataset){

  pra_split &lt;- initial_split(dataset, prop = 0.8)
  
  pra_train &lt;- training(pra_split)
  pra_test &lt;- testing(pra_split)
  
  pra_cv_splits &lt;- vfold_cv(pra_train, v = 10)
  
  preprocess &lt;- recipe(job_search ~ ., data = pra) %&gt;%
    step_knnimpute(all_predictors())
  
  logit_pra &lt;- logistic_reg() %&gt;%
    set_engine("glm")
  
  fitted_logit &lt;- fit_resamples(preprocess,
                                model = logit_pra,
                                resamples = pra_cv_splits,
                                control = control_resamples(save_pred = TRUE))
  
  metric_logit &lt;- fitted_logit$.metrics %&gt;%
    bind_rows() %&gt;%
    group_by(.metric) %&gt;%
    summarise_at(.vars = vars(.estimate), .funs = lst(mean, sd)) %&gt;%
    mutate(model = "logit")
  
  rf_pra &lt;- rand_forest(mode = "classification") %&gt;%
    set_engine(engine = "ranger")
  
  fitted_forest &lt;- fit_resamples(preprocess,
                                model = rf_pra,
                                resamples = pra_cv_splits,
                                control = control_resamples(save_pred = TRUE))
  
  metric_forest &lt;- fitted_forest$.metrics %&gt;%
    bind_rows() %&gt;%
    group_by(.metric) %&gt;%
    summarise_at(.vars = vars(.estimate), .funs = lst(mean, sd)) %&gt;%
    mutate(model = "forest")


  bind_rows(list(metric_logit, metric_forest))
}</code></pre>
<p>
Now I can run this function on both the real and the synthetic data, and look at the performance of the logistic regression and of the random forest:
</p>
<pre class="r"><code>true_data_performance &lt;- training_and_evaluating(pra)

syn_data_performance &lt;- training_and_evaluating(syn_pra)</code></pre>
<pre class="r"><code>true_data_performance</code></pre>
<pre><code>## # A tibble: 4 x 4
##   .metric   mean      sd model 
##   &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; 
## 1 accuracy 0.882 0.00816 logit 
## 2 roc_auc  0.708 0.0172  logit 
## 3 accuracy 0.907 0.00619 forest
## 4 roc_auc  0.879 0.0123  forest</code></pre>
<pre class="r"><code>syn_data_performance</code></pre>
<pre><code>## # A tibble: 4 x 4
##   .metric   mean      sd model 
##   &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; 
## 1 accuracy 0.882 0.00758 logit 
## 2 roc_auc  0.691 0.0182  logit 
## 3 accuracy 0.899 0.00615 forest
## 4 roc_auc  0.857 0.0124  forest</code></pre>
<p>
The performance is pretty much the same!
</p>
<p>
Generating synthetic data is a very promising approach, that I certainly will be using more; I think that such approaches can also be very interesting in the private sector (not only to ease access to microdata for researchers) especially within large companies. For instance, it can happen that the data owners from say, an insurance company, are not very keen on sharing sensitive client information with their data scientists. However, by generating a synthetic dataset and sharing the synthetic data with their data science team, the data owners avoid any chance of disclosure of sensitive information, while at the same time allowing their data scientists to develop interesting analyses or applications on the data!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-02-23-synthpop.html</guid>
  <pubDate>Sun, 23 Feb 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dynamic discrete choice models, reinforcement learning and Harold, part 2</title>
  <link>https://b-rodrigues.github.io/posts/2020-02-08-harold_part2.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://youtu.be/ZwRuneeLsCQ?t=229"> <img src="https://b-rodrigues.github.io/assets/img/bus.jpg" title="very nice" width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<p>
<em>In this blog post, I present a paper that has really interested me for a long time. This is part2, where I will briefly present the model of the paper, and try to play around with the data. If you haven’t, I suggest you read <a href="https://www.brodrigues.co/blog/2020-01-26-harold/">part 1</a> where I provide more context.</em>
</p>
<section id="rusts-model" class="level2">
<h2 class="anchored" data-anchor-id="rusts-model">
Rust’s model
</h2>
<p>
Welcome to part 2 of this series, which might or might not have a part 3. I have been quite busy with this paper and especially with reinforcement learning these past couple of weeks, but in the meantime, other <a href="https://www.youtube.com/channel/UCTZXht1RTL2Duc3eU8MYGzQ">things</a> have taken some of my time, so who knows if I’ll keep discussing this paper.
</p>
<p>
Before going into the data, let me describe the model very broadly. The problem is as follows: each month, Harold Zurcher must decide whether to simply perform some basic maintenance on the buses he’s responsible for, or he can decide to completely replace the engine. Let his utility function be as follows:
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5B%20u(x_t,%20i_t,%20_1)%20=%20%7B%0A%5C%5B%5Cbegin%7Barray%7D%7Blcl%7D%0A-c(x_t,%20%5Ctheta_1)%20&amp;amp;%20%5Ctext%7Bif%7D%20&amp;amp;%20i_t%20=%200,%20%5C%5C%0A-%5B%5Coverline%7BP%7D%20-%20%5Cunderline%7BP%7D%20+%20c(0,%20%5Ctheta_1)%5D%20&amp;amp;%20%5Ctext%7Bif%7D%20&amp;amp;%20i_t%20=%201,%5C%5C%0A%5Cend%7Barray%7D%5C%5D%0A.%20%5D">
</p>
<p>
where <img src="https://latex.codecogs.com/png.latex?(x_t)"> is the state variable, the reading of the odometer at month <img src="https://latex.codecogs.com/png.latex?(t)">, <img src="https://latex.codecogs.com/png.latex?(i_t)"> is Harold Zurcher’s decision at time <img src="https://latex.codecogs.com/png.latex?(t)">. <img src="https://latex.codecogs.com/png.latex?(i_t%20=%200)"> is the decision to keep the engine, <img src="https://latex.codecogs.com/png.latex?(i_t%20=%201)"> is the decision to replace. Each time the engine is replaced, the state variable <img src="https://latex.codecogs.com/png.latex?(x_t)"> regenerates to 0. That is why John Rust, the paper’s author, calls the problem under study a regenerative optimal stopping model. If <img src="https://latex.codecogs.com/png.latex?(i_t%20=%200)"> (keep the engine) is chosen, then the cost of normal maintenance is <img src="https://latex.codecogs.com/png.latex?(c(x_t,%20_1))">, if <img src="https://latex.codecogs.com/png.latex?(i_t%20=%201)"> (change the engine) then the cost is <img src="https://latex.codecogs.com/png.latex?()">, which is the price of the new engine. However, it is still possible to sell the old engine for scrap value, <img src="https://latex.codecogs.com/png.latex?()">. The replacement cost is equal to <img src="https://latex.codecogs.com/png.latex?(c(0,%20_1))">. <img src="https://latex.codecogs.com/png.latex?(_1)"> is a vector of parameters of the cost function to estimate. Because Harold Zurcher is forward looking, and does not want to simply maximize the current month’s utility, he seeks to maximize his intertemporal utility function. The optimal policy would be the solution to the following equation:
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5B%20V_%7B%7D%20=%20E%7B%20_%7Bj%20=%20t%7D%7Bj-t%7Du(x_j,%20f_j,%20_1)%20%7C%20x_t%7D%20%5D">
</p>
<p>
This is a so-called value function, which is the total reward at the solution of the problem.
</p>
<p>
The state variable evolves according to a stochastic process given by the following transition probability:
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5B%20p(x_%7Bt+1%7D%20%7C%20x_t,%20i_t,%20_2)%20=%20%7B%0A%5C%5B%5Cbegin%7Barray%7D%7Blllll%7D%0A%5Ctheta_2%20%5Cexp%5C%7B%5Ctheta_2(x_%7Bt+1%7D%20-%20x_t)%5C%7D%20&amp;amp;%20%5Ctext%7Bif%7D%20&amp;amp;%20i_t%20=%200%20&amp;amp;%20%5Ctext%7Band%7D%20&amp;amp;%20x_%7Bt+1%7D%20%5Cgeq%20x_t%20%5C%5C%0A%5Ctheta_2%20%5Cexp%5C%7B%5Ctheta_2(x_%7Bt+1%7D)%5C%7D%20&amp;amp;%20%5Ctext%7Bif%7D%20&amp;amp;%20i_t%20=%200%20&amp;amp;%20%5Ctext%7Band%7D%20&amp;amp;%20x_%7Bt+1%7D%20%5Cgeq%200%20%5C%5C%0A0%20&amp;amp;%20%5Ctext%7Botherwise%7D%5C%5C%0A%5Cend%7Barray%7D%5C%5D%0A.%20%5D">
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?(_2)"> is the parameter of the exponential distribution, another parameter to estimate. I’ll stop with one more equation, the Bellman equation:
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5B%20V_(x_t)%20=%20_%7Bi_t%20C(x_t)%7D%20%5Bu(x_t,%20i_t,%201)%20+%20EV(x_t,%20i_t)%5D%20%5D">
</p>
<p>
where <img src="https://latex.codecogs.com/png.latex?(C(x_t)%20=%20%7B0,%201%7D)"> is the action set. The value function is the unique solution to this Bellman equation.
</p>
<p>
As you can see, this is quite complex (and I have not detailed everything!) but the advantage of models is that one can estimate its structural parameters and put a dollar value on the expected replacement cost, <img src="https://latex.codecogs.com/png.latex?(%20-%20)"> in addition to validating the very first hypothesis of the paper; does Harold Zurcher behave optimally?
</p>
<p>
In what follows, I’ll use the <code>{ReinforcementLearning}</code> package to try to find the optimal policy rule. The optimal policy rule tells us what is the best action at each period. Reinforcement learning is an approach that is widely used in machine learning to solve problems very similar to the one that I described above. However, as we shall see, it will fail here, and there’s a very good reason for that. First, let’s load the data that was prepared last time:
</p>
<pre class="r"><code>all_bus_data &lt;- read_csv("https://raw.githubusercontent.com/b-rodrigues/rust/ee15fb87fc4ba5db28d055c97a898b328725f53c/datasets/processed_data/all_buses.csv")</code></pre>
<pre><code>## Parsed with column specification:
## cols(
##   bus_id = col_double(),
##   date = col_date(format = ""),
##   odometer_reading = col_double(),
##   replacement = col_double(),
##   bus_family = col_character()
## )</code></pre>
<pre class="r"><code>head(all_bus_data)</code></pre>
<pre><code>## # A tibble: 6 x 5
##   bus_id date       odometer_reading replacement bus_family
##    &lt;dbl&gt; &lt;date&gt;                &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;     
## 1   4239 1974-12-01           140953           0 a452372   
## 2   4239 1975-01-01           142960           0 a452372   
## 3   4239 1975-02-01           145380           0 a452372   
## 4   4239 1975-03-01           148140           0 a452372   
## 5   4239 1975-04-01           150921           0 a452372   
## 6   4239 1975-05-01           153839           0 a452372</code></pre>
<p>
In the paper, the author groups the 4 following bus families, so I’ll be doing the same:
</p>
<pre class="r"><code>family_group &lt;- c("g870", "rt50", "t8h203", "a530875")

group1_4 &lt;- all_bus_data %&gt;%
  filter(bus_family %in% family_group)

ggplot(group1_4) + 
  geom_line(aes(y = odometer_reading, x = date, group = bus_id, col = bus_family)) + 
  geom_point(aes(y = ifelse(odometer_reading*replacement == 0, NA, odometer_reading*replacement), 
                 x = date), col = "red") +
  labs(title = paste0("Odometer readings for bus families ", paste0(family_group, collapse = ", ")),
       caption = "The red dots are replacement events.") + 
  theme(plot.caption = element_text(colour = "white")) +
  brotools::theme_blog()</code></pre>
<pre><code>## Warning: Removed 8200 rows containing missing values (geom_point).</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/harold_part2-3-1.png" width="80%" height="auto">
</p>
<p>
There are 104 buses in this subset of data. Let’s discretize the odometer reading using the <code>ntile()</code> function. Discretizing the state variable will make computation faster:
</p>
<pre class="r"><code>group1_4 &lt;- group1_4 %&gt;%  
  mutate(state_at_replacement = ifelse(replacement == 1, odometer_reading, NA)) %&gt;%
  group_by(bus_id) %&gt;%
  fill(state_at_replacement, .direction = "down") %&gt;%
  ungroup() %&gt;%  
  mutate(state_at_replacement = odometer_reading - state_at_replacement) %&gt;%
  mutate(state_at_replacement = ifelse(is.na(state_at_replacement), odometer_reading, state_at_replacement)) %&gt;%  
  mutate(state = ntile(state_at_replacement, 50))</code></pre>
<p>
Let me also save the bus ids in a vector, I’ll need it later:
</p>
<pre class="r"><code>buses &lt;- unique(group1_4$bus_id)</code></pre>
<p>
To use the dataset with the <code>{ReinforcementLearning}</code> package, it must first be prepared:
</p>
<pre class="r"><code>group1_4 &lt;- group1_4 %&gt;%
  group_by(bus_id) %&gt;%  
  mutate(next_state = lead(state, 1)) %&gt;%
  mutate(replacement = lead(replacement, 1)) %&gt;%  
  mutate(action = replacement) %&gt;% 
  select(state, action, reward = replacement, next_state) %&gt;%
  mutate(reward = (-1)*reward) %&gt;%
  mutate(action = ifelse(is.na(action), 0, action),
         reward = ifelse(is.na(reward), 0, reward)) %&gt;%  
  mutate(next_state = ifelse(is.na(next_state), state + 1, next_state)) %&gt;% 
  mutate(state = as.character(state),
         next_state = as.character(next_state),
         action = as.character(action)) </code></pre>
<pre><code>## Adding missing grouping variables: `bus_id`</code></pre>
<p>
Let’s see how the data looks:
</p>
<pre class="r"><code>head(group1_4)</code></pre>
<pre><code>## # A tibble: 6 x 5
## # Groups:   bus_id [1]
##   bus_id state action reward next_state
##    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;     
## 1   5297 2     0           0 3         
## 2   5297 3     0           0 4         
## 3   5297 4     0           0 5         
## 4   5297 5     0           0 6         
## 5   5297 6     0           0 8         
## 6   5297 8     0           0 9</code></pre>
<p>
So when action 0 (do nothing) is chosen, the value of the state is increased by one. If action 1 (replace) is chosen:
</p>
<pre class="r"><code>group1_4 %&gt;%
  filter(action == "1") %&gt;%
  head</code></pre>
<pre><code>## # A tibble: 6 x 5
## # Groups:   bus_id [6]
##   bus_id state action reward next_state
##    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;     
## 1   5297 34    1          -1 1         
## 2   5299 42    1          -1 1         
## 3   5300 43    1          -1 1         
## 4   5301 36    1          -1 1         
## 5   5302 30    1          -1 1         
## 6   5303 49    1          -1 1</code></pre>
<p>
The state goes back to 1, and the reward is -1.
</p>
<p>
Now, let’s split the dataset into two: a training dataset and a testing dataset:
</p>
<pre class="r"><code>set.seed(1234)
train_buses &lt;- sample(buses, size = round(length(buses)*.8))

test_buses &lt;- setdiff(buses, train_buses)</code></pre>
<p>
There will be 83 in the training data and 21 in the testing data:
</p>
<pre class="r"><code>train_data &lt;- group1_4 %&gt;%
  filter(bus_id %in% train_buses)

test_data &lt;- group1_4 %&gt;%
  filter(bus_id %in% test_buses)</code></pre>
<p>
We’re finally ready to use the <code>{ReinforcementLearning}</code> package.
</p>
<pre class="r"><code>library(ReinforcementLearning)
model &lt;- ReinforcementLearning(train_data,
                                         s = "state",
                                         a = "action",
                                         r = "reward",
                                         s_new = "next_state")</code></pre>
<p>
Now what’s the result?
</p>
<pre class="r"><code>model</code></pre>
<pre><code>## State-Action function Q
##     0        1
## X30 0 -0.19000
## X31 0  0.00000
## X1  0  0.00000
## X32 0  0.00000
## X2  0  0.00000
## X33 0 -0.10000
## X3  0  0.00000
## X34 0 -0.19000
## X4  0  0.00000
## X35 0  0.00000
## X5  0  0.00000
## X36 0 -0.19000
## X6  0  0.00000
## X37 0 -0.10000
## X7  0  0.00000
## X38 0  0.00000
## X8  0  0.00000
## X39 0 -0.34390
## X9  0  0.00000
## X10 0  0.00000
## X40 0 -0.10000
## X11 0  0.00000
## X41 0 -0.10000
## X12 0  0.00000
## X42 0 -0.34390
## X13 0  0.00000
## X43 0 -0.40951
## X14 0  0.00000
## X44 0 -0.19000
## X45 0 -0.34390
## X15 0  0.00000
## X46 0 -0.27100
## X16 0  0.00000
## X47 0 -0.19000
## X17 0  0.00000
## X48 0 -0.40951
## X18 0  0.00000
## X49 0 -0.34390
## X19 0  0.00000
## X50 0 -0.34390
## X20 0  0.00000
## X21 0  0.00000
## X22 0  0.00000
## X23 0  0.00000
## X24 0  0.00000
## X25 0  0.00000
## X26 0  0.00000
## X27 0  0.00000
## X28 0  0.00000
## X29 0 -0.10000
## 
## Policy
## X30 X31  X1 X32  X2 X33  X3 X34  X4 X35  X5 X36  X6 X37  X7 X38  X8 X39  X9 X10 
## "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" 
## X40 X11 X41 X12 X42 X13 X43 X14 X44 X45 X15 X46 X16 X47 X17 X48 X18 X49 X19 X50 
## "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" 
## X20 X21 X22 X23 X24 X25 X26 X27 X28 X29 
## "0" "0" "0" "0" "0" "0" "0" "0" "0" "0" 
## 
## Reward (last iteration)
## [1] -48</code></pre>
<p>
We see that the optimal policy is always to do nothing! This is actually “normal” here, as we are using historical data; and in this data, there is no information on the likelihood of severe engine failure if one does not replace it completely at some point! So the agent does not see the point in replacing the engine; it costs money and does not seem to bring in any benefit!
</p>
<p>
Another way of using the <code>{ReinforcementLearning}</code> package is to write a function that simulates the environment. One could write such a function, and add in it a probability of severe failure with a very big cost. This probability would increase as the state (number of miles driven) increases as well. With such a function, there would be simulations where the cost of doing nothing would be very high, and as such, hopefully, the agent would learn that replacing the engine once might be a better course of action than doing nothing.
</p>
<p>
This might be the subject of part 3 of this series!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-02-08-harold_part2.html</guid>
  <pubDate>Fri, 14 Feb 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dynamic discrete choice models, reinforcement learning and Harold, part 1</title>
  <link>https://b-rodrigues.github.io/posts/2020-01-26-harold.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=r30D3SW4OVw"> <img src="https://b-rodrigues.github.io/assets/img/fork.jpg" title="If this blog post had an OST, this would likely be it." width="80%" height="auto"></a>
</p>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">
Introduction
</h2>
<p>
I want to write about an <em>Econometrica</em> paper written in 1987 (<a href="https://www.jstor.org/stable/1911259">jstor link</a>) by John Rust, currently Professor of Economics at Georgetown University, paper which has been on my mind for the past 10 years or so. Why? Because it is a seminal paper in the econometric literature, but it is quite a bizarre one in some aspects. In this paper, John Rust estimates a structural dynamic discrete choice model on real data, and Professor Rust even had to develop his own novel algorithm, which he called NFXP, which stands for <em>Nested Fixed Point</em> algorithm, to estimate the model. Such models hare now part of the toolbox of structural econometricians, because said models are suited to model decision making in a changing environment. How much should you save today for retirement? Should you go to university? If yes, which major should you choose? Should you get a PhD? Should you have kids? How many? With whom? As you see, kind reader, these models are at the center point of what makes life so interesting, and sometimes so scary as well; what will be the impact of our decisions today on future rewards? Some would say that only the Almighty would know, but structural econometricians now know as well, thanks to John Rust.
</p>
<p>
It is thus completely natural that Professor Rust chose a very important topic and gathered some very important data to illustrate the inner workings of such a complicated, and yet fundamentally important model.
</p>
<p>
John Rust chose to tell the story of one named Harold Zurcher, superintendent of the Madison, Wisconsin, Metropolitan Bus Company and his monthly decision making process on whether to replace the engine of the buses of the company’s fleet, or not.
</p>
</section>
<section id="and-thine-ears-shall-hear-a-word-behind-thee-saying-this-is-the-way-walk-ye-in-it-when-ye-turn-to-the-right-hand-and-when-ye-turn-to-the-left.-isaiah-3021" class="level2">
<h2 class="anchored" data-anchor-id="and-thine-ears-shall-hear-a-word-behind-thee-saying-this-is-the-way-walk-ye-in-it-when-ye-turn-to-the-right-hand-and-when-ye-turn-to-the-left.-isaiah-3021">
<em>And thine ears shall hear a word behind thee, saying, This is the way, walk ye in it, when ye turn to the right hand, and when ye turn to the left.</em>, Isaiah 30:21
</h2>
<p>
John Rust’s goal is to write down a model of Harold Zurcher’s behaviour, which he assumes follows an optimal stopping rule: <em>a strategy which specifies whether or not to replace the current bus engine each period as a function of observed and unobserved state variables.</em> But, dear reader, you might wonder, <em>Why model the decisions of Harold Zurcher? Why not any other, more pressing, issue?</em>
</p>
<p>
Quoting the author gives an answer: <em>Admittedly, few people are likely to take particular interest in Harold Zurcher and bus engine replacement, per se. I focus on a particular individual and a specific capital good because it provides a simple, concrete framework to illustrate two ideas: (i) a “bottom-up” approach for modelling replacement investment and (ii) a “nested fixed point” algorithm for estimating dynamic programming models of discrete choice.</em> And this is what made me absolutely love this paper; I am 100% certain that today, anyone, especially when starting an academic career, could not, and would not, write a paper where one would model something so… non-consequential. And yet, John Rust not only wrote such a paper, his paper is seminal in the literature of structural econometrics. For me, this is one of the best papers I ever read. I read this paper around 2010-ish, and have thought about it on and off since then. I now want to explore the data from his paper, and make you discover it as well.
</p>
<p>
In this blog post, I will focus on the data of the paper, which you can download in its raw, original format or tidy format in the github repo I set up <a href="https://github.com/b-rodrigues/rust/tree/master/datasets">here</a>. In the next blog post, I’ll discuss the model in greater detail, with a focus on Harold Zurcher’s decisions. I’ll then discuss the similarities between reinforcement learning (the title of this blog post was not 100% clickbait) and dynamic discrete stochastic models and use the <code>{ReinforcementLearning}</code> package to try to estimate the optimal policy. I haven’t tried the package’s function on this paper’s data yet, so I have no idea if it’s going to work out. We’ll see.
</p>
</section>
<section id="the-papers-data" class="level2">
<h2 class="anchored" data-anchor-id="the-papers-data">
The paper’s data
</h2>
<p>
Harold Zurcher provided monthly data on odometer readings from 162 buses of the Madison Metro fleet to John Rust.
</p>
<p>
(
</p>
<p>
I sometimes wonder how this discussion went.
</p>
<p>
<em>- Hello Mr Zurcher, I’m an economist, my name is John Rust, and I am interested in dynamic discrete choice models and their estimation. I would like to write an empirical paper for a prestigious journal, and would like to know if you would be so kind as to provide me with data for my paper.</em>
</p>
<p>
<em>- You what?</em>
</p>
<p>
)
</p>
<p>
The time period goes from December, 1974 to May, 1985. There are 9 groups of buses, but for a reason that is not explained in the paper only 8 groups of buses are studied. In addition to the monthly odometer readings, there is also the date of a first, or second engine replacement. This is the decision that Harold Zurcher faces each month: should he replace, or not, the engine? This is a simplification from the author; in actuality, Harold Zurcher could also perform a routine maintenance or replace individual components as well. The idea to focus on the third option (complete replacement of the engine) is justified by John Rust as being part of a general “preventive maintenance” strategy. Indeed, if a component of the engine fails at low mileage, it is rather safe to simply replace that component. However, should one component of the engine fail at a much higher mileage, then it is very likely that other components would fail as well in the near future. As such, it is much safer to completely replace the engine, either with a brand new one, or with one freshly rebuilt from the company’s machine shop. John Rust points out that Harold Zurcher assured him that <em>rebuilt engines are every bit as good, if not better, than engines purchased brand new</em>.
</p>
<p>
Now, to the data itself. The data comes in a format unlike anything I had ever seen before. Let’s take a look at the head of one single file, for instance <code>a452372.asc</code> (<code>.asc</code> stands for ascii, as far as I know):
</p>
<pre><code>   4239 
      2 
     72 
      1 
     76 
 166100 
      0 
      0 
      0 
     12 
     74 
 140953 
 142960 
 145380 
 148140 </code></pre>
<p>
Then, on line 138, the data for the second bus of this groups starts:
</p>
<pre><code>   4240 
      2 
     72 
      1 
     75 
 177900 
      0 
      0 
      0 
     12 
     74 
 174402 
 175116 </code></pre>
<p>
and so on for each bus of this group. The other files are structured in the same way.
</p>
<p>
This is quite cryptic, but thankfully, the data is well documented in the manual of the NFXP software that John Rust wrote for this paper (remember the algorithm he wrote to estimate the model? He shared his code with a nice manual, a very good practice that unfortunately is not widespread enough in econometric circles, even to this day). From this manual, we can read that the 11 first lines of the file are some kind of metadata:
</p>
<table class="table">
<thead>
<tr class="header">
<th align="right">
Row &nbsp;
</th>
<th>
Meaning
</th>
<th align="right">
Observation
</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="right">
1 &nbsp;
</td>
<td>
bus number
</td>
<td align="right">
4239
</td>
</tr>
<tr class="even">
<td align="right">
2 &nbsp;
</td>
<td>
month purchased
</td>
<td align="right">
2
</td>
</tr>
<tr class="odd">
<td align="right">
3 &nbsp;
</td>
<td>
year purchased
</td>
<td align="right">
72
</td>
</tr>
<tr class="even">
<td align="right">
4 &nbsp;
</td>
<td>
month of 1st engine replacement
</td>
<td align="right">
1
</td>
</tr>
<tr class="odd">
<td align="right">
5 &nbsp;
</td>
<td>
year of 1st engine replacement
</td>
<td align="right">
76
</td>
</tr>
<tr class="even">
<td align="right">
6 &nbsp;
</td>
<td>
odometer at replacement
</td>
<td align="right">
166100
</td>
</tr>
<tr class="odd">
<td align="right">
7 &nbsp;
</td>
<td>
month of 2nd replacement
</td>
<td align="right">
0
</td>
</tr>
<tr class="even">
<td align="right">
8 &nbsp;
</td>
<td>
year of 2nd replacement
</td>
<td align="right">
0
</td>
</tr>
<tr class="odd">
<td align="right">
9 &nbsp;
</td>
<td>
odometer at replacement
</td>
<td align="right">
0
</td>
</tr>
<tr class="even">
<td align="right">
10 &nbsp;
</td>
<td>
month odometer data begins
</td>
<td align="right">
12
</td>
</tr>
<tr class="odd">
<td align="right">
11 &nbsp;
</td>
<td>
year odometer data begins
</td>
<td align="right">
74
</td>
</tr>
<tr class="even">
<td align="right">
12 &nbsp;
</td>
<td>
odometer reading
</td>
<td align="right">
140953
</td>
</tr>
</tbody>
</table>
<p>
With this knowledge, the first step is thus to build a tidy data frame. To achieve this, I first load the relevant packages, and read in all the data at once:
</p>
<pre class="r"><code>library(tidyverse)
library(lubridate)

data_file_path &lt;- Sys.glob("datasets/*.asc")

data_files &lt;- map(data_file_path, read_lines)</code></pre>
<p>
<code>data_files</code> is a list of 9 elements, where each element is one of the raw data files (<code>a42372.asc</code>, <code>a452374.asc</code>, ….)
</p>
<pre class="r"><code>&gt; str(data_files)</code></pre>
<pre class="r"><code>List of 9
 $ : chr [1:2466] "   4239 " "      2 " "     72 " "      1 " ...
 $ : chr [1:1370] "   4287 " "     10 " "     74 " "     11 " ...
 $ : chr [1:2466] "   5257 " "      5 " "     72 " "      6 " ...
 $ : chr [1:1644] "   5275 " "     10 " "     74 " "      9 " ...
 $ : chr [1:4736] "   5297 " "      8 " "     75 " "      4 " ...
 $ : chr [1:440] "   1334 " "      3 " "     77 " "      0 " ...
 $ : chr [1:540] "   4403 " "      5 " "     83 " "      0 " ...
 $ : chr [1:240] "   2386 " "      5 " "     81 " "      0 " ...
 $ : chr [1:3888] "   4338 " "      3 " "     79 " "      3 " ...</code></pre>
<p>
to process all this data, I wrote this monster function:
</p>
<pre class="r"><code>process_bus_data &lt;- function(data_file){
  data_file &lt;- as.numeric(data_file)
  first_bus &lt;- data_file[1]
  second_bus &lt;- first_bus + 1
  second_bus_index &lt;- which(data_file == second_bus)

  nb_data_points &lt;- second_bus_index - 1

  nb_buses &lt;- length(data_file) / nb_data_points

  indices &lt;- nb_data_points * seq(1, nb_buses)

  indices &lt;- c(0, indices)

  sep_data_sets &lt;- map(indices, ~`[`(data_file, (. + 1):(. + nb_data_points) ))

  headers_list &lt;- map(sep_data_sets, ~`[`(., 1:11))

  header_elements &lt;- c("bus number", "month purchased", "year purchased",
                       "month of 1st engine replacement", "year of 1st engine replacement",
                       "odometer at replacement", "month of 2nd replacement",
                       "year of 2nd replacement", "odometer at replacement",
                       "month odometer data begins", "year odometer data begins")

  create_start_date &lt;- function(one_dataset){
      one_dataset &lt;- pull(one_dataset)
      month &lt;- one_dataset[10]
      year &lt;- paste0("19", one_dataset[11])

      month &lt;- ifelse(nchar(month) == 1, paste0("0", month), month)

      ymd(paste0(year, "-", month, "-01"))
  }

  create_first_replacement &lt;- function(one_dataset){
      one_dataset &lt;- pull(one_dataset, odometer_reading)
      month &lt;- one_dataset[4]
      year &lt;- paste0("19", one_dataset[5])

      month &lt;- ifelse(nchar(month) == 1, paste0("0", month), month)

      ymd(paste0(year, "-", month, "-01"))
  }

  create_second_replacement &lt;- function(one_dataset){
      one_dataset &lt;- pull(one_dataset, odometer_reading)
      month &lt;- one_dataset[7]
      year &lt;- paste0("19", one_dataset[8])

      month &lt;- ifelse(nchar(month) == 1, paste0("0", month), month)

      ymd(paste0(year, "-", month, "-01"))
  }

  get_bus_id &lt;- function(one_dataset){
      one_dataset &lt;- pull(one_dataset, odometer_reading)
      one_dataset[1]
  }

  named_headers &lt;- map(headers_list, ~set_names(., header_elements))


  raw_data &lt;- map(sep_data_sets, ~tibble("odometer_reading" = .))
  raw_data &lt;- map(raw_data, ~mutate(., "date" = create_start_date(.)))
  raw_data &lt;- map(raw_data, ~mutate(., "first_replacement_date" = create_first_replacement(.)))
  raw_data &lt;- map(raw_data, ~mutate(., "second_replacement_date" = create_second_replacement(.)))
  raw_data &lt;- map(raw_data, ~mutate(., "bus_id" = get_bus_id(.)))
  raw_data &lt;- map(raw_data, ~slice(., -c(1:11)))

  fill_dates &lt;- function(vector){
      for(i in 2:length(vector)){
          vector[i] &lt;- add_with_rollback(vector[i-1], months(1))
          # the line below can be uncommented to skip the 2 months of strike in 1980
          #vector[i] &lt;- if_else(vector[i] == ymd("1980-07-01"), add_with_rollback(vector[i], months(2)),
          #                    vector[i])
      }
      vector
  }

  raw_data &lt;- raw_data %&gt;%
      map(~mutate(., date = fill_dates(date)))

  raw_data &lt;- map(raw_data, ~mutate(., "replacement_1" = if_else(date == first_replacement_date, 1, 0, 0)))
  raw_data &lt;- map(raw_data, ~mutate(., "replacement_2" = if_else(date == second_replacement_date, 1, 0, 0)))
  raw_data &lt;- map(raw_data, ~mutate(., replacement = replacement_1 + replacement_2))
  raw_data &lt;- map(raw_data, ~select(., bus_id, date, odometer_reading, replacement,
                                    -replacement_1, -replacement_2, -first_replacement_date, -second_replacement_date))

  return(raw_data)
}</code></pre>
<p>
Now, as usual, I didn’t write this in one go. First, I experimented bits and pieces of code on one single dataset, and then only started putting these pieces together into this big function.
</p>
<p>
I won’t go through this function line by line, because it would take me ages. I think there are two majors things to understand in this function:
</p>
<ul>
<li>
first identify the start of a particular bus’s data;
</li>
<li>
second this function uses some intermediary <code>{purrr}</code> magic.
</li>
</ul>
<p>
So first step, identify the start of the monthly odometer reading for one bus. For the first bus this is quite simple, as it is simply the start of the file. But when does the data for the second bus start? Thankfully, buses’ ids are numbers, and they’re in incrementing order in the data. I use this to get the index of the second bus, and compute the number of rows between the id of the first and second bus, which gives me the number of months of odometer readings for the first bus.
</p>
<pre class="r"><code>  data_file &lt;- as.numeric(data_file)
  first_bus &lt;- data_file[1]
  second_bus &lt;- first_bus + 1
  second_bus_index &lt;- which(data_file == second_bus)

  nb_data_points &lt;- second_bus_index - 1</code></pre>
<p>
Then, I get the number of buses in the data, and create a vector with all the indices of the buses’ ids:
</p>
<pre class="r"><code>  nb_buses &lt;- length(data_file) / nb_data_points

  indices &lt;- nb_data_points * seq(1, nb_buses)

  indices &lt;- c(0, indices)

  sep_data_sets &lt;- map(indices, ~`[`(data_file, (. + 1):(. + nb_data_points) ))</code></pre>
<p>
I end up with a list of lists, <code>sep_data_sets</code>. The first element of my list is now a list, with the data from the <code>a452372.asc</code> file, where each element is the data for a single bus.
</p>
<p>
For instance, here is the first element of <code>sep_data_sets</code>:
</p>
<pre class="r"><code>str(sep_data_sets[[1]])
List of 19
 $ : num [1:137] 4239 2 72 1 76 ...
 $ : num [1:137] 4240 2 72 1 75 ...
 $ : num [1:137] 4241 2 72 5 75 ...
 $ : num [1:137] 4242 2 72 2 76 ...
 $ : num [1:137] 4243 2 72 4 76 ...
 $ : num [1:137] 4244 2 72 3 78 ...
 $ : num [1:137] 4245 2 72 1 75 ...
 $ : num [1:137] 4246 2 72 3 75 ...
 $ : num [1:137] 4247 2 72 9 80 ...
 $ : num [1:137] 4248 2 72 2 75 ...
 $ : num [1:137] 4249 2 72 7 75 ...
 $ : num [1:137] 4250 2 72 4 80 ...
 $ : num [1:137] 4251 2 72 1 79 ...
 $ : num [1:137] 4252 2 72 5 76 ...
 $ : num [1:137] 4253 2 72 1 77 ...
 $ : num [1:137] 4254 2 72 3 76 ...
 $ : num [1:137] 4255 2 72 1 76 ...
 $ : num [1:137] 4256 2 72 9 77 ...
 $ : num [1:137] NA NA NA NA NA NA NA NA NA NA ...</code></pre>
<p>
So there are 18 buses in the first group of data (the last line full of NA’s is due to the fact that I messed up my indices vector, I’ll simply remove these at the end).
</p>
<p>
That’s the first step. The second step, is to make use of this list structure to apply some cleaning functions to each dataset using <code>{purrr}</code>. I explain the approach in my ebook, which you can read for free <a href="https://b-rodrigues.github.io/modern_R/functional-programming.html#list-based-workflows-for-efficiency">here</a>. The idea is to use a function that would work on a single element of your list, and then mapping this over all the elements of the list. For instance, remember that the 11 first elements of the data are some kind of header? To extract those for one single vector of observations, one would use:
</p>
<pre class="r"><code>my_vector[1:11]</code></pre>
<p>
or, equivalently:
</p>
<pre class="r"><code>`[`(my_vector, 1:11)</code></pre>
<p>
Well, when faced with a list of vectors, one maps this function over the whole list using <code>map()</code>:
</p>
<pre class="r"><code>map(my_list_of_vectors, `[`(1:11))</code></pre>
<p>
This is the logic of this big <code>process_bus_data()</code> function. If something’s not clear after you study it, drop me an email or tweet.
</p>
<p>
Anyways, now that I cleaned the data, here’s how it looks:
</p>
<pre class="r"><code>all_buses &lt;- read_csv("https://raw.githubusercontent.com/b-rodrigues/rust/ee15fb87fc4ba5db28d055c97a898b328725f53c/datasets/processed_data/all_buses.csv")</code></pre>
<pre><code>## Parsed with column specification:
## cols(
##   bus_id = col_double(),
##   date = col_date(format = ""),
##   odometer_reading = col_double(),
##   replacement = col_double(),
##   bus_family = col_character()
## )</code></pre>
<pre class="r"><code>head(all_buses)</code></pre>
<pre><code>## # A tibble: 6 x 5
##   bus_id date       odometer_reading replacement bus_family
##    &lt;dbl&gt; &lt;date&gt;                &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;     
## 1   4239 1974-12-01           140953           0 a452372   
## 2   4239 1975-01-01           142960           0 a452372   
## 3   4239 1975-02-01           145380           0 a452372   
## 4   4239 1975-03-01           148140           0 a452372   
## 5   4239 1975-04-01           150921           0 a452372   
## 6   4239 1975-05-01           153839           0 a452372</code></pre>
<p>
This tidy data frame now has the bus id, the odometer readings with the right date, and whether a replacement occurred at that date. I said the right date, but in the original documentation of the data, John Rust mentions a two month strike in July and August 1980, and he removed these points from the data since the odometer readings where the same. I did not skip July and August when I created the dates, even though I have added the code to do it in the function above, because it does not matter.
</p>
<p>
I have 166 in my sample, while John Rust writes in the paper that his sample contains 162. I do not know why I have 4 more buses.
</p>
<p>
Let’s try to reproduce Table 2a of the paper (mileage at replacement):
</p>
<pre class="r"><code>all_buses %&gt;% 
    group_by(bus_id) %&gt;% 
    filter(replacement == 1) %&gt;% 
    group_by(bus_family) %&gt;% 
    summarise_at(.vars = vars(odometer_reading), 
                 .funs = list(~max(.), ~min(.), ~mean(.), ~sd(.)))</code></pre>
<pre><code>## # A tibble: 6 x 5
##   bus_family    max    min    mean     sd
##   &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;
## 1 a452372    334393 130810 193175. 53533.
## 2 a452374    237287  82370 151495  61246.
## 3 a530872    413132 170508 278292. 78529.
## 4 a530874    325336 117986 247119  60818.
## 5 a530875    388254 120709 263405. 64556.
## 6 t8h203     273369 125643 200685. 37120.</code></pre>
<p>
I find different slightly results, for instance, for bus family <code>t8h203</code> I find an average of 200’685 miles, while the original author found 199’733. This difference comes very likely from the fact that the author probably uses the value from the header, “odometer at replacement”, at position 6, while I use the value of the odometer at that month, which is always slightly different.
</p>
<p>
Let’s try to reproduce Table 2b, as well, mileage for buses who did not have a replacement:
</p>
<pre class="r"><code>all_buses %&gt;% 
    group_by(bus_id) %&gt;% 
    filter(all(replacement == 0)) %&gt;% 
    group_by(bus_family) %&gt;% 
    summarise_at(.vars = vars(odometer_reading), 
                 .funs = list(~max(.), ~min(.), ~mean(.), ~sd(.)))</code></pre>
<pre><code>## # A tibble: 7 x 5
##   bus_family    max   min    mean      sd
##   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
## 1 a452374    299040  4249 156135.  81992.
## 2 a530874    326843 13065 197547.  86692.
## 3 a530875    352450   129 188193. 104453.
## 4 d309        65045   294  30643.  17063.
## 5 g870       120151   483  49582.  32353.
## 6 rt50       161748  1743  77506.  44674.
## 7 t8h203     280802  2950 127964.  72300.</code></pre>
<p>
Here I find exactly the same values as the author. To finish this quite long blog post, let’s now plot the data:
</p>
<pre class="r"><code>ggplot(all_buses) + 
    geom_line(aes(y = odometer_reading, x = date, group = bus_id, col = bus_family)) + 
    labs(title = "Odometer readings") +
    brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/harold-15-1.png" width="80%" height="auto">
</p>
<p>
Let’s add some dots to mark the points in time where replacements happened:
</p>
<pre class="r"><code>ggplot(all_buses) + 
    geom_line(aes(y = odometer_reading, x = date, group = bus_id, col = bus_family)) + 
    geom_point(aes(y = ifelse(odometer_reading*replacement == 0, NA, odometer_reading*replacement), 
                              x = date), col = "red") +
    labs(title = "Odometer readings and points in time where engine replacement occurred") +
    brotools::theme_blog()</code></pre>
<pre><code>## Warning: Removed 15840 rows containing missing values (geom_point).</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/harold-16-1.png" width="80%" height="auto">
</p>
<p>
Let’s create a graph for each bus family:
</p>
<pre class="r"><code>ggplot(all_buses) + 
    geom_line(aes(y = odometer_reading, x = date, group = bus_id), col = "#82518c") +
    geom_point(aes(y = ifelse(odometer_reading*replacement == 0, NA, odometer_reading*replacement), 
                              x = date), col = "red") +
    facet_wrap(~bus_family) + 
    labs(title = "Odometer readings and points in time where engine replacement occurred") +
    brotools::theme_blog()</code></pre>
<pre><code>## Warning: Removed 15840 rows containing missing values (geom_point).</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/harold-17-1.png" width="80%" height="auto">
</p>
<p>
In the next blog post, I’ll explore how recent reinforcement learning methods might help us get the optimal policy from the data!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-01-26-harold.html</guid>
  <pubDate>Sun, 26 Jan 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Intrumental variable regression and machine learning</title>
  <link>https://b-rodrigues.github.io/posts/2019-11-06-explainability_econometrics.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=-Bu654lDuBk"> <img src="https://b-rodrigues.github.io/assets/img/maybe.jpg" title="Every time I look at observational data and wonder if 
  this correlation could imply causation, at least this one time." width="80%" height="auto"> </a>
</p>
</div>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">
Intro
</h2>
<p>
Just like the question “what’s the difference between machine learning and statistics” has shed a lot of ink (since at least <a href="https://projecteuclid.org/euclid.ss/1009213726">Breiman (2001)</a>), the same question but where statistics is replaced by econometrics has led to a lot of discussion, as well. I like this presentation by <a href="https://web.stanford.edu/class/ee380/Abstracts/140129-slides-Machine-Learning-and-Econometrics.pdf">Hal Varian</a> from almost 6 years ago. There’s a slide called “What econometrics can learn from machine learning”, which summarises in a few bullet points <a href="https://www.aeaweb.org/articles?id=10.1257/jep.28.2.3">Varian (2014)</a> and the rest of the presentation discusses what machine learning can learn from econometrics. Varian argues that the difference between machine learning and econometrics is that machine learning focuses on prediction, while econometrics on inference and causality (and to a lesser extent prediction as well). Varian cites some methods that have been in the econometricians’ toolbox for decades (at least for some of them), such as regression discontinuity, difference in differences and instrumental variables regression. Another interesting paper is <a href="https://www.aeaweb.org/articles?id=10.1257/jep.31.2.87">Mullainathan and Spiess</a>, especially the section called <em>What Do We (Not) Learn from Machine Learning Output?</em>. The authors discuss the tempting idea of using LASSO to perform variable (feature) selection. Econometricians might be tempted to use LASSO to perform variable selection, and draw conclusions such as <em>The variable (feature) “Number of rooms” has not been selected by LASSO, thus it plays no role in the prediction of house prices</em>. However, when variables (features) are highly correlated, LASSO selects variables essentially randomly, without any meaningful impact on model performance (for prediction). I found this paragraph quite interesting (emphasis mine):
</p>
<p>
<em>This problem is ubiquitous in machine learning. The very appeal of these algorithms is that they can fit many different functions. But this creates an Achilles’ heel: more functions mean a greater chance that two functions with very different coefficients can produce similar prediction quality. As a result, how an algorithm chooses between two very different functions can effectively come down to the flip of a coin. In econometric terms, while the lack of <strong>standard errors</strong> illustrates the limitations to making inference after model selection, the challenge here is (uniform) model selection consistency itself.</em>
</p>
<p>
Assuming that we successfully dealt with model selection, we still have to content with significance of coefficients. There is recent research into this topic, such as <a href="https://arxiv.org/abs/1902.06021v1">Horel and Giesecke</a>, but I wonder to what extent explainability could help with this. I have been looking around for papers that discuss explainability in the context of the social sciences but have not found any. If any of the readers of this blog are aware of such papers, please let me know.
</p>
<p>
Just to wrap up Mullainathan and Spiess; the authors then suggest to use machine learning mainly for prediction tasks, such as using images taken using satellites to predict future harvest size (the authors cite <a href="https://www.sciencedirect.com/science/article/pii/S0378429012002754">Lobell (2013)</a>), or for tasks that have an <em>implicit</em> prediction component. For instance in the case of instrumental variables regression, two stages least squares is often used, and the first stage is a prediction task. Propensity score matching is another prediction task, where machine learning could be used. Other examples are presented as well. In this blog post, I’ll explore two stages least squares and see what happens when a random forest is used for the first step.
</p>
</section>
<section id="instrumental-variables-regression-using-two-stage-least-squares" class="level2">
<h2 class="anchored" data-anchor-id="instrumental-variables-regression-using-two-stage-least-squares">
Instrumental variables regression using two-stage least squares
</h2>
<p>
Let’s work out a textbook (literally) example of instrumental variable regression. The below example is taken from Wooldrige’s <em>Econometric analysis of cross section and panel data</em>, and is an exercise made using data from Mroz (1987) <em>The sensitivity of an empirical model of married women’s hours of work to economic and statistical assumptions</em>.
</p>
<p>
Let’s first load the needed packages and the data <code>"mroz"</code> included in the <code>{wooldridge}</code> package:
</p>
<pre class="r"><code>library(tidyverse)
library(randomForest)
library(wooldridge)
library(AER)
library(Metrics)

data("mroz")</code></pre>
<p>
Let’s only select the women that are in the labour force (<code>inlf == 1</code>), and let’s run a simple linear regression. The dependent variable, or target, is <code>lwage</code>, the logarithm of the wage, and the explanatory variables, or features are <code>exper</code>, <code>expersq</code> and <code>educ</code>. For a full description of the data, click below:
</p>
<p>
</p><details>
<summary>
Description of data
</summary>
<p></p>
<pre><code>
mroz {wooldridge}   R Documentation
mroz

Description

Wooldridge Source: T.A. Mroz (1987), “The Sensitivity of an Empirical Model of Married Women’s Hours of Work to Economic and Statistical Assumptions,” Econometrica 55, 765-799. Professor Ernst R. Berndt, of MIT, kindly provided the data, which he obtained from Professor Mroz. Data loads lazily.

Usage

data('mroz')
Format

A data.frame with 753 observations on 22 variables:

inlf: =1 if in lab frce, 1975

hours: hours worked, 1975

kidslt6: # kids &lt; 6 years

kidsge6: # kids 6-18

age: woman's age in yrs

educ: years of schooling

wage: est. wage from earn, hrs

repwage: rep. wage at interview in 1976

hushrs: hours worked by husband, 1975

husage: husband's age

huseduc: husband's years of schooling

huswage: husband's hourly wage, 1975

faminc: family income, 1975

mtr: fed. marg. tax rte facing woman

motheduc: mother's years of schooling

fatheduc: father's years of schooling

unem: unem. rate in county of resid.

city: =1 if live in SMSA

exper: actual labor mkt exper

nwifeinc: (faminc - wage*hours)/1000

lwage: log(wage)

expersq: exper^2

Used in Text

pages 249-251, 260, 294, 519-520, 530, 535, 535-536, 565-566, 578-579, 593- 595, 601-603, 619-620, 625

Source

https://www.cengage.com/cgi-wadsworth/course_products_wp.pl?fid=M20b&amp;product_isbn_issn=9781111531041
</code></pre>
<p>
</p></details>
<p></p>
<pre class="r"><code>working_w &lt;- mroz %&gt;% 
    filter(inlf == 1)

wage_lm &lt;- lm(lwage ~ exper + expersq + educ, 
              data = working_w)

summary(wage_lm)</code></pre>
<pre><code>## 
## Call:
## lm(formula = lwage ~ exper + expersq + educ, data = working_w)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -3.08404 -0.30627  0.04952  0.37498  2.37115 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&gt;|t|)    
## (Intercept) -0.5220406  0.1986321  -2.628  0.00890 ** 
## exper        0.0415665  0.0131752   3.155  0.00172 ** 
## expersq     -0.0008112  0.0003932  -2.063  0.03974 *  
## educ         0.1074896  0.0141465   7.598 1.94e-13 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 0.6664 on 424 degrees of freedom
## Multiple R-squared:  0.1568, Adjusted R-squared:  0.1509 
## F-statistic: 26.29 on 3 and 424 DF,  p-value: 1.302e-15</code></pre>
<p>
Now, we see that education is statistically significant and the effect is quite high. The return to education is about 11%. Now, let’s add some more explanatory variables:
</p>
<pre class="r"><code>wage_lm2 &lt;- lm(lwage ~ exper + expersq + kidslt6 + kidsge6 + husage + huswage + city + educ, 
              data = working_w)

summary(wage_lm2)</code></pre>
<pre><code>## 
## Call:
## lm(formula = lwage ~ exper + expersq + kidslt6 + kidsge6 + husage + 
##     huswage + city + educ, data = working_w)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -3.07431 -0.30500  0.05477  0.37871  2.31157 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&gt;|t|)    
## (Intercept) -0.3853695  0.3163043  -1.218  0.22378    
## exper        0.0398817  0.0133651   2.984  0.00301 ** 
## expersq     -0.0007400  0.0003985  -1.857  0.06402 .  
## kidslt6     -0.0564071  0.0890759  -0.633  0.52692    
## kidsge6     -0.0143165  0.0276579  -0.518  0.60499    
## husage      -0.0028828  0.0049338  -0.584  0.55934    
## huswage      0.0177470  0.0102733   1.727  0.08482 .  
## city         0.0119960  0.0725595   0.165  0.86877    
## educ         0.0986810  0.0151589   6.510 2.16e-10 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 0.6669 on 419 degrees of freedom
## Multiple R-squared:  0.1654, Adjusted R-squared:  0.1495 
## F-statistic: 10.38 on 8 and 419 DF,  p-value: 2.691e-13</code></pre>
<p>
The return to education lowers a bit, but is still significant. Now, the issue is that education is not exogenous (randomly assigned), and is thus correlated with the error term of the regression, due to an omitted variable for instance contained in the error term, that is correlated with education (for example work ethic).
</p>
<p>
To deal with this, econometricians use instrumental variables (IV) regression. I won’t go into detail here; just know that this method can deal with these types of issues. The <a href="https://en.wikipedia.org/wiki/Instrumental_variables_estimation">Wikipedia</a> page gives a good intro on what this is all about. This short <a href="https://wol.iza.org/uploads/articles/250/pdfs/using-instrumental-variables-to-establish-causality.pdf">paper</a> is also quite interesting in introducing instrumental variables.
</p>
<p>
In practice, IV is done in two steps. First, regress the endogenous variable, in our case education, on all the explanatory variables from before, plus so called instruments. Instruments are variables that are correlated with the endogenous variable, here education, but uncorrelated to the error term. They only affect the target variable through their correlation with the endogenous variable. We will be using the education level of the parents of the women, as well as the education levels of their husbands as intruments. The assumption is that the parents’, as well as the husband’s education are exogenous in the log wage of the woman. This assumption can of course be challenged, but let’s say that it holds.
</p>
<p>
To conclude stage 1, we obtain the predictions of education:
</p>
<pre class="r"><code>first_stage &lt;- lm(educ ~ exper + expersq + kidslt6 + kidsge6 + husage + huswage 
                  + city + motheduc +  fatheduc + huseduc, data = working_w)

working_w$predictions_first_stage &lt;- predict(first_stage)</code></pre>
<p>
We are now ready for the second stage. In the regression from before:
</p>
<pre><code>wage_lm2 &lt;- lm(lwage ~ exper + expersq + kidslt6 + kidsge6 + husage + huswage + city + educ, 
              data = working_w)</code></pre>
<p>
we now replace <code>educ</code> with the predictions of stage 1:
</p>
<pre class="r"><code>second_stage &lt;- lm(lwage ~ exper + expersq + kidslt6 + kidsge6 + husage + huswage 
                   + city + predictions_first_stage,
                  data = working_w)

summary(second_stage)</code></pre>
<pre><code>## 
## Call:
## lm(formula = lwage ~ exper + expersq + kidslt6 + kidsge6 + husage + 
##     huswage + city + predictions_first_stage, data = working_w)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -3.13493 -0.30004  0.03046  0.37142  2.27199 
## 
## Coefficients:
##                           Estimate Std. Error t value Pr(&gt;|t|)   
## (Intercept)              0.1763588  0.4206911   0.419   0.6753   
## exper                    0.0419047  0.0139885   2.996   0.0029 **
## expersq                 -0.0007881  0.0004167  -1.891   0.0593 . 
## kidslt6                 -0.0255934  0.0941128  -0.272   0.7858   
## kidsge6                 -0.0234422  0.0291914  -0.803   0.4224   
## husage                  -0.0042628  0.0051919  -0.821   0.4121   
## huswage                  0.0263802  0.0114511   2.304   0.0217 * 
## city                     0.0215685  0.0759034   0.284   0.7764   
## predictions_first_stage  0.0531993  0.0263735   2.017   0.0443 * 
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 0.6965 on 419 degrees of freedom
## Multiple R-squared:  0.08988,    Adjusted R-squared:  0.0725 
## F-statistic: 5.172 on 8 and 419 DF,  p-value: 3.581e-06</code></pre>
<p>
We see that education, now instrumented by the parents’ and the husband’s education is still significant, but the effect is much lower. The return to education is now about 5%. However, should our assumption hold, this effect is now <em>causal</em>. However there are some caveats. The IV estimate is a local average treatment effect, meaning that we only get the effect on those individuals that were affected by the treatment. In this case, it would mean that the effect we recovered is only for women who were not planning on, say, studying, but only did so under the influence of their parents (or vice-versa).
</p>
<p>
IV regression can also be achieved using the <code>ivreg()</code> function from the <code>{AER}</code> package:
</p>
<pre class="r"><code>inst_reg &lt;- ivreg(lwage ~ exper + expersq + kidslt6 + kidsge6 + husage + huswage + city + educ 
                  | .-educ + motheduc + fatheduc + huseduc,
                  data = working_w)

summary(inst_reg)</code></pre>
<pre><code>## 
## Call:
## ivreg(formula = lwage ~ exper + expersq + kidslt6 + kidsge6 + 
##     husage + huswage + city + educ | . - educ + motheduc + fatheduc + 
##     huseduc, data = working_w)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -3.10175 -0.30407  0.03379  0.35255  2.25107 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&gt;|t|)   
## (Intercept)  0.1763588  0.4071522   0.433   0.6651   
## exper        0.0419047  0.0135384   3.095   0.0021 **
## expersq     -0.0007881  0.0004033  -1.954   0.0514 . 
## kidslt6     -0.0255934  0.0910840  -0.281   0.7789   
## kidsge6     -0.0234422  0.0282519  -0.830   0.4071   
## husage      -0.0042628  0.0050249  -0.848   0.3967   
## huswage      0.0263802  0.0110826   2.380   0.0177 * 
## city         0.0215685  0.0734606   0.294   0.7692   
## educ         0.0531993  0.0255247   2.084   0.0377 * 
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 0.6741 on 419 degrees of freedom
## Multiple R-Squared: 0.1475,  Adjusted R-squared: 0.1312 
## Wald test: 5.522 on 8 and 419 DF,  p-value: 1.191e-06</code></pre>
<p>
Ok, great, now let’s see how a machine learning practitioner who took an econometrics MOOC might tackle the issue. The first step will be to split the data into training and testing sets:
</p>
<pre class="r"><code>set.seed(42)
sample &lt;- sample.int(n = nrow(working_w), size = floor(.90*nrow(working_w)), replace = F)
train &lt;- working_w[sample, ]
test  &lt;- working_w[-sample, ]</code></pre>
<p>
Let’s now run the same analysis as above, but let’s compute the RMSE of the first stage regression on the testing data as well:
</p>
<pre class="r"><code>first_stage &lt;- lm(educ ~ exper + expersq + kidslt6 + kidsge6 + husage + huswage 
                  + city + motheduc +  fatheduc + huseduc, data = train)

test$predictions_first_stage &lt;- predict(first_stage, newdata = test)

lm_rmse &lt;- rmse(predicted = test$predictions_first_stage, actual = test$educ)

train$predictions_first_stage &lt;- predict(first_stage)</code></pre>
<p>
The first stage is done, let’s go with the second stage:
</p>
<pre class="r"><code>second_stage &lt;- lm(lwage ~ exper + expersq + kidslt6 + kidsge6 + 
                       husage + huswage + city + predictions_first_stage,
                  data = train)

summary(second_stage)</code></pre>
<pre><code>## 
## Call:
## lm(formula = lwage ~ exper + expersq + kidslt6 + kidsge6 + husage + 
##     huswage + city + predictions_first_stage, data = train)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -3.09828 -0.28606  0.05248  0.37258  2.29947 
## 
## Coefficients:
##                           Estimate Std. Error t value Pr(&gt;|t|)   
## (Intercept)             -0.0037711  0.4489252  -0.008  0.99330   
## exper                    0.0449370  0.0145632   3.086  0.00218 **
## expersq                 -0.0008394  0.0004344  -1.933  0.05404 . 
## kidslt6                 -0.0630522  0.0963953  -0.654  0.51345   
## kidsge6                 -0.0197164  0.0306834  -0.643  0.52089   
## husage                  -0.0034744  0.0054358  -0.639  0.52310   
## huswage                  0.0219622  0.0118602   1.852  0.06484 . 
## city                     0.0679668  0.0804317   0.845  0.39863   
## predictions_first_stage  0.0618777  0.0283253   2.185  0.02954 * 
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 0.6952 on 376 degrees of freedom
## Multiple R-squared:  0.1035, Adjusted R-squared:  0.08438 
## F-statistic: 5.424 on 8 and 376 DF,  p-value: 1.764e-06</code></pre>
<p>
The coefficients here are a bit different due to the splitting, but that’s not an issue. Ok, great, but our machine learning engineer is in love with random forests, so he wants to use a random forest for the prediction task of the first stage:
</p>
<pre class="r"><code>library(randomForest)

first_stage_rf &lt;- randomForest(educ ~ exper + expersq + kidslt6 + kidsge6 + husage + huswage 
                  + city + motheduc +  fatheduc + huseduc, 
                               data = train)

test$predictions_first_stage_rf &lt;- predict(first_stage_rf, newdata = test)

rf_rmse &lt;- rmse(predicted = test$predictions_first_stage_rf, actual = test$educ)

train$predictions_first_stage_rf &lt;- predict(first_stage_rf)</code></pre>
<p>
Let’s compare the RMSE’s of the two first stages. The RMSE of the first stage using linear regression was 2.0558723 and for the random forest 2.0000417. Our machine learning engineer is happy, because the random forest has better performance. Let’s now use the predictions for the second stage:
</p>
<pre class="r"><code>second_stage_rf_lm &lt;- lm(lwage ~ exper + expersq + kidslt6 + kidsge6 + 
                             husage + huswage + city + predictions_first_stage_rf,
                  data = train)

summary(second_stage_rf_lm)</code></pre>
<pre><code>## 
## Call:
## lm(formula = lwage ~ exper + expersq + kidslt6 + kidsge6 + husage + 
##     huswage + city + predictions_first_stage_rf, data = train)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.0655 -0.3198  0.0376  0.3710  2.3277 
## 
## Coefficients:
##                              Estimate Std. Error t value Pr(&gt;|t|)   
## (Intercept)                -0.0416945  0.4824998  -0.086  0.93118   
## exper                       0.0460311  0.0145543   3.163  0.00169 **
## expersq                    -0.0008594  0.0004344  -1.978  0.04863 * 
## kidslt6                    -0.0420827  0.0952030  -0.442  0.65872   
## kidsge6                    -0.0211208  0.0306490  -0.689  0.49117   
## husage                     -0.0033102  0.0054660  -0.606  0.54514   
## huswage                     0.0229111  0.0118142   1.939  0.05322 . 
## city                        0.0688384  0.0805209   0.855  0.39314   
## predictions_first_stage_rf  0.0629275  0.0306877   2.051  0.04100 * 
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 0.6957 on 376 degrees of freedom
## Multiple R-squared:  0.1021, Adjusted R-squared:  0.08302 
## F-statistic: 5.346 on 8 and 376 DF,  p-value: 2.251e-06</code></pre>
<p>
The results are pretty similar. Now, why not go a bit further and use a random forest for the second stage as well?
</p>
</section> ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2019-11-06-explainability_econometrics.html</guid>
  <pubDate>Sat, 09 Nov 2019 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Multiple data imputation and explainability</title>
  <link>https://b-rodrigues.github.io/posts/2019-11-02-mice_exp.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://xkcd.com/303/"> <img src="https://b-rodrigues.github.io/assets/img/kermit.png" title="It is always so tempting"></a>
</p>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">
Introduction
</h2>
<p>
Imputing missing values is quite an important task, but in my experience, very often, it is performed using very simplistic approaches. The basic approach is to impute missing values for numerical features using the average of each feature, or using the mode for categorical features. There are better ways of imputing missing values, for instance by predicting the values using a regression model, or KNN. However, imputing only once is not enough, because each imputed value carries with it a certain level of uncertainty. To account for this, it is better to perform multiple imputation. This means that if you impute your dataset 10 times, you’ll end up with 10 different datasets. Then, you should perform your analysis 10 times, for instance, if training a machine learning model, you should train it on the 10 datasets (and do a train/test split for each, even potentially tune a model for each). Finally, you should pool the results of these 10 analyses.
</p>
<p>
I have met this approach in the social sciences and statistical literature in general, but very rarely in machine learning. Usually, in the social sciences, explainability is the goal of fitting statistical models to data, and the approach I described above is very well suited for this. Fit 10 (linear) regressions to each imputed dataset, and then pool the estimated coefficients/weights together. Rubin’s rule is used to pool these estimates. You can read more about this rule <a href="https://bookdown.org/mwheymans/bookmi/rubins-rules.html">here</a>. In machine learning, the task is very often prediction; in this case, you should pool the predictions. Computing the average and other statistics of the predictions seem to work just fine in practice.
</p>
<p>
However, if you are mainly interested in explainability, how should you proceed? I’ve thought a bit about it, and the answer, is “exactly the same way”… I think. What I’m sure about, is you should impute m times, run the analysis m times (which in this case will include getting explanations) and then pool. So the idea is to be able to pool explanations.
</p>
</section>
<section id="explainability-in-the-standard-case-no-missing-values" class="level2">
<h2 class="anchored" data-anchor-id="explainability-in-the-standard-case-no-missing-values">
Explainability in the “standard” case (no missing values)
</h2>
<p>
To illustrate this idea, I’ll be using the <code>{mice}</code> package for multiple imputation, <code>{h2o}</code> for the machine learning bit and<code>{iml}</code> for explainability. Note that I could have used any other machine learning package instead of <code>{h2o}</code> as <code>{iml}</code> is totally <em>package-agnostic</em>. However, I have been experimenting with <code>{h2o}</code>’s automl implementation lately, so I happened to have code on hand. Let’s start with the “standard” case where the data does not have any missing values.
</p>
<p>
First let’s load the needed packages and initialize <code>h2o</code> functions with <code>h2o.init()</code>:
</p>
<pre class="r"><code>library(tidyverse)
library(Ecdat)
library(mice)
library(h2o)
library(iml)
h2o.init()</code></pre>
<p>
I’ll be using the <code>DoctorContacts</code> data. Here’s a description:
</p>
<details>
<p>
</p><summary>
Click to view the description of the data
</summary>
<p></p>
<pre><code>DoctorContacts              package:Ecdat              R Documentation

Contacts With Medical Doctor

Description:

     a cross-section from 1977-1978

     _number of observations_ : 20186

Usage:

     data(DoctorContacts)
     
Format:

     A time serie containing :

     mdu number of outpatient visits to a medical doctor

     lc log(coinsrate+1) where coinsurance rate is 0 to 100

     idp individual deductible plan ?

     lpi log(annual participation incentive payment) or 0 if no payment

     fmde log(max(medical deductible expenditure)) if IDP=1 and MDE&gt;1
          or 0 otherw

     physlim physical limitation ?

     ndisease number of chronic diseases

     health self-rate health (excellent,good,fair,poor)

     linc log of annual family income (in \$)

     lfam log of family size

     educdec years of schooling of household head

     age exact age

     sex sex (male,female)

     child age less than 18 ?

     black is household head black ?

Source:

     Deb, P.  and P.K.  Trivedi (2002) “The Structure of Demand for
     Medical Care: Latent Class versus Two-Part Models”, _Journal of
     Health Economics_, *21*, 601-625.

References:

     Cameron, A.C.  and P.K.  Trivedi (2005) _Microeconometrics :
     methods and applications_, Cambridge, pp. 553-556 and 565.</code></pre>
</details>
<p>
The task is to predict <code>"mdu"</code>, the number of outpatient visits to an MD. Let’s prepare the data and split it into 3; a training, validation and holdout set.
</p>
<pre class="r"><code>data("DoctorContacts")

contacts &lt;- as.h2o(DoctorContacts)</code></pre>
<pre class="r"><code>splits &lt;- h2o.splitFrame(data=contacts, ratios = c(0.7, 0.2))

original_train &lt;- splits[[1]]

validation &lt;- splits[[2]]

holdout &lt;- splits[[3]]

features_names &lt;- setdiff(colnames(original_train), "mdu")</code></pre>
<p>
As you see, the ratios argument <code>c(0.7, 0.2)</code> does not add up to 1. This means that the first of the splits will have 70% of the data, the second split 20% and the final 10% will be the holdout set.
</p>
<p>
Let’s first go with a poisson regression. To obtain the same results as with R’s built-in <code>glm()</code> function, I use the options below, as per H2o’s glm <a href="http://docs.h2o.ai/h2o/latest-stable/h2o-docs/data-science/glm.html#faq">faq</a>.
</p>
<p>
If you read Cameron and Trivedi’s <em>Microeconometrics</em>, where this data is presented in the context of count models, you’ll see that they also fit a negative binomial model 2 to this data, as it allows for overdispersion. Here, I’ll stick to a simple poisson regression, simply because the goal of this blog post is not to get the best model; as explained in the beginning, this is an attempt at pooling explanations when doing multiple imputation (and it’s also because GBMs, which I use below, do not handle the negative binomial model).
</p>
<pre class="r"><code>glm_model &lt;- h2o.glm(y = "mdu", x = features_names,
                     training_frame = original_train,
                     validation_frame = validation,
                     compute_p_values = TRUE,
                     solver = "IRLSM",
                     lambda = 0,
                     remove_collinear_columns = TRUE,
                     score_each_iteration = TRUE,
                     family = "poisson", 
                     link = "log")</code></pre>
<p>
Now that I have this simple model, which returns the (almost) same results as R’s <code>glm()</code> function, I can take a look at coefficients and see which are important, because GLMs are easily interpretable:
</p>
<details>
<p>
</p><summary>
Click to view <code>h2o.glm()</code>’s output
</summary>
<p></p>
<pre class="r"><code>summary(glm_model)</code></pre>
<pre><code>## Model Details:
## ==============
## 
## H2ORegressionModel: glm
## Model Key:  GLM_model_R_1572735931328_5 
## GLM Model: summary
##    family link regularization number_of_predictors_total
## 1 poisson  log           None                         16
##   number_of_active_predictors number_of_iterations  training_frame
## 1                          16                    5 RTMP_sid_8588_3
## 
## H2ORegressionMetrics: glm
## ** Reported on training data. **
## 
## MSE:  17.6446
## RMSE:  4.200547
## MAE:  2.504063
## RMSLE:  0.8359751
## Mean Residual Deviance :  3.88367
## R^2 :  0.1006768
## Null Deviance :64161.44
## Null D.o.F. :14131
## Residual Deviance :54884.02
## Residual D.o.F. :14115
## AIC :83474.52
## 
## 
## H2ORegressionMetrics: glm
## ** Reported on validation data. **
## 
## MSE:  20.85941
## RMSE:  4.56721
## MAE:  2.574582
## RMSLE:  0.8403465
## Mean Residual Deviance :  4.153042
## R^2 :  0.09933874
## Null Deviance :19667.55
## Null D.o.F. :4078
## Residual Deviance :16940.26
## Residual D.o.F. :4062
## AIC :25273.25
## 
## 
## 
## 
## Scoring History: 
##             timestamp   duration iterations negative_log_likelihood
## 1 2019-11-03 00:33:46  0.000 sec          0             64161.43611
## 2 2019-11-03 00:33:46  0.004 sec          1             56464.99004
## 3 2019-11-03 00:33:46  0.020 sec          2             54935.05581
## 4 2019-11-03 00:33:47  0.032 sec          3             54884.19756
## 5 2019-11-03 00:33:47  0.047 sec          4             54884.02255
## 6 2019-11-03 00:33:47  0.063 sec          5             54884.02255
##   objective
## 1   4.54015
## 2   3.99554
## 3   3.88728
## 4   3.88368
## 5   3.88367
## 6   3.88367
## 
## Variable Importances: (Extract with `h2o.varimp`) 
## =================================================
## 
##        variable relative_importance scaled_importance  percentage
## 1    black.TRUE          0.67756097        1.00000000 0.236627982
## 2   health.poor          0.48287163        0.71266152 0.168635657
## 3  physlim.TRUE          0.33962316        0.50124369 0.118608283
## 4   health.fair          0.25602066        0.37785627 0.089411366
## 5      sex.male          0.19542639        0.28842628 0.068249730
## 6      ndisease          0.16661902        0.24591001 0.058189190
## 7      idp.TRUE          0.15703578        0.23176627 0.054842384
## 8    child.TRUE          0.09988003        0.14741114 0.034881600
## 9          linc          0.09830075        0.14508030 0.034330059
## 10           lc          0.08126160        0.11993253 0.028379394
## 11         lfam          0.07234463        0.10677213 0.025265273
## 12         fmde          0.06622332        0.09773781 0.023127501
## 13      educdec          0.06416087        0.09469387 0.022407220
## 14  health.good          0.05501613        0.08119732 0.019213558
## 15          age          0.03167598        0.04675000 0.011062359
## 16          lpi          0.01938077        0.02860373 0.006768444</code></pre>
</details>
<p>
As a bonus, let’s see the output of the <code>glm()</code> function:
</p>
<details>
<p>
</p><summary>
Click to view <code>glm()</code>’s output
</summary>
<p></p>
<pre class="r"><code>train_tibble &lt;- as_tibble(original_train)

r_glm &lt;- glm(mdu ~ ., data = train_tibble,
            family = poisson(link = "log"))

summary(r_glm)</code></pre>
<pre><code>## 
## Call:
## glm(formula = mdu ~ ., family = poisson(link = "log"), data = train_tibble)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -5.7039  -1.7890  -0.8433   0.4816  18.4703  
## 
## Coefficients:
##               Estimate Std. Error z value Pr(&gt;|z|)    
## (Intercept)  0.0005100  0.0585681   0.009   0.9931    
## lc          -0.0475077  0.0072280  -6.573 4.94e-11 ***
## idpTRUE     -0.1794563  0.0139749 -12.841  &lt; 2e-16 ***
## lpi          0.0129742  0.0022141   5.860 4.63e-09 ***
## fmde        -0.0166968  0.0042265  -3.951 7.80e-05 ***
## physlimTRUE  0.3182780  0.0126868  25.087  &lt; 2e-16 ***
## ndisease     0.0222300  0.0007215  30.811  &lt; 2e-16 ***
## healthfair   0.2434235  0.0192873  12.621  &lt; 2e-16 ***
## healthgood   0.0231824  0.0115398   2.009   0.0445 *  
## healthpoor   0.4608598  0.0329124  14.003  &lt; 2e-16 ***
## linc         0.0826053  0.0062208  13.279  &lt; 2e-16 ***
## lfam        -0.1194981  0.0106904 -11.178  &lt; 2e-16 ***
## educdec      0.0205582  0.0019404  10.595  &lt; 2e-16 ***
## age          0.0041397  0.0005152   8.035 9.39e-16 ***
## sexmale     -0.2096761  0.0104668 -20.032  &lt; 2e-16 ***
## childTRUE    0.1529588  0.0179179   8.537  &lt; 2e-16 ***
## blackTRUE   -0.6231230  0.0176758 -35.253  &lt; 2e-16 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for poisson family taken to be 1)
## 
##     Null deviance: 64043  on 14096  degrees of freedom
## Residual deviance: 55529  on 14080  degrees of freedom
## AIC: 84052
## 
## Number of Fisher Scoring iterations: 6</code></pre>
</details>
<p>
I could also use the excellent <code>{ggeffects}</code> package to see the marginal effects of different variables, for instance <code>"linc"</code>:
</p>
<pre class="r"><code>library(ggeffects)

ggeffect(r_glm, "linc") %&gt;% 
    ggplot(aes(x, predicted)) +
    geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#0f4150") +
    geom_line(colour = "#82518c") +
    brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/mice_exp-10-1.png" width="672">
</p>
<p>
We can see that as “linc” (and other covariates are held constant), the target variable increases.
</p>
<p>
Let’s also take a look at the marginal effect of a categorical variable, namely <code>"sex"</code>:
</p>
<details>
<p>
</p><summary>
Click to view another example of marginal effects
</summary>
<p></p>
<pre class="r"><code>library(ggeffects)

ggeffect(r_glm, "sex") %&gt;% 
    ggplot(aes(x, predicted)) +
    geom_point(colour = "#82518c") +
    geom_errorbar(aes(x, ymin = conf.low, ymax = conf.high), colour = "#82518c") +
    brotools::theme_blog()</code></pre>
<img src="https://b-rodrigues.github.io/assets/img/mice_exp-11-1.png" width="672">
</details>
<p>
In the case of the <code>"sex"</code> variable, men have significantly less doctor contacts than women.
</p>
<p>
Now, let’s suppose that I&nbsp;want to train a model with a more complicated name, in order to justify my salary. Suppose I go with one of those nifty <em>black-box</em> models, for instance a GBM, which very likely will perform better than the GLM from before. GBMs are available in <code>{h2o}</code> via the <code>h2o.gbm()</code> function:
</p>
<pre class="r"><code>gbm_model &lt;- h2o.gbm(y = "mdu", x = features_names,
            training_frame = original_train,
            validation_frame = validation,
            distribution = "poisson",
            score_each_iteration = TRUE,
            ntrees = 110,
            max_depth = 20,
            sample_rate = 0.6,
            col_sample_rate = 0.8,
            col_sample_rate_per_tree = 0.9,
            learn_rate = 0.05)</code></pre>
<p>
To find a set of good hyper-parameter values, I actually used <code>h2o.automl()</code> and then used the returned parameter values from the leader model. Maybe I’ll write another blog post about <code>h2o.automl()</code> one day, it’s quite cool. Anyways, now, how do I get me some explainability out of this? The model does perform better than the GLM as indicated by all the different metrics, but now I cannot compute any marginal effects, or anything like that. I do get feature importance by default with:
</p>
<pre class="r"><code>h2o.varimp(gbm_model)</code></pre>
<pre><code>## Variable Importances: 
##    variable relative_importance scaled_importance percentage
## 1       age       380350.093750          1.000000   0.214908
## 2      linc       282274.343750          0.742143   0.159492
## 3  ndisease       245862.718750          0.646412   0.138919
## 4       lpi       173552.734375          0.456297   0.098062
## 5   educdec       148186.265625          0.389605   0.083729
## 6      lfam       139174.312500          0.365911   0.078637
## 7      fmde        94193.585938          0.247650   0.053222
## 8    health        86160.679688          0.226530   0.048683
## 9       sex        63502.667969          0.166958   0.035881
## 10       lc        50674.968750          0.133232   0.028633
## 11  physlim        45328.382812          0.119175   0.025612
## 12    black        26376.841797          0.069349   0.014904
## 13      idp        24809.185547          0.065227   0.014018
## 14    child         9382.916992          0.024669   0.005302</code></pre>
<p>
but that’s it. And had I chosen a different “black-box” model, not based on trees, then I would not even have that. Thankfully, there’s the amazing <code>{iml}</code> package that contains a lot of functions for model-agnostic explanations. If you are not familiar with this package and the methods it implements, I highly encourage you to read the free online <a href="https://christophm.github.io/interpretable-ml-book/">ebook</a> written by the packages author, Christoph Molnar (who you can follow on <a href="https://twitter.com/ChristophMolnar">Twitter</a>).
</p>
<p>
Out of the box, <code>{iml}</code> works with several machine learning frameworks, such as <code>{caret}</code> or <code>{mlr}</code> but not with <code>{h2o}</code>. However, this is not an issue; you only need to create a predict function which returns a data frame (<code>h2o.predict()</code> used for prediction with h2o models returns an h2o frame). I have found this interesting blog post from <a href="https://www.business-science.io/business/2018/08/13/iml-model-interpretability.html">business-science.io</a> which explains how to do this. I highly recommend you read this blog post, as it goes much deeper into the capabilities of <code>{iml}</code>.
</p>
<p>
So let’s write a predict function that <code>{iml}</code> can use:
</p>
<pre class="r"><code>#source: https://www.business-science.io/business/2018/08/13/iml-model-interpretability.html
predict_for_iml &lt;- function(model, newdata){
  as_tibble(h2o.predict(model, as.h2o(newdata)))
}</code></pre>
<p>
And let’s now create a <code>Predictor</code> object. These objects are used by <code>{iml}</code> to create explanations:
</p>
<pre class="r"><code>just_features &lt;- as_tibble(holdout[, 2:15])
actual_target &lt;- as_tibble(holdout[, 1])

predictor_original &lt;- Predictor$new(
  model = gbm_model, 
  data = just_features, 
  y = actual_target, 
  predict.fun = predict_for_iml
  )</code></pre>
<p>
<code>predictor_original</code> can now be used to compute all kinds of explanations. I won’t go into much detail here, as this blog post is already quite long (and I haven’t even reached what I actually want to write about yet) and you can read more on the before-mentioned blog post or directly from Christoph Molnar’s ebook linked above.
</p>
<p>
First, let’s compute a partial dependence plot, which shows the marginal effect of a variable on the outcome. This is to compare it to the one from the GLM model:
</p>
<pre class="r"><code>feature_effect_original &lt;- FeatureEffect$new(predictor_original, "linc", method = "pdp")

plot(feature_effect_original) +
    brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/mice_exp-19-1.png" width="672">
</p>
<pre class="r"><code>feature_effect_original &lt;- FeatureEffect$new(predictor_original, "linc", method = "pdp")

plot(feature_effect_original) +
    brotools::theme_blog()</code></pre>
<p>
Quite similar to the marginal effects from the GLM! Let’s now compute model-agnostic feature importances:
</p>
<pre class="r"><code>feature_importance_original &lt;- FeatureImp$new(predictor_original, loss = "mse")

plot(feature_importance_original)</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/mice_exp-23-1.png" width="672">
</p>
<p>
And finally, the interaction effect of the <code>sex</code> variable interacted with all the others:
</p>
<pre class="r"><code>interaction_sex_original &lt;- Interaction$new(predictor_original, feature = "sex")

plot(interaction_sex_original)</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/mice_exp-26-1.png" width="672">
</p>
<p>
Ok so let’s assume that I’m happy with these explanations, and do need or want to go further. This would be the end of it in an ideal world, but this is not an ideal world unfortunately, but it’s the best we’ve got. In the real world, it often happens that data comes with missing values.
</p>
</section>
<section id="missing-data-and-explainability" class="level2">
<h2 class="anchored" data-anchor-id="missing-data-and-explainability">
Missing data and explainability
</h2>
<p>
As explained in the beginning, I’ve been wondering how to deal with missing values when the goal of the analysis is explainability. How can the explanations be pooled? Let’s start with creating a data set with missing values, then perform multiple imputation, then perform the analysis.
</p>
<p>
First, let me create a <code>patterns</code> matrix, that I will pass to the <code>ampute()</code> function from the <code>{mice}</code> package. This function creates a dataset with missing values, and by using its <code>patterns</code> argument, I can decide which columns should have missing values:
</p>
<pre class="r"><code>patterns &lt;- -1*(diag(1, nrow = 15, ncol = 15) - 1)

patterns[ ,c(seq(1, 6), c(9, 13))] &lt;- 0

amputed_train &lt;- ampute(as_tibble(original_train), prop = 0.1, patterns = patterns, mech = "MNAR")</code></pre>
<pre><code>## Warning: Data is made numeric because the calculation of weights requires
## numeric data</code></pre>
<p>
Let’s take a look at the missingness pattern:
</p>
<pre class="r"><code>naniar::vis_miss(amputed_train$amp) + 
    brotools::theme_blog() + 
      theme(axis.text.x=element_text(angle=90, hjust=1))</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/mice_exp-28-1.png" width="672">
</p>
<p>
Ok, so now let’s suppose that this was the dataset I was given. As a serious data scientist, I decide to perform multiple imputation first:
</p>
<pre class="r"><code>imputed_train_data &lt;- mice(data = amputed_train$amp, m = 10)

long_train_data &lt;- complete(imputed_train_data, "long")</code></pre>
<p>
So because I performed multiple imputation 10 times, I now have 10 different datasets. I should now perform my analysis on these 10 datasets, which means I&nbsp;should run my GBM on each of them, and then get out the explanations for each of them. So let’s do just that. But first, let’s change the columns back to how they were; to perform amputation, the factor columns were converted to numbers:
</p>
<pre class="r"><code>long_train_data &lt;- long_train_data %&gt;% 
    mutate(idp = ifelse(idp == 1, FALSE, TRUE),
           physlim = ifelse(physlim == 1, FALSE, TRUE),
           health = as.factor(case_when(health == 1 ~ "excellent",
                              health == 2 ~ "fair",
                              health == 3 ~ "good", 
                              health == 4 ~  "poor")),
           sex = as.factor(ifelse(sex == 1, "female", "male")),
           child = ifelse(child == 1, FALSE, TRUE),
           black = ifelse(black == 1, FALSE, TRUE))</code></pre>
<p>
Ok, so now we’re ready to go. I will use the <code>h2o.gbm()</code> function on each imputed data set. For this, I’ll use the <code>group_by()</code>-<code>nest()</code> trick which consists in grouping the dataset by the <code>.imp</code> column, then nesting it, then mapping the <code>h2o.gbm()</code> function to each imputed dataset. If you are not familiar with this, you can read <a href="https://www.brodrigues.co/blog/2017-03-29-make-ggplot2-purrr/">this other</a> blog post, which explains the approach. I define a custom function, <code>train_on_imputed_data()</code> to run <code>h2o.gbm()</code> on each imputed data set:
</p>
<pre class="r"><code>train_on_imputed_data &lt;- function(long_data){
    long_data %&gt;% 
        group_by(.imp) %&gt;% 
        nest() %&gt;% 
        mutate(model = map(data, ~h2o.gbm(y = "mdu", x = features_names,
            training_frame = as.h2o(.),
            validation_frame = validation,
            distribution = "poisson",
            score_each_iteration = TRUE,
            ntrees = 110,
            max_depth = 20,
            sample_rate = 0.6,
            col_sample_rate = 0.8,
            col_sample_rate_per_tree = 0.9,
            learn_rate = 0.05)))
}</code></pre>
<p>
Now the training takes place:
</p>
<pre class="r"><code>imp_trained &lt;- train_on_imputed_data(long_train_data)</code></pre>
<p>
Let’s take a look at <code>imp_trained</code>:
</p>
<pre class="r"><code>imp_trained</code></pre>
<pre><code>## # A tibble: 10 x 3
## # Groups:   .imp [10]
##     .imp            data model     
##    &lt;int&gt; &lt;list&lt;df[,16]&gt;&gt; &lt;list&gt;    
##  1     1   [14,042 × 16] &lt;H2ORgrsM&gt;
##  2     2   [14,042 × 16] &lt;H2ORgrsM&gt;
##  3     3   [14,042 × 16] &lt;H2ORgrsM&gt;
##  4     4   [14,042 × 16] &lt;H2ORgrsM&gt;
##  5     5   [14,042 × 16] &lt;H2ORgrsM&gt;
##  6     6   [14,042 × 16] &lt;H2ORgrsM&gt;
##  7     7   [14,042 × 16] &lt;H2ORgrsM&gt;
##  8     8   [14,042 × 16] &lt;H2ORgrsM&gt;
##  9     9   [14,042 × 16] &lt;H2ORgrsM&gt;
## 10    10   [14,042 × 16] &lt;H2ORgrsM&gt;</code></pre>
<p>
We see that the column <code>model</code> contains one model for each imputed dataset. Now comes the part I wanted to write about (finally): getting explanations out of this. Getting the explanations from each model is not the hard part, that’s easily done using some <code>{tidyverse}</code> magic (if you’re following along, run this bit of code below, and go make dinner, have dinner, and wash the dishes, because it takes time to run):
</p>
<pre class="r"><code>make_predictors &lt;- function(model){
    Predictor$new(
        model = model, 
        data = just_features, 
        y = actual_target, 
        predict.fun = predict_for_iml
        )
}

make_effect &lt;- function(predictor_object, feature = "linc", method = "pdp"){
    FeatureEffect$new(predictor_object, feature, method)
}

make_feat_imp &lt;- function(predictor_object, loss = "mse"){
    FeatureImp$new(predictor_object, loss)
}

make_interactions &lt;- function(predictor_object, feature = "sex"){
    Interaction$new(predictor_object, feature = feature)
}

imp_trained &lt;- imp_trained %&gt;%
    mutate(predictors = map(model, make_predictors)) %&gt;% 
    mutate(effect_linc = map(predictors, make_effect)) %&gt;% 
    mutate(feat_imp = map(predictors, make_feat_imp)) %&gt;% 
    mutate(interactions_sex = map(predictors, make_interactions))</code></pre>
<p>
Ok so now that I’ve got these explanations, I am done with my analysis. This is the time to pool the results together. Remember, in the case of regression models as used in the social sciences, this means averaging the estimated model parameters and using Rubin’s rule to compute their standard errors. But in this case, this is not so obvious. Should the explanations be averaged? Should I instead analyse them one by one, and see if they differ? My gut feeling is that they shouldn’t differ much, but who knows? Perhaps the answer is doing a bit of both. I have checked online for a paper that would shed some light into this, but have not found any. So let’s take a closer look to the explanations. Let’s look at feature importance:
</p>
<details>
<p>
</p><summary>
Click to view the 10 feature importances
</summary>
<p></p>
<pre class="r"><code>imp_trained %&gt;% 
    pull(feat_imp)</code></pre>
<pre><code>## [[1]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##    feature importance.05 importance importance.95 permutation.error
## 1 ndisease     1.0421605   1.362672      1.467244          22.03037
## 2     fmde     0.8611917   1.142809      1.258692          18.47583
## 3      lpi     0.8706659   1.103367      1.196081          17.83817
## 4   health     0.8941010   1.098014      1.480508          17.75164
## 5       lc     0.8745229   1.024288      1.296668          16.55970
## 6    black     0.7537278   1.006294      1.095054          16.26879
## 
## [[2]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##    feature importance.05 importance importance.95 permutation.error
## 1      age      0.984304   1.365702      1.473146          22.52529
## 2     linc      1.102023   1.179169      1.457907          19.44869
## 3 ndisease      1.075821   1.173938      1.642938          19.36241
## 4     fmde      1.059303   1.150112      1.281291          18.96944
## 5       lc      0.837573   1.132719      1.200556          18.68257
## 6  physlim      0.763757   1.117635      1.644434          18.43379
## 
## [[3]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##    feature importance.05 importance importance.95 permutation.error
## 1      age     0.8641304   1.334382      1.821797          21.62554
## 2    black     1.0553001   1.301338      1.429119          21.09001
## 3     fmde     0.8965085   1.208761      1.360217          19.58967
## 4 ndisease     1.0577766   1.203418      1.651611          19.50309
## 5     linc     0.9299725   1.114041      1.298379          18.05460
## 6      sex     0.9854144   1.091391      1.361406          17.68754
## 
## [[4]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##   feature importance.05 importance importance.95 permutation.error
## 1 educdec     0.9469049   1.263961      1.358115          20.52909
## 2     age     1.0980269   1.197441      1.763202          19.44868
## 3  health     0.8539843   1.133338      1.343389          18.40753
## 4    linc     0.7608811   1.123423      1.328756          18.24649
## 5     lpi     0.8203850   1.103394      1.251688          17.92118
## 6   black     0.9476909   1.089861      1.328960          17.70139
## 
## [[5]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##   feature importance.05 importance importance.95 permutation.error
## 1     lpi     0.9897789   1.336405      1.601778          22.03791
## 2 educdec     0.8701162   1.236741      1.424602          20.39440
## 3     age     0.8537786   1.181242      1.261411          19.47920
## 4    lfam     1.0185313   1.133158      1.400151          18.68627
## 5     idp     0.9502284   1.069772      1.203147          17.64101
## 6    linc     0.8600586   1.042453      1.395231          17.19052
## 
## [[6]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##   feature importance.05 importance importance.95 permutation.error
## 1      lc     0.7707383   1.208190      1.379422          19.65436
## 2     sex     0.9309901   1.202629      1.479511          19.56391
## 3    linc     1.0549563   1.138404      1.624217          18.51912
## 4     lpi     0.9360817   1.135198      1.302084          18.46696
## 5 physlim     0.7357272   1.132525      1.312584          18.42349
## 6   child     1.0199964   1.109120      1.316306          18.04274
## 
## [[7]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##    feature importance.05 importance importance.95 permutation.error
## 1     linc     0.9403425   1.262994      1.511122          20.65942
## 2       lc     1.0481333   1.233136      1.602796          20.17103
## 3 ndisease     1.1612194   1.212454      1.320208          19.83272
## 4  educdec     0.7924637   1.197343      1.388218          19.58554
## 5     lfam     0.8423790   1.178545      1.349884          19.27805
## 6      age     0.9125829   1.168297      1.409525          19.11043
## 
## [[8]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##    feature importance.05 importance importance.95 permutation.error
## 1      age     1.1281736   1.261273      1.609524          20.55410
## 2   health     0.9134557   1.240597      1.432366          20.21716
## 3     lfam     0.7469043   1.182294      1.345910          19.26704
## 4      lpi     0.8088552   1.160863      1.491139          18.91779
## 5 ndisease     1.0756671   1.104357      1.517278          17.99695
## 6     fmde     0.6929092   1.093465      1.333544          17.81946
## 
## [[9]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##    feature importance.05 importance importance.95 permutation.error
## 1  educdec     1.0188109   1.287697      1.381982          20.92713
## 2      lpi     0.9853336   1.213095      1.479002          19.71473
## 3     linc     0.8354715   1.195344      1.254350          19.42625
## 4      age     0.9980451   1.179371      1.383545          19.16666
## 5 ndisease     1.0492685   1.176804      1.397398          19.12495
## 6     lfam     1.0814043   1.166626      1.264592          18.95953
## 
## [[10]]
## Interpretation method:  FeatureImp 
## error function: mse
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##    feature importance.05 importance importance.95 permutation.error
## 1      age     0.9538824   1.211869      1.621151          19.53671
## 2      sex     0.9148921   1.211253      1.298311          19.52678
## 3     lfam     0.8227355   1.093094      1.393815          17.62192
## 4 ndisease     0.8282127   1.090779      1.205994          17.58459
## 5       lc     0.7004401   1.060870      1.541697          17.10244
## 6   health     0.8137149   1.058324      1.183639          17.06138</code></pre>
</details>
<p>
As you can see, the feature importances are quite different from each other, but I don’t think this comes from the imputations, but rather from the fact that feature importance <em>depends on shuffling the feature, which adds randomness to the measurement</em> (source: <a href="https://christophm.github.io/interpretable-ml-book/feature-importance.html#disadvantages-9" class="uri">https://christophm.github.io/interpretable-ml-book/feature-importance.html#disadvantages-9</a>). To mitigate this, Christoph Molnar suggests repeating the the permutation and averaging the importance measures; I think that this would be my approach for <em>pooling</em> as well.
</p>
<p>
Let’s now take a look at interactions:
</p>
<details>
<p>
</p><summary>
Click to view the 10 interactions
</summary>
<p></p>
<pre class="r"><code>imp_trained %&gt;% 
    pull(interactions_sex)</code></pre>
<pre><code>## [[1]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.07635197
## 2      idp:sex   0.08172754
## 3      lpi:sex   0.10704357
## 4     fmde:sex   0.11267146
## 5  physlim:sex   0.04099073
## 6 ndisease:sex   0.16314524
## 
## [[2]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.10349820
## 2      idp:sex   0.07432519
## 3      lpi:sex   0.11651413
## 4     fmde:sex   0.18123926
## 5  physlim:sex   0.12952808
## 6 ndisease:sex   0.14528876
## 
## [[3]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.05919320
## 2      idp:sex   0.05586197
## 3      lpi:sex   0.24253335
## 4     fmde:sex   0.05240474
## 5  physlim:sex   0.06404969
## 6 ndisease:sex   0.14508072
## 
## [[4]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.02775529
## 2      idp:sex   0.02050390
## 3      lpi:sex   0.11781130
## 4     fmde:sex   0.11084240
## 5  physlim:sex   0.17932694
## 6 ndisease:sex   0.07181589
## 
## [[5]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.12873151
## 2      idp:sex   0.03681428
## 3      lpi:sex   0.15879389
## 4     fmde:sex   0.16952900
## 5  physlim:sex   0.07031520
## 6 ndisease:sex   0.10567463
## 
## [[6]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.15320481
## 2      idp:sex   0.08645037
## 3      lpi:sex   0.16674641
## 4     fmde:sex   0.14671054
## 5  physlim:sex   0.09236257
## 6 ndisease:sex   0.14605618
## 
## [[7]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.04072960
## 2      idp:sex   0.05641868
## 3      lpi:sex   0.19491959
## 4     fmde:sex   0.07119644
## 5  physlim:sex   0.05777469
## 6 ndisease:sex   0.16555363
## 
## [[8]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.04979709
## 2      idp:sex   0.06036898
## 3      lpi:sex   0.14009307
## 4     fmde:sex   0.10927688
## 5  physlim:sex   0.08761533
## 6 ndisease:sex   0.20544585
## 
## [[9]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.08572075
## 2      idp:sex   0.12254979
## 3      lpi:sex   0.17532347
## 4     fmde:sex   0.12557420
## 5  physlim:sex   0.05084209
## 6 ndisease:sex   0.13977328
## 
## [[10]]
## Interpretation method:  Interaction 
## 
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##       .feature .interaction
## 1       lc:sex   0.08636490
## 2      idp:sex   0.04807331
## 3      lpi:sex   0.17922280
## 4     fmde:sex   0.05728403
## 5  physlim:sex   0.09392774
## 6 ndisease:sex   0.13408956</code></pre>
</details>
<p>
It would seem that interactions are a bit more stable. Let’s average the values; for this I need to access the <code>results</code> element of the interactions object and the result out:
</p>
<pre class="r"><code>interactions_sex_result &lt;- imp_trained %&gt;% 
    mutate(interactions_results = map(interactions_sex, function(x)(x$results))) %&gt;% 
    pull()</code></pre>
<p>
<code>interactions_sex_result</code> is a list of dataframes, which means I can bind the rows together and compute whatever I need:
</p>
<pre class="r"><code>interactions_sex_result %&gt;% 
    bind_rows() %&gt;% 
    group_by(.feature) %&gt;% 
    summarise_at(.vars = vars(.interaction), 
                 .funs = funs(mean, sd, low_ci = quantile(., 0.05), high_ci = quantile(., 0.95)))</code></pre>
<pre><code>## # A tibble: 13 x 5
##    .feature       mean     sd low_ci high_ci
##    &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
##  1 age:sex      0.294  0.0668 0.181    0.369
##  2 black:sex    0.117  0.0286 0.0763   0.148
##  3 child:sex    0.0817 0.0308 0.0408   0.125
##  4 educdec:sex  0.148  0.0411 0.104    0.220
##  5 fmde:sex     0.114  0.0443 0.0546   0.176
##  6 health:sex   0.130  0.0190 0.104    0.151
##  7 idp:sex      0.0643 0.0286 0.0278   0.106
##  8 lc:sex       0.0811 0.0394 0.0336   0.142
##  9 lfam:sex     0.149  0.0278 0.125    0.198
## 10 linc:sex     0.142  0.0277 0.104    0.179
## 11 lpi:sex      0.160  0.0416 0.111    0.221
## 12 ndisease:sex 0.142  0.0356 0.0871   0.187
## 13 physlim:sex  0.0867 0.0415 0.0454   0.157</code></pre>
<p>
That seems pretty good. Now, what about the partial dependence? Let’s take a closer look:
</p>
<details>
<p>
</p><summary>
Click to view the 10 pdps
</summary>
<p></p>
<pre class="r"><code>imp_trained %&gt;% 
    pull(effect_linc)</code></pre>
<pre><code>## [[1]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 1.652445   pdp
## 2 0.5312226 1.687522   pdp
## 3 1.0624453 1.687522   pdp
## 4 1.5936679 1.687522   pdp
## 5 2.1248905 1.685088   pdp
## 6 2.6561132 1.694112   pdp
## 
## [[2]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 1.813449   pdp
## 2 0.5312226 1.816195   pdp
## 3 1.0624453 1.816195   pdp
## 4 1.5936679 1.816195   pdp
## 5 2.1248905 1.804457   pdp
## 6 2.6561132 1.797238   pdp
## 
## [[3]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 1.906515   pdp
## 2 0.5312226 2.039318   pdp
## 3 1.0624453 2.039318   pdp
## 4 1.5936679 2.039318   pdp
## 5 2.1248905 2.002970   pdp
## 6 2.6561132 2.000922   pdp
## 
## [[4]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 1.799552   pdp
## 2 0.5312226 2.012634   pdp
## 3 1.0624453 2.012634   pdp
## 4 1.5936679 2.012634   pdp
## 5 2.1248905 1.982425   pdp
## 6 2.6561132 1.966392   pdp
## 
## [[5]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 1.929158   pdp
## 2 0.5312226 1.905171   pdp
## 3 1.0624453 1.905171   pdp
## 4 1.5936679 1.905171   pdp
## 5 2.1248905 1.879721   pdp
## 6 2.6561132 1.869113   pdp
## 
## [[6]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 2.147697   pdp
## 2 0.5312226 2.162393   pdp
## 3 1.0624453 2.162393   pdp
## 4 1.5936679 2.162393   pdp
## 5 2.1248905 2.119923   pdp
## 6 2.6561132 2.115131   pdp
## 
## [[7]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 1.776742   pdp
## 2 0.5312226 1.957938   pdp
## 3 1.0624453 1.957938   pdp
## 4 1.5936679 1.957938   pdp
## 5 2.1248905 1.933847   pdp
## 6 2.6561132 1.885287   pdp
## 
## [[8]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 2.020647   pdp
## 2 0.5312226 2.017981   pdp
## 3 1.0624453 2.017981   pdp
## 4 1.5936679 2.017981   pdp
## 5 2.1248905 1.981122   pdp
## 6 2.6561132 2.017604   pdp
## 
## [[9]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 1.811189   pdp
## 2 0.5312226 2.003053   pdp
## 3 1.0624453 2.003053   pdp
## 4 1.5936679 2.003053   pdp
## 5 2.1248905 1.938150   pdp
## 6 2.6561132 1.918518   pdp
## 
## [[10]]
## Interpretation method:  FeatureEffect 
## features: linc[numerical]
## grid size: 20
## 
## Analysed predictor: 
## Prediction task: unknown 
## 
## 
## Analysed data:
## Sampling from data.frame with 2013 rows and 14 columns.
## 
## Head of results:
##        linc   .y.hat .type
## 1 0.0000000 1.780325   pdp
## 2 0.5312226 1.850203   pdp
## 3 1.0624453 1.850203   pdp
## 4 1.5936679 1.850203   pdp
## 5 2.1248905 1.880805   pdp
## 6 2.6561132 1.881305   pdp</code></pre>
</details>
<p>
As you can see, the values are quite similar. I think that in the case of plots, the best way to visualize the impact of the imputation is to simply plot all the lines in a single plot:
</p>
<pre class="r"><code>effect_linc_results &lt;- imp_trained %&gt;% 
    mutate(effect_linc_results = map(effect_linc, function(x)(x$results))) %&gt;% 
    select(.imp, effect_linc_results) %&gt;% 
    unnest(effect_linc_results)

effect_linc_results %&gt;% 
    bind_rows() %&gt;% 
    ggplot() + 
    geom_line(aes(y = .y.hat, x = linc, group = .imp), colour = "#82518c") + 
    brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/mice_exp-43-1.png" width="672">
</p>
<p>
Overall, the partial dependence plot seems to behave in a very similar way across the different imputed datasets!
</p>
<p>
To conclude, I think that the approach I suggest here is nothing revolutionary; it is consistent with the way one should conduct an analysis with multiple imputed datasets. However, the pooling step is non-trivial and there is no magic recipe; it really depends on the goal of the analysis and what you want or need to show.
</p>
<p>
Hope you enjoyed! If you found this blog post useful, you might want to follow me on <a href="https://www.twitter.com/brodriguesco">twitter</a> for blog post updates and <a href="https://www.buymeacoffee.com/brodriguesco">buy me an espresso</a> or <a href="https://www.paypal.me/brodriguesco">paypal.me</a>, or buy my ebook on <a href="https://leanpub.com/modern_tidyverse">Leanpub</a>.
</p>
<style>.bmc-button img{width: 27px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{line-height: 36px !important;height:37px !important;text-decoration: none !important;display:inline-flex !important;color:#ffffff !important;background-color:#272b30 !important;border-radius: 3px !important;border: 1px solid transparent !important;padding: 1px 9px !important;font-size: 22px !important;letter-spacing:0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#82518c !important;}</style>
<p>
<link href="https://fonts.googleapis.com/css?family=Cookie" rel="stylesheet"><a class="bmc-button" target="_blank" href="https://www.buymeacoffee.com/brodriguesco"><img src="https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg" alt="Buy me an Espresso"><span style="margin-left:5px">Buy me an Espresso</span></a>
</p>
</section>



 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2019-11-02-mice_exp.html</guid>
  <pubDate>Sat, 02 Nov 2019 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Cluster multiple time series using K-means</title>
  <link>https://b-rodrigues.github.io/posts/2019-10-12-cluster_ts.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://en.wikipedia.org/wiki/Elbow_method_(clustering)"> <img src="https://b-rodrigues.github.io/assets/img/deepfried_elbow.jpg" title="A life saving skill"></a>
</p>
</div>
<p>
I have been recently confronted to the issue of finding similarities among time-series and though about using k-means to cluster them. To illustrate the method, I’ll be using data from the Penn World Tables, readily available in R (inside the <code>{pwt9}</code> package):
</p>
<pre class="r"><code>library(tidyverse)
library(lubridate)
library(pwt9)
library(brotools)</code></pre>
<p>
First, of all, let’s only select the needed columns:
</p>
<pre class="r"><code>pwt &lt;- pwt9.0 %&gt;%
select(country, year, avh)</code></pre>
<p>
<code>avh</code> contains the average worked hours for a given country and year. The data looks like this:
</p>
<pre class="r"><code>head(pwt)</code></pre>
<pre><code>##          country year avh
## ABW-1950   Aruba 1950  NA
## ABW-1951   Aruba 1951  NA
## ABW-1952   Aruba 1952  NA
## ABW-1953   Aruba 1953  NA
## ABW-1954   Aruba 1954  NA
## ABW-1955   Aruba 1955  NA</code></pre>
<p>
For each country, there’s yearly data on the <code>avh</code> variable. The goal here is to cluster the different countries by looking at how similar they are on the <code>avh</code> variable. Let’s do some further cleaning. The k-means implementation in R expects a wide data frame (currently my data frame is in the long format) and no missing values. These could potentially be imputed, but I can’t be bothered:
</p>
<pre class="r"><code>pwt_wide &lt;- pwt %&gt;%
  pivot_wider(names_from = year, values_from = avh)  %&gt;%
  filter(!is.na(`1950`)) %&gt;%
  mutate_at(vars(-country), as.numeric)</code></pre>
<p>
To convert my data frame from long to wide, I use the fresh <code>pivot_wider()</code> function, instead of the less intuitive <code>spread()</code> function.
</p>
<p>
We’re ready to use the k-means algorithm. To know how many clusters I should aim for, I’ll be using the elbow method (if you’re not familiar with this method, click on the image at the very top of this post):
</p>
<pre class="r"><code>wss &lt;- map_dbl(1:5, ~{kmeans(select(pwt_wide, -country), ., nstart=50,iter.max = 15 )$tot.withinss})

n_clust &lt;- 1:5

elbow_df &lt;- as.data.frame(cbind("n_clust" = n_clust, "wss" = wss))


ggplot(elbow_df) +
geom_line(aes(y = wss, x = n_clust), colour = "#82518c") +
theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/cluster_ts-6-1.png" width="672">
</p>
<p>
Looks like 3 clusters is a good choice. Let’s now run the kmeans algorithm:
</p>
<pre class="r"><code>clusters &lt;- kmeans(select(pwt_wide, -country), centers = 3)</code></pre>
<p>
<code>clusters</code> is a list with several interesting items. The item <code>centers</code> contains the “average” time series:
</p>
<pre class="r"><code>(centers &lt;- rownames_to_column(as.data.frame(clusters$centers), "cluster"))</code></pre>
<pre><code>##   cluster     1950     1951     1952     1953     1954     1955     1956
## 1       1 2110.440 2101.273 2088.947 2074.273 2066.617 2053.391 2034.926
## 2       2 2086.509 2088.571 2084.433 2081.939 2078.756 2078.710 2074.175
## 3       3 2363.600 2350.774 2338.032 2325.375 2319.011 2312.083 2308.483
##       1957     1958     1959     1960     1961     1962     1963     1964
## 1 2021.855 2007.221 1995.038 1985.904 1978.024 1971.618 1963.780 1962.983
## 2 2068.807 2062.021 2063.687 2060.176 2052.070 2044.812 2038.939 2037.488
## 3 2301.355 2294.556 2287.556 2279.773 2272.899 2262.781 2255.690 2253.431
##       1965     1966     1967     1968     1969     1970     1971     1972
## 1 1952.945 1946.961 1928.445 1908.354 1887.624 1872.864 1855.165 1825.759
## 2 2027.958 2021.615 2015.523 2007.176 2001.289 1981.906 1967.323 1961.269
## 3 2242.775 2237.216 2228.943 2217.717 2207.037 2190.452 2178.955 2167.124
##       1973     1974     1975     1976     1977     1978     1979     1980
## 1 1801.370 1770.484 1737.071 1738.214 1713.395 1693.575 1684.215 1676.703
## 2 1956.755 1951.066 1933.527 1926.508 1920.668 1911.488 1904.316 1897.103
## 3 2156.304 2137.286 2125.298 2118.138 2104.382 2089.717 2083.036 2069.678
##       1981     1982     1983     1984     1985     1986     1987     1988
## 1 1658.894 1644.019 1636.909 1632.371 1623.901 1615.320 1603.383 1604.331
## 2 1883.376 1874.730 1867.266 1861.386 1856.947 1849.568 1848.748 1847.690
## 3 2055.658 2045.501 2041.428 2030.095 2040.210 2033.289 2028.345 2029.290
##       1989     1990     1991     1992     1993     1994     1995     1996
## 1 1593.225 1586.975 1573.084 1576.331 1569.725 1567.599 1567.113 1558.274
## 2 1842.079 1831.907 1823.552 1815.864 1823.824 1830.623 1831.815 1831.648
## 3 2031.741 2029.786 1991.807 1974.954 1973.737 1975.667 1980.278 1988.728
##       1997     1998     1999     2000     2001     2002     2003     2004
## 1 1555.079 1555.071 1557.103 1545.349 1530.207 1514.251 1509.647 1522.389
## 2 1835.372 1836.030 1839.857 1827.264 1813.477 1781.696 1786.047 1781.858
## 3 1985.076 1961.219 1966.310 1959.219 1946.954 1940.110 1924.799 1917.130
##       2005     2006     2007     2008     2009     2010     2011     2012
## 1 1514.492 1512.872 1515.299 1514.055 1493.875 1499.563 1503.049 1493.862
## 2 1775.167 1776.759 1773.587 1771.648 1734.559 1736.098 1742.143 1735.396
## 3 1923.496 1912.956 1902.156 1897.550 1858.657 1861.875 1861.608 1850.802
##       2013     2014
## 1 1485.589 1486.991
## 2 1729.973 1729.543
## 3 1848.158 1851.829</code></pre>
<p>
<code>clusters</code> also contains the <code>cluster</code> item, which tells me to which cluster the different countries belong to. I can easily add this to the original data frame:
</p>
<pre class="r"><code>pwt_wide &lt;- pwt_wide %&gt;% 
  mutate(cluster = clusters$cluster)</code></pre>
<p>
Now, let’s prepare the data for visualisation. I have to go back to a long data frame for this:
</p>
<pre class="r"><code>pwt_long &lt;- pwt_wide %&gt;%
  pivot_longer(cols=c(-country, -cluster), names_to = "year", values_to = "avh") %&gt;%
  mutate(year = ymd(paste0(year, "-01-01")))

centers_long &lt;- centers %&gt;%
  pivot_longer(cols = -cluster, names_to = "year", values_to = "avh") %&gt;%  
  mutate(year = ymd(paste0(year, "-01-01")))</code></pre>
<p>
And I can now plot the different time series, by cluster and highlight the “average” time series for each cluster as well (yellow line):
</p>
<pre class="r"><code>ggplot() +
  geom_line(data = pwt_long, aes(y = avh, x = year, group = country), colour = "#82518c") +
  facet_wrap(~cluster, nrow = 1) + 
  geom_line(data = centers_long, aes(y = avh, x = year, group = cluster), col = "#b58900", size = 2) +
  theme_blog() +
  labs(title = "Average hours worked in several countries", 
       caption = "The different time series have been clustered using k-means.
                 Cluster 1: Belgium, Switzerland, Germany, Denmark, France, Luxembourg, Netherlands,
                 Norway, Sweden.\nCluster 2: Australia, Colombia, Ireland, Iceland, Japan, Mexico,
                 Portugal, Turkey.\nCluster 3: Argentina, Austria, Brazil, Canada, Cyprus, Spain, Finland,
                 UK, Italy, New Zealand, Peru, USA, Venezuela") +
  theme(plot.caption = element_text(colour = "white"))</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/cluster_ts-11-1.png" width="672">
</p>



 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2019-10-12-cluster_ts.html</guid>
  <pubDate>Sat, 12 Oct 2019 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
