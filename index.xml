<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Econometrics and Free Software</title>
<link>https://b-rodrigues.github.io/</link>
<atom:link href="https://b-rodrigues.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.37</generator>
<lastBuildDate>Fri, 17 Dec 2021 00:00:00 GMT</lastBuildDate>
<item>
  <title>How to write code that returns (Rmarkdown) code</title>
  <link>https://b-rodrigues.github.io/posts/2021-12-17-expand_knitr.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://en.wikipedia.org/wiki/Fractal"> <img src="https://b-rodrigues.github.io/assets/img/fractal_doge.gif" title="Nature is fractal"></a>
</p>
</div>
<p>
One of the most useful aspects of using a programming language instead of… well, not using a programming language, is that you can write code in a way that minimizes, and ideally, eliminates the need to repeat yourself.
</p>
<p>
For instance, you can write a function to show you a frequency table, like so:
</p>
<pre class="r"><code>suppressMessages(library(dplyr))

create_table &lt;- function(dataset, var){

  var &lt;- enquo(var)

  dataset %&gt;%
    count(!!var) %&gt;%
    knitr::kable()

}</code></pre>
<p>
And can now get some fancy looking tables by simply writing:
</p>
<pre class="r"><code>create_table(mtcars, cyl)</code></pre>
<table class="table">
<thead>
<tr class="header">
<th align="right">
cyl
</th>
<th align="right">
n
</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="right">
4
</td>
<td align="right">
11
</td>
</tr>
<tr class="even">
<td align="right">
6
</td>
<td align="right">
7
</td>
</tr>
<tr class="odd">
<td align="right">
8
</td>
<td align="right">
14
</td>
</tr>
</tbody>
</table>
<p>
If I want such tables for hundreds of columns, I can use this function and loop over the columns and not have to write the code inside the body of the function over and over again. You’ll notice that the function <code>create_table()</code> makes use of some advanced programming techniques I have discussed <a href="https://www.brodrigues.co/blog/2016-07-18-data-frame-columns-as-arguments-to-dplyr-functions/">here</a>. There’s also an alternative way of programming with <code>{dplyr}</code>, using the <code>{{}}</code> construct I discussed <a href="https://www.brodrigues.co/blog/2019-06-20-tidy_eval_saga/">here</a>, but I couldn’t get what I’m going to show you here to work with <code>{{}}</code>.
</p>
<p>
Recently, I had to create a Rmarkdown document with many sections, where each section title was a question from a survey and the content was a frequency table. I wanted to write a fuction that would create a section with the right question title, and then show the table, and I wanted to then call this function over all the questions from the survey and have my document automatically generated.
</p>
<p>
The result should look like <a href="https://dazzling-thompson-964d5b.netlify.app/">this</a>, but it would be a PDF instead of HTML.
</p>
<p>
Let’s first load the data and see how it looks like:
</p>
<pre class="r"><code>library(dplyr)
library(purrr)
library(readr)

suppressMessages(
  survey_data &lt;- read_csv(
    "https://gist.githubusercontent.com/b-rodrigues/0c2249dec5a9c9477e0d1ad9964a1340/raw/873bcc7532b8bad613235f029884df1d0b947c90/survey_example.csv"
  )
)

glimpse(survey_data)</code></pre>
<pre><code>## Rows: 100
## Columns: 4
## $ `Random question?`                         &lt;chr&gt; "no", "yes", "yes", "yes", …
## $ `Copy of Random question?`                 &lt;chr&gt; "yes", "yes", "no", "yes", …
## $ `Copy of Copy of Random question?`         &lt;chr&gt; "yes", "no", "no", "yes", "…
## $ `Copy of Copy of Copy of Random question?` &lt;chr&gt; "yes", "yes", "no", "yes", …</code></pre>
<p>
Each column name is the question, and each row is one answer to the survey question. To create the document I showed above, you’d probably write something like this:
</p>
<pre><code>
## Random question?

` ``{r}

create_table(survey_data, `Random question?`)

` ``

## Copy of Random question?

` ``{r}

create_table(survey_data, `Copy of Random question?`)

` ``

## Copy of Copy of Random question?

` ``{r}

create_table(survey_data, `Copy of Copy of Random question?`)

` ``

## Copy of Copy of Copy of Random question?

` ``{r}

create_table(survey_data, `Copy of Copy of Copy of Random question?`)

` ``
</code></pre>
<p>
As you can see, this gets tedious very quickly, especially if you have 100’s of variables. So how to not repeat yourself? The solution has two steps; first you should try to automate what you have as much as possible. Ideally, you don’t want to have to write the complete question every time. So first, let’s replace the questions by simpler variable names:
</p>
<pre class="r"><code>questions &lt;- colnames(survey_data)

codes &lt;- paste0("var_", seq(1, length(questions)))

lookup &lt;- bind_cols("codes" = codes, "questions" = questions)

colnames(survey_data) &lt;- codes</code></pre>
<p>
<code>lookup</code> is a data frame with the questions and their respective codes:
</p>
<pre class="r"><code>lookup</code></pre>
<pre><code>## tibble [4, 2] 
## codes     chr var_1 var_2 var_3 var_4
## questions chr Random question? Copy of Random question? Cop~</code></pre>
<p>
and our data now has simpler variable names:
</p>
<pre class="r"><code>glimpse(survey_data)</code></pre>
<pre><code>## Rows: 100
## Columns: 4
## $ var_1 &lt;chr&gt; "no", "yes", "yes", "yes", "no", NA, "no", NA, "no", "no", "no",…
## $ var_2 &lt;chr&gt; "yes", "yes", "no", "yes", "no", "yes", "yes", NA, "yes", NA, "n…
## $ var_3 &lt;chr&gt; "yes", "no", "no", "yes", "yes", "no", "no", "yes", "no", "yes",…
## $ var_4 &lt;chr&gt; "yes", "yes", "no", "yes", "yes", "no", "no", "yes", "no", "no",…</code></pre>
<p>
Doing this allows us to replace the source code of our Rmarkdown like so:
</p>
<pre class="r"><code>## `r lookup$questions[grepl("var_1", lookup$codes)]`

`&nbsp;``{r}
create_table(survey_data, var_1)
`&nbsp;``</code></pre>
<p>
This already makes things easier, as now you only have to change <code>var_1</code> to <code>var_2</code> to <code>var_3</code>… the inline code gets executed and the right title (the question text) appears. But how to go further? I don’t want to have to copy and paste this and change <code>var_1</code> to <code>var_2</code> etc… So the second step of the two-step solution is to use a function called <code>knitr_expand()</code> described <a href="https://bookdown.org/yihui/rmarkdown-cookbook/knit-expand.html">here</a>. The idea of <code>knitr::knitr_expand()</code> is that it uses some Rmd source as a template, and also allows the user to define some variables that will be replaced at compile time. Simple examples are available <a href="https://cran.r-project.org/web/packages/knitr/vignettes/knit_expand.html">here</a>. I want to build upon that, because I need to pass my variable (in this case <code>var_1</code> for instance) to my function <code>create_table()</code>.
</p>
<p>
The solution is to write another function that uses <code>knitr::knitr_expand()</code>. This is how it could look like:
</p>
<pre class="r"><code>create_table &lt;- function(dataset, var){

  dataset %&gt;%
    count(!!var) %&gt;%
    knitr::kable()

}


return_section &lt;- function(var){

  a &lt;- knitr::knit_expand(text = c("## {{question}}",   create_table(survey_data, var)),
                          question =  lookup$questions[grepl(quo_name(var), lookup$codes)])

  cat(a, sep = "\n")
}</code></pre>
<p>
I needed to edit <code>create_table()</code> a little bit, and remove the line <code>var &lt;- enquo(var)</code>. This is because now, I won’t be passing a variable down to the function, but a quosure, and there is a very good reason for it, you’ll see. <code>return_section()</code> makes use of <code>knitr_expand()</code>, and the <code>text =</code> argument is the template that will get expanded. <code>{{question}}</code> will get replaced by the variable I defined which is the code I wrote above to automatically get the question text. Finally, <code>var</code> will get replaced by the variable I pass to the function.
</p>
<p>
First, let’s get it running on one single variable:
</p>
<pre class="r"><code>return_section(quo(var_1))</code></pre>
<pre><code>## ## Random question?
## |var_1 |  n|
## |:-----|--:|
## |no    | 40|
## |yes   | 44|
## |NA    | 16|</code></pre>
<p>
As you see, I had to use <code>quo(var_1)</code> and not only <code>var_1</code>. But apart from this, the function seems to work well. Putting this in an Rmarkdown document would create a section with the question as the text of the section and a frequency table as the body. I could now copy and paste this and only have to change <code>var_1</code>. But I don’t want to have to copy and paste! So the idea would be to loop the function over a list of variables.
</p>
<p>
I have such a list already:
</p>
<pre class="r"><code>codes</code></pre>
<pre><code>## [1] "var_1" "var_2" "var_3" "var_4"</code></pre>
<p>
But it’s not a list of quosures, but a list of strings, and this is not going to work (it will return an error):
</p>
<pre class="r"><code>walk(codes, return_section)</code></pre>
<p>
(I’m using <code>walk()</code> instead of <code>map()</code> because <code>return_section()</code> doesn’t return an object, but only shows something on screen. This is called a side effect, and <code>walk()</code> allows you to loop properly over functions that only return side effects).
</p>
<p>
The problem I have now is to convert strings to quosures. This is possible using <code>rlang::sym()</code>:
</p>
<pre class="r"><code>sym_codes &lt;- map(codes, sym)</code></pre>
<p>
And now I’m done:
</p>
<pre class="r"><code>walk(sym_codes, return_section)</code></pre>
<pre><code>## ## Random question?
## |var_1 |  n|
## |:-----|--:|
## |no    | 40|
## |yes   | 44|
## |NA    | 16|
## ## Copy of Random question?
## |var_2 |  n|
## |:-----|--:|
## |no    | 52|
## |yes   | 32|
## |NA    | 16|
## ## Copy of Copy of Random question?
## |var_3 |  n|
## |:-----|--:|
## |no    | 46|
## |yes   | 47|
## |NA    |  7|
## ## Copy of Copy of Copy of Random question?
## |var_4 |  n|
## |:-----|--:|
## |no    | 48|
## |yes   | 42|
## |NA    | 10|</code></pre>
<p>
Putting this in an Rmarkdown source create a PDF (or Word, or HTML) document with one section per question, and without have to do copy-pasting which is quite error-prone. Here is the final Rmarkdown <a href="https://gist.github.com/b-rodrigues/843011bb863f27a8fe7f299e13eb4491">file</a>. You’ll notice that the last chunk has the option <code>results = ‘asis’</code>, which is needed for this trick to work.
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2021-12-17-expand_knitr.html</guid>
  <pubDate>Fri, 17 Dec 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Speedrunning row-oriented workflows</title>
  <link>https://b-rodrigues.github.io/posts/2021-09-05-speedrunning_rows.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=1UkeFwJ-yHI"> <img src="https://b-rodrigues.github.io/assets/img/cringe_speedrun.png" title="Doom's first level in 8 seconds"></a>
</p>
</div>
<p>
<em>If you haven’t, you should read <a href="../posts/2021-09-04-quest_fast.html">this</a> first. This is part two.</em>
</p>
<p>
Speedrunning is the… hrm… - sport? art? - of playing games from start to finish as fast as possible. Speedrunning requires an insane amount of knowledge of the game being played, as well as an enourmous amount of skill. Also, contrary to what you might think, it is a community effort. Players do speedrun the game alone, and it is a ferocious competition, each one of them aiming for the top spot on the leaderboards. But discovering the strategies that will allow the top players to shave off, sometimes literally, hundredths of seconds from the previous world record require many, many, people from the speedrunning community trying to break the games in new ways, or testing how fast <em>theoretical</em> strategies using computers that play the game perfectly are (these type of speedruns are called TAS, for Tool Assisted Speedrun, and are a very important part of the speedrunning effort).
</p>
<p>
If you read until here, I commend you dear reader, and thank you for not having already closed the tab. The meat of the post is coming.
</p>
<p>
If you don’t know anything about speedrunning, I can only urge you to watch <a href="https://www.youtube.com/watch?v=7rIJNT7dCmE">this video</a> about the story of the Super Mario Bros.&nbsp;World Records. If you’re more into Doom, then watch <a href="https://www.youtube.com/watch?v=rqbc4nTivlg">this video</a> abut the history of Doom 2 World Records. It really is worth your time, believe me.
</p>
<p>
Anyways, why am I talking about this? What is the point of this blog post? Isn’t this a blog about <em>Econometrics and Free Software</em> (lol)?
</p>
<p>
The reason I’m talking about speedrunning in video games, is because my <a href="../posts/2021-09-04-quest_fast.html">previous blog post</a> sparked an interesting discussion on <a href="https://twitter.com/brodriguesco/status/1434076568649969665">twitter</a>, which very much reminded me of what you’d see in the speedrunning community.
</p>
<p>
Just like in speedrunning, I tried to play a game which consisted in running an arbitrary function over the rows of a data frame, and employed some basic strategies for it. As a reminder, here is the example code with the top two strategies: using <code>apply()</code> and a combination of <code>asplit()</code> and <code>map()</code> (I won’t be showing all the code here, it’s the same as in the <a href="https://www.brodrigues.co/blog/2021-09-04-quest_fast/">previous blog post</a>):
</p>
<pre class="r"><code>run_apply &lt;- function(dataset, my_function = my_function){

  dataset %&gt;%
    mutate(score = apply(., MARGIN = 1, my_function))

}

run_map &lt;- function(dataset, my_function = my_function){
  dataset %&gt;%
    mutate(score = map_dbl(asplit(., 1), .f = my_function))
}</code></pre>
<p>
Also, just as a reminder, here is the <code>rowwise()</code> approach:
</p>
<pre class="r"><code>run_rowwise &lt;- function(dataset, my_function = my_function){
  dataset %&gt;%
    rowwise() %&gt;%
    mutate(score = my_function(c_across(everything()))) %&gt;%
    ungroup()
}</code></pre>
<p>
This is, AFAIK, the <em>official</em> tidyverse-approach, but not the fastest. However, while it is slower than the two approaches above, it does have the advantage that you can run the function over the rows, but only by using certain columns instead of all of them. For example, to apply the function over only the columns that start with the letter “c” (and for each row), you could write this:
</p>
<pre class="r"><code>run_rowwise &lt;- function(dataset, my_function = my_function){
  dataset %&gt;%
    rowwise() %&gt;%
    mutate(score = my_function(c_across(starts_with("c")))) %&gt;%
    ungroup()
}</code></pre>
<p>
This is not possible with the two fast approaches, <code>run_map()</code> and <code>run_apply()</code>. These two approaches do run quite fast, but in the twitter discussion I linked above, many more suggestions were made, and some are likely faster, so let’s see! There’s first an approach using <code>pmap()</code> proposed by both <a href="https://twitter.com/lgaborini/status/1434138358381481989"><code><span class="citation" data-cites="lgaborini">@lgaborini</span></code></a> and <a href="https://twitter.com/JoeWasserman/status/1434175452457930755"><code>@</code>JoeWasserman</a>:
</p>
<pre class="r"><code>run_pmap &lt;- function(dataset, my_function = my_function){
  dataset %&gt;%
    mutate(score = pmap_dbl(., .f = lift_vd(my_function)))

}</code></pre>
<p>
I won’t go into the details here of how and why this works. For more details, <a href="https://github.com/jennybc/row-oriented-workflows/blob/master/ex09_row-summaries.md#how-to-use-an-arbitrary-function-inside-pmap">click here</a>. In any case, this does not run faster that the two approaches listed above. But it does run faster than using <code>rowwise()</code> and also allows for selecting columns over which to run the function:
</p>
<pre class="r"><code>run_pmap &lt;- function(dataset, my_function = my_function){
  dataset %&gt;%
    mutate(score = pmap_dbl(select(., matches(".(4|5|6)")), .f = lift_vd(mean)))

}

run_pmap(dataset) %&gt;%
  head</code></pre>
<pre><code>## # A tibble: 6 × 7
##       x1     x2     x3    x4    x5     x6 score
##    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
## 1 0.0644 0.789  0.489  0.665 0.664 0.230  0.520
## 2 0.771  0.209  0.443  0.248 0.756 0.0164 0.340
## 3 0.342  0.0382 0.619  0.196 0.115 0.783  0.365
## 4 0.638  0.915  0.0472 0.891 0.346 0.639  0.625
## 5 0.0366 0.601  0.426  0.421 0.835 0.906  0.721
## 6 0.0465 0.937  0.260  0.803 0.376 0.330  0.503</code></pre>
<p>
So this is quite useful!
</p>
<p>
There was another proposal, a pure base approach, by <a href="https://twitter.com/grant_mcdermott/status/1434278563994169344"><code><span class="citation" data-cites="grant_mcdermott">@grant_mcdermott</span></code></a>:
</p>
<pre class="r"><code>run_pure_base &lt;- function(dataset, my_function = my_function){
  dataset |&gt;
    within({score = sapply(asplit(dataset, 1), my_function)})
}</code></pre>
<p>
It even uses the new, shiny (haha), native pipe, |&gt;! I have not benchmarked this yet, as I’m writing this, so let’s see…
</p>
<p>
Finally, there is also a <code>{data.table}</code> approach, proposed by <a href="https://twitter.com/thatpinkney/status/1434289185532297219?s=20"><code><span class="citation" data-cites="thatpinkney">@thatpinkney</span></code></a>:
</p>
<pre class="r"><code>library(data.table)

run_dt2 &lt;- function(dataset, my_function = my_function){

  dataset &lt;- as.data.table(dataset)
  dataset[, rowid := .I]
  dataset[, ":=" (score = melt(dataset, id.vars = "rowid")[, my_function(value), by = rowid][, V1],
                  rowid = NULL)]

}</code></pre>
<p>
The problem of this approach, at least to me, is that I do not know <code>{data.table}</code>, which is the reason why I did not include it in the previous blog post. But I have read many times that <code>{data.table}</code> is blazing fast, so I definitely should learn at least some basics!
</p>
<p>
Now is benchmarking time. Let’s see (I’m not considering <code>run_pmap()</code>, because I already benchmarked it before writing this blog post, and know that it runs slower than the <code>run_map()</code> or <code>run_apply()</code>):
</p>
<pre class="r"><code>list_datasets &lt;- map(seq(2, 5), ~init_pop(objective_function = my_function,
                                          pop_size = `^`(10, .x)))


run_benchmarks &lt;- function(dataset, times = 5){
  microbenchmark::microbenchmark(
                    run_apply(dataset, my_function = my_function),
                    run_pure_base(dataset, my_function = my_function),
                    run_dt2(dataset, my_function = my_function),
                    run_map(dataset, my_function = my_function),
                    times = times,
                    unit = "s"
                  )
}</code></pre>
<pre class="r"><code>benchmark_results &lt;- map(list_datasets, run_benchmarks)

benchmark_data &lt;- map2(.x = benchmark_results, .y = 10^seq(2, 5), .f = ~mutate(tibble(.x), pop_size = .y)) %&gt;%
  bind_rows() %&gt;%
  mutate(expr = str_remove_all(expr, "\\(.*\\)")) %&gt;%
  group_by(expr, pop_size) %&gt;%
  mutate(time_seconds = time/10^9) %&gt;%
  summarise(fastest_run = min(time_seconds),
            average_run = mean(time_seconds),
            slowest_run = max(time_seconds))</code></pre>
<pre><code>## `summarise()` has grouped output by 'expr'. You can override using the `.groups` argument.</code></pre>
<pre class="r"><code>benchmark_data %&gt;%
  ggplot(aes(y = average_run, x = pop_size)) +
  geom_ribbon(aes(ymin = fastest_run, ymax = slowest_run, fill = expr), alpha = .6) +
  geom_line(aes(group = expr, col = expr)) +
  ylab("Seconds") +
  xlab("Rows in the dataset") +
  ggtitle("Speed of rowwise operations using different methods") +
  theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/speedrunning_rows-13-1.png" width="672">
</p>
<p>
These are really interesting results! The <em>pure</em> base solution runs almost as fast as the one that uses <code>asplit()</code> and <code>map()</code>. The one that uses <code>apply()</code> only is a close second, but all these strategies get obliterated by the <code>{data.table}</code> solution!
</p>
<p>
So, what have we learned?
</p>
<ul>
<li>
First of all, the #RStats community is really great! I’m really blown away by the interest that my previous blog post generated and by the very interesting discussion that ensued.
</li>
<li>
Second, if speed is really paramount to solving your problem, you’d probably want to use <code>{data.table}</code>. It does seem to be incredibly fast!
</li>
<li>
Third, and final point, if you need to run rowwise operations, but only over certain columns, use <code>pmap()</code> instead of <code>rowwise()</code> - <code>across()</code> - <code>everything()</code>.
</li>
</ul>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2021-09-05-speedrunning_rows.html</guid>
  <pubDate>Sun, 05 Sep 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The quest for fast(er?) row-oriented workflows</title>
  <link>https://b-rodrigues.github.io/posts/2021-09-04-quest_fast.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=erlWsquoHlM"> <img src="https://b-rodrigues.github.io/assets/img/bell_curve_tidyverse.png" title="Like and subscribe" width="80%" height="auto"></a>
</p>
</div>
<p>
<em>Part 2 of this blog post is available <a href="../posts/2021-09-05-speedrunning_rows.html">here</a></em>
</p>
<p>
The past few weeks I have been exploring the speed of R. It started with <a href="https://www.youtube.com/watch?v=erlWsquoHlM">this video</a> in which I explained that R is not necessarily slower than any other interpreted language, as long as you’re using the built-in, optimized functions. However should you write your own implementation of an algorithm, especially if that algorithm requires the use of one (or more…) loops, it’ll run slowly. As I’ve also mentioned in two other videos, <a href="https://www.youtube.com/watch?v=3xIKZbZKCWQ">here</a> and <a href="https://www.youtube.com/watch?v=vxaKamox_CQ">here</a> there are many ways to avoid loops, and you should do so if possible.
</p>
<p>
To continue exploring this is in more detail, I’ve written two very basic implementations of a genetic algorithm. The first version uses only <code>{tidyverse}</code> functions and the other only base R functions. My intuition was that base would be faster, but the code would likely be less “readable” (I discuss this code in greater detail in a series of videos, you can watch <a href="https://www.youtube.com/watch?v=bNh2WDdRleI">part 1</a> and <a href="https://www.youtube.com/watch?v=KynDephKNz4">part 2</a> if you’re interested in the nitty-gritty details). Code readability is quite subjective, but I think that there are some general “truths” regarding it, namely that it seems to often be that case that fast code is code that is “less” readable, and vice-versa. This blog post explores this trade-off in the context of row-oriented workflows.
</p>
<p>
Once I was done writing the two versions of the genetic algorithm for the video (a <code>{tidyverse}</code> one and a base one), I profiled the code and realised that, yes base was much much faster, but also that the reason the <code>{tidyverse}</code> version was running so slowly was because of one single row-based operation. Trying to replace this row-based operation, but remaining inside the <code>{tidyverse}</code> made for an interesting challenge. I will explain what I did in this blog post, so first let’s set up the example:
</p>
<pre class="r"><code>library(tidyverse)
library(brotools)</code></pre>
<p>
Let’s first generate some data. For this, I’m going to use a function I wrote for my genetic algorithm. I won’t explain how it works, so if you’re curious, you can watch the videos I mention in the introduction where this is all explained in detail:
</p>
<pre class="r"><code>init_pop &lt;- function(objective_function, pop_size = 100, upper_bound = 1, lower_bound = 0){

  parameters &lt;- formals(objective_function)[[1]] %&gt;%
    eval

  purrr::rerun(length(parameters), runif(n = pop_size,
                                         min = lower_bound,
                                         max = upper_bound)) %&gt;%
    dplyr::bind_cols() %&gt;%
    janitor::clean_names()

}</code></pre>
<p>
This function takes another function, the objective function to be optimized, as an argument, and checks how many parameters this objective functions has, and generates a population of random solutions (if you don’t understand what this all means don’t worry. What matters is that this generates a random dataset whith as many columns as the objective function has arguments).
</p>
<p>
The next function is my objective function:
</p>
<pre class="r"><code>my_function &lt;- function(x = c(0, 0, 0, 0, 0, 0)){
  x1 &lt;- x[1]
  x2 &lt;- x[2]
  x3 &lt;- x[3]
  x4 &lt;- x[4]
  x5 &lt;- x[5]
  x6 &lt;- x[6]

  -(x1**2 + x2 - 11)**2 - (x1 + x2**2 - 7)**2 - (x3**3 + x4 - 11)**2 - (x5 + x6**2 - 7)**2
}</code></pre>
<p>
(This is not the same as in the videos, which only has two arguments.)
</p>
<p>
Let’s generate some data:
</p>
<pre class="r"><code>dataset &lt;- init_pop(my_function) %&gt;%
  as.data.frame()</code></pre>
<pre class="r"><code>head(dataset)</code></pre>
<pre><code>##          x1        x2          x3        x4         x5        x6
## 1 0.3045714 0.1436057 0.003754794 0.9144551 0.53070392 0.6127125
## 2 0.3155244 0.8890011 0.556325257 0.5688512 0.02928638 0.5626903
## 3 0.8363487 0.6361570 0.667718047 0.4704217 0.10547741 0.5278469
## 4 0.8207208 0.1286540 0.189744816 0.3309174 0.76311349 0.7019268
## 5 0.7244419 0.1284358 0.235967085 0.8444759 0.38697023 0.9818212
## 6 0.2882561 0.9702481 0.983408531 0.1510577 0.84844059 0.7678110</code></pre>
<p>
Now, on the actual problem: I need to add another column, with the value of <code>my_function()</code>, evaluated on a per row basis. As an example, for the first row, this would be the result of:
</p>
<pre class="r"><code>my_function(dataset[1, ])</code></pre>
<pre><code>##          x1
## 1 -299.2624</code></pre>
<p>
Many people would probably solve this using a for loop, so let’s write a function to do just that (benchmarking will make it easier if the code is inside a function):
</p>
<pre class="r"><code>run_loop &lt;- function(dataset, my_function = my_function){

  dataset$score &lt;- 0

  for(i in seq(1, nrow(dataset))){

    dataset$score[i] &lt;- my_function(dataset[i, ])
  }

  dataset

}


run_loop(dataset, my_function = my_function) %&gt;%
  head</code></pre>
<pre><code>##          x1        x2          x3        x4         x5        x6     score
## 1 0.3045714 0.1436057 0.003754794 0.9144551 0.53070392 0.6127125 -299.2624
## 2 0.3155244 0.8890011 0.556325257 0.5688512 0.02928638 0.5626903 -284.4934
## 3 0.8363487 0.6361570 0.667718047 0.4704217 0.10547741 0.5278469  -275.027
## 4 0.8207208 0.1286540 0.189744816 0.3309174 0.76311349 0.7019268 -288.6529
## 5 0.7244419 0.1284358 0.235967085 0.8444759 0.38697023 0.9818212 -281.0109
## 6 0.2882561 0.9702481 0.983408531 0.1510577 0.84844059 0.7678110 -261.1376</code></pre>
<p>
The advantage of loops is that you don’t need to really know a lot about R to get it done; if you’ve learned some programming language some time during your studies, you learned about for loops. But they’re generally slower than other methods and error-prone (typos for example, or if you’re looping over several indeces, it can get quite complex…). And they’re, in my humble opinion, not always very easy to understand. This is not the case here, because it is quite a simple example, but often, it can get quite confusing to understand what is going on.
</p>
<p>
So what would be a more “R-specific” way of doing it (specific in the sense that it is not a universal solution like a for-loop), and which avoids using a loop? <code>apply()</code> would here be the best candidate:
</p>
<pre class="r"><code>apply(dataset, MARGIN = 1, FUN = my_function)</code></pre>
<pre><code>##   [1] -299.2624 -284.4934 -275.0270 -288.6529 -281.0109 -261.1376 -293.7069
##   [8] -264.7833 -270.6977 -258.5214 -299.6117 -275.8491 -306.8555 -284.7410
##  [15] -298.6167 -299.2872 -294.9865 -264.5808 -272.8924 -289.5542 -306.3602
##  [22] -293.4290 -305.9189 -276.9193 -286.1938 -291.7530 -289.3610 -290.8470
##  [29] -303.5995 -261.4664 -280.6596 -287.2716 -282.6859 -293.5323 -304.2287
##  [36] -286.9913 -258.3523 -275.9231 -304.3919 -250.9952 -286.7151 -255.0904
##  [43] -312.2109 -254.5034 -255.9284 -287.8201 -285.9853 -290.8199 -309.0086
##  [50] -311.4288 -271.1889 -299.3821 -290.1711 -281.0423 -294.1406 -275.8203
##  [57] -274.1912 -257.7994 -308.3508 -271.5294 -293.3045 -296.9122 -277.8800
##  [64] -296.9870 -314.1470 -270.0065 -288.3262 -252.3774 -263.9164 -286.9263
##  [71] -302.5980 -281.0731 -269.0754 -301.6335 -294.3153 -268.4932 -263.6926
##  [78] -306.9723 -271.8796 -292.6175 -294.0995 -303.4289 -280.5853 -277.6487
##  [85] -262.2476 -310.0217 -281.7774 -292.7697 -295.8509 -269.0880 -253.2403
##  [92] -279.8632 -293.0479 -258.1470 -303.6226 -306.4314 -293.4026 -275.8508
##  [99] -269.6470 -285.0784</code></pre>
<p>
Appending this to a dataframe can be done within a <code>mutate()</code> call (here again I’m encapsulating this inside a function, for benchmarking purposes):
</p>
<pre class="r"><code>run_apply &lt;- function(dataset, my_function = my_function){

  dataset %&gt;%
    mutate(score = apply(., MARGIN = 1, my_function))

}

run_apply(dataset, my_function = my_function) %&gt;%
  head()</code></pre>
<pre><code>##          x1        x2          x3        x4         x5        x6     score
## 1 0.3045714 0.1436057 0.003754794 0.9144551 0.53070392 0.6127125 -299.2624
## 2 0.3155244 0.8890011 0.556325257 0.5688512 0.02928638 0.5626903 -284.4934
## 3 0.8363487 0.6361570 0.667718047 0.4704217 0.10547741 0.5278469 -275.0270
## 4 0.8207208 0.1286540 0.189744816 0.3309174 0.76311349 0.7019268 -288.6529
## 5 0.7244419 0.1284358 0.235967085 0.8444759 0.38697023 0.9818212 -281.0109
## 6 0.2882561 0.9702481 0.983408531 0.1510577 0.84844059 0.7678110 -261.1376</code></pre>
<p>
<code>MARGIN = 1</code> means that the function is applied on the rows, whereas <code>MARGIN = 2</code> would apply the function over columns.
</p>
<p>
In terms of readability, I think that this is maybe a bit less readable than the for-loop, just because for-loops as very very ubiquitous. But it’s super simple once you understand how <code>apply()</code> works.
</p>
<p>
Now, what would be a <code>{tidyverse}</code>-only approach? And why would you want to do a <code>{tidyverse}</code>-only approach anyways? Generally, I would argue that scripts written using <code>{tidyverse}</code> functions and style are easier to read. For example, I tweeted this code snippet some time ago:
</p>
<pre class="r"><code>blogdown::shortcode("tweet",
                    "1431718740341764099"
                    )</code></pre>
<p>
{{% tweet “1431718740341764099” %}}
</p>
<p>
and in my opinion the example in my tweet shows clearly that the <code>{tidyverse}</code> code is more easily understood and readable. Of course, some people disagree… However, in this case here, I’m not sure that a <code>{tidyverse}</code> approach <em>would be more readable</em>. The solution using <code>apply()</code> seems to me to be quite good. Let’s see how the <code>{tidyverse}</code> approach, which leverages <code>rowwise()</code>, looks like:
</p>
<pre class="r"><code>run_rowwise &lt;- function(dataset, my_function = my_function){
  dataset %&gt;%
    rowwise() %&gt;%
    mutate(score = my_function(c_across(everything()))) %&gt;%
    ungroup()
}

run_rowwise(dataset, my_function = my_function) %&gt;%
  head()</code></pre>
<pre><code>## # A tibble: 6 × 7
##      x1    x2      x3    x4     x5    x6 score
##   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
## 1 0.305 0.144 0.00375 0.914 0.531  0.613 -299.
## 2 0.316 0.889 0.556   0.569 0.0293 0.563 -284.
## 3 0.836 0.636 0.668   0.470 0.105  0.528 -275.
## 4 0.821 0.129 0.190   0.331 0.763  0.702 -289.
## 5 0.724 0.128 0.236   0.844 0.387  0.982 -281.
## 6 0.288 0.970 0.983   0.151 0.848  0.768 -261.</code></pre>
<p>
This runs, but much, much, more slower than with <code>apply()</code> (but faster than a for-loop, as we shall see) . Plus, it does look much, much more complicated than the simple <code>apply()</code> version! So why do it like this? You even need several functions - <code>rowwise()</code>, <code>c_across()</code> and <code>everything()</code> - to make it work! So why? Well, there is one use case in which this approach enables you to do something that I don’t think is possible (or at least easily possible) with <code>apply()</code> which is applying the function, but only over certain columns. For example, if you want to apply the function only over the columns which names all start with the letter “c”, you could write something like this:
</p>
<pre class="r"><code>mtcars %&gt;%
  rowwise() %&gt;%
  mutate(score = mean(c_across(starts_with("c")))) %&gt;%
  ungroup()</code></pre>
<pre><code>## # A tibble: 32 × 12
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb score
##    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4   5  
##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4   5  
##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1   2.5
##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1   3.5
##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2   5  
##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1   3.5
##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4   6  
##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2   3  
##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2   3  
## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4   5  
## # … with 22 more rows</code></pre>
<p>
Now this is not needed here, so <code>apply()</code> clearly wins in terms readability (and speed as well). But in cases like the above, where you need to compute only over several columns, I think that the <code>{tidyverse}</code> version not only is very readible, but actually offers a solution to the problem. I’m not quite sure you could solve this easily with base, but please prove me wrong.
</p>
<p>
In any case, there’s another way to approach our original problem using <code>{tidyverse}</code> functions, but we still need the help of a base function.
</p>
<p>
The next approach uses the fact that <code>map()</code> needs both a list and a function as an input. As a refresher, here’s how map works:
</p>
<pre class="r"><code># We have a list

my_list &lt;- list("a" = 2,
                "b" = 4)

# and we have a function, say sqrt, which we want to apply to each element of this list

map(my_list, sqrt)</code></pre>
<pre><code>## $a
## [1] 1.414214
## 
## $b
## [1] 2</code></pre>
<p>
So what we need is a way to mimick the basic approach which works on one “element” (in this case, a row of the dataframe), and extend that idea to a “list of rows”. Now, the issue is that a dataframe is actually a list of columns, not rows. So if you’re using <code>map()</code> over a dataframe, you will be looping over the columns, not the rows, as in the example below:
</p>
<pre class="r"><code># This applies the function class() to each colum of mtcars
mtcars %&gt;%
  map(class)</code></pre>
<pre><code>## $mpg
## [1] "numeric"
## 
## $cyl
## [1] "numeric"
## 
## $disp
## [1] "numeric"
## 
## $hp
## [1] "numeric"
## 
## $drat
## [1] "numeric"
## 
## $wt
## [1] "numeric"
## 
## $qsec
## [1] "numeric"
## 
## $vs
## [1] "numeric"
## 
## $am
## [1] "numeric"
## 
## $gear
## [1] "numeric"
## 
## $carb
## [1] "numeric"</code></pre>
<p>
Now the question becomes; is there a way to turn a dataframe, which is a list of columns, into a list of rows? Yes, there is, using <code>asplit()</code>:
</p>
<pre class="r"><code>asplit(mtcars, MARGIN = 1) %&gt;%
  head()</code></pre>
<pre><code>## $`Mazda RX4`
##    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb 
##  21.00   6.00 160.00 110.00   3.90   2.62  16.46   0.00   1.00   4.00   4.00 
## 
## $`Mazda RX4 Wag`
##     mpg     cyl    disp      hp    drat      wt    qsec      vs      am    gear 
##  21.000   6.000 160.000 110.000   3.900   2.875  17.020   0.000   1.000   4.000 
##    carb 
##   4.000 
## 
## $`Datsun 710`
##    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb 
##  22.80   4.00 108.00  93.00   3.85   2.32  18.61   1.00   1.00   4.00   1.00 
## 
## $`Hornet 4 Drive`
##     mpg     cyl    disp      hp    drat      wt    qsec      vs      am    gear 
##  21.400   6.000 258.000 110.000   3.080   3.215  19.440   1.000   0.000   3.000 
##    carb 
##   1.000 
## 
## $`Hornet Sportabout`
##    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb 
##  18.70   8.00 360.00 175.00   3.15   3.44  17.02   0.00   0.00   3.00   2.00 
## 
## $Valiant
##    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb 
##  18.10   6.00 225.00 105.00   2.76   3.46  20.22   1.00   0.00   3.00   1.00</code></pre>
<p>
<code>asplit()</code> splits a dataframe along rows (with the MARGIN argument set to 1) or along columns (with MARGIN = 2). As you can see with the code above, the <code>mtcars</code> dataset is now a list of rows. Each element of this list is a single vector of values. Now that my dataframe is now a list of rows, well, I can simply use <code>map()</code> to apply any function over its rows:
</p>
<pre class="r"><code>run_map &lt;- function(dataset, my_function = my_function){
  dataset %&gt;%
    mutate(score = map_dbl(asplit(., 1), .f = my_function))
}

run_map(dataset, my_function = my_function) %&gt;%
  head()</code></pre>
<pre><code>##          x1        x2          x3        x4         x5        x6     score
## 1 0.3045714 0.1436057 0.003754794 0.9144551 0.53070392 0.6127125 -299.2624
## 2 0.3155244 0.8890011 0.556325257 0.5688512 0.02928638 0.5626903 -284.4934
## 3 0.8363487 0.6361570 0.667718047 0.4704217 0.10547741 0.5278469 -275.0270
## 4 0.8207208 0.1286540 0.189744816 0.3309174 0.76311349 0.7019268 -288.6529
## 5 0.7244419 0.1284358 0.235967085 0.8444759 0.38697023 0.9818212 -281.0109
## 6 0.2882561 0.9702481 0.983408531 0.1510577 0.84844059 0.7678110 -261.1376</code></pre>
<p>
So we now have 4 approaches to solve the issue:
</p>
<ul>
<li>
<code>run_loop()</code>: uses a for-loop
</li>
<li>
<code>run_apply()</code>: uses <code>apply()</code>, a base R function
</li>
<li>
<code>run_rowwise()</code>: a “pure” <code>{tidyverse}</code> approach
</li>
<li>
<code>run_map()</code>: a cross between a <code>{tidyverse}</code> and a base approach
</li>
</ul>
<p>
Let’s set up a function to run some benchmarks and see which runs faster. I’ll create a list of increasingly large data frames over which I’ll run all the above functions:
</p>
<pre class="r"><code>list_datasets &lt;- map(seq(2, 5), ~init_pop(objective_function = my_function,
                                          pop_size = `^`(10, .x)))</code></pre>
<p>
The function below will run the benchmarks over all the data frames:
</p>
<pre class="r"><code>run_benchmarks &lt;- function(dataset, times = 5){
  microbenchmark::microbenchmark(
                    run_loop(dataset, my_function = my_function),
                    run_apply(dataset, my_function = my_function),
                    run_rowwise(dataset, my_function = my_function),
                    run_map(dataset, my_function = my_function),
                    times = times,
                    unit = "s"
                  )
}</code></pre>
<p>
I’ll run this in parallel using <code>{furrr}</code>:
</p>
<pre class="r"><code>library(furrr)

plan(multisession, workers = 2)

benchmark_results &lt;- future_map(list_datasets, run_benchmarks)</code></pre>
<p>
Let’s take a look at the results:
</p>
<pre class="r"><code>benchmark_data &lt;- map2(.x = benchmark_results, .y = 10^seq(2, 5), .f = ~mutate(tibble(.x), pop_size = .y)) %&gt;%
  bind_rows() %&gt;%
  mutate(expr = str_remove_all(expr, "\\(.*\\)")) %&gt;%  
  group_by(expr, pop_size) %&gt;%
  mutate(time_seconds = time/10^9) %&gt;%
  summarise(fastest_run = min(time_seconds),
            average_run = mean(time_seconds),
            slowest_run = max(time_seconds))</code></pre>
<pre><code>## `summarise()` has grouped output by 'expr'. You can override using the `.groups` argument.</code></pre>
<pre class="r"><code>benchmark_data %&gt;%
  ggplot(aes(y = average_run, x = pop_size)) +
  geom_ribbon(aes(ymin = fastest_run, ymax = slowest_run, fill = expr), alpha = .6) +
  geom_line(aes(group = expr, col = expr)) +
  ylab("Seconds") +
  xlab("Rows in the dataset") +
  ggtitle("Speed of rowwise operations using different methods") +
  theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/quest_fast-24-1.png" width="80%" height="auto">
</p>
<p>
Using a for-loop for row-wise operations is clearly the slowest solution. Let’s take a closer look at the remaining 3 options:
</p>
<pre class="r"><code>benchmark_data %&gt;%
  filter(!grepl("loop", expr)) %&gt;% 
  ggplot(aes(y = average_run, x = pop_size)) +
  geom_ribbon(aes(ymin = fastest_run, ymax = slowest_run, fill = expr), alpha = .6) +
  ylab("Seconds") +
  xlab("Rows in the dataset") +
  ggtitle("Speed of rowwise operations using different methods") +
  theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/quest_fast-25-1.png" width="80%" height="auto">
</p>
<p>
<code>rowwise()</code> loses here, but unless you have to literally run such code hundreds of times, it is still tolerable. Gives you enough time to browse some memes. But if you have to run such operations millions of times, you might want to look at either using <code>apply()</code> or the other approach that uses <code>asplit()</code> and <code>map()</code>. Let’s take a closer look at these two:
</p>
<pre class="r"><code>benchmark_data %&gt;%
  filter(!grepl("loop|rowwise", expr)) %&gt;%
  ggplot(aes(y = average_run, x = pop_size)) +
  geom_ribbon(aes(ymin = fastest_run, ymax = slowest_run, fill = expr), alpha = .6) +
  geom_line(aes(group = expr, col = expr)) +
  ylab("Seconds") +
  xlab("Rows in the dataset") +
  ggtitle("Speed of rowwise operations using different methods") +
  theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/quest_fast-26-1.png" width="80%" height="auto">
</p>
<p>
Interestingly, the fastest run using <code>map()</code> was faster than the fastest run using <code>apply()</code>, but on average, both methods seem to be equivalent. In conclusion, if you need speed and you need to compute over every column <code>apply()</code> is a clear winner. But if you need row-wise operations, but only on a subset of columns, <code>rowwise()</code>, even though it is slow, seems to be the only solution.
</p>
<p>
I wonder if there is a way to use <code>c_across()</code> with the <code>map()</code> approach, and potentially have the benefits of <code>map()</code> (as fast as <code>apply()</code>) and <code>rowwise()</code> (computing only over certain columns…). Another subject to explore later.
</p>
<p>
<em>Part 2 of this blog post is available <a href="../posts/2021-09-05-speedrunning_rows.html">here</a></em>
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2021-09-04-quest_fast.html</guid>
  <pubDate>Sat, 04 Sep 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Is it worth the weight?</title>
  <link>https://b-rodrigues.github.io/posts/2021-07-30-worth_weight.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=Jt0w9YP_wZ0"> <img src="https://b-rodrigues.github.io/assets/img/gaben.jpg" title="Will we ever see Half Life 3?" width="80%" height="auto"></a>
</p>
</div>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">
Intro
</h2>
<p>
Oh man, I did it again. Grab a coffee, this is going to be a long one.
</p>
<p>
Weights got me confused. The justification for using weights seems simple enough; if you’re working with a sample in which one (or more) strata are over(under)-represented, you should compute weighted univariate statistics. I’ve discussed this already <a href="../posts/2021-04-17-post_strat.html">here</a>.
</p>
<p>
But what about regression and prediction? There does not seem to be a consensus in the literature. So I wanted to experiment with some data and see if it would help.
</p>
<p>
Spoiler alert: I’m more confused now than before, so maybe stop reading here. But maybe, by reading this blog post, dear reader, you might spot where I am confused and help me? Any help, comments, etc. more than welcome.
</p>
<p>
Anyway, let’s start by loading the required packages:
</p>
<pre class="r"><code>library("dplyr")
library("rsample")
library("yardstick")
library("readr")
library("janitor")
library("lubridate")
library("broom")
library("purrr")</code></pre>
<p>
and also the required dataset. This is a dataset that I have already featured in one of my previous blog posts <a href="https://www.brodrigues.co/blog/2020-02-23-synthpop/">here</a>, a blog post about synthetic datasets. I’ll reuse the description from this other blog post here:
</p>
<p>
<em>The Survey on the Population in Relation to Activity operation is a continuous source of information on the characteristics and dynamics of the labour force of the Basque Country. It records the relation to productive activity of the population resident in family households, as well as the changes produced in labour situations; it produces indicators of conjunctural variations in the evolution of the active population; it also estimates the degree of participation of the population in economically non-productive activities. It offers information on the province and capital level.</em>
</p>
<p>
To make it easy for you to follow along, I have re-uploaded the data <a href="https://raw.githubusercontent.com/rbind/b-rodrigues.github.com/master/public/assets/MICRO_PRA_2021_1.csv">here</a>. For the purposes of my analysis, I’ll be focusing on the “Hours Worked” variable. I’ll also assume that the dataset is the entire, complete population, and that I will have to deal with unbiased, randomly sampled individuals, but also with samples that are not randomly sampled.
</p>
<p>
Let’s read in the data, rename the columns and do some basic data cleaning:
</p>
<pre class="r"><code>population &lt;- read_csv2("https://raw.githubusercontent.com/rbind/b-rodrigues.github.com/master/public/assets/MICRO_PRA_2021_1.csv")</code></pre>
<pre><code>## ℹ Using "','" as decimal and "'.'" as grouping mark. Use `read_delim()` for more control.</code></pre>
<pre><code>## Rows: 12757 Columns: 33</code></pre>
<pre><code>## ── Column specification ──────────────────────────────────────────────────────────────────────────────────────────────────────────────
## Delimiter: ";"
## chr (10): TERH, EDAD, ENRE, FOCU, BUSQ, GBUSQ, FBUSQ, DISP, PRA2, RACT
## dbl (23): NUMH, AENC, TENC, MUNI, SEXO, LNAC, NACI, LEST, SJUB, SILH, EMPTP,...</code></pre>
<pre><code>## 
## ℹ Use `spec()` to retrieve the full column specification for this data.
## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
<pre class="r"><code>col_names_english &lt;- c(
  "Household number",
  "Year of survey",
  "Reference quarter",
  "Province",
  "Capital",
  "Sex",
  "Place of birth",
  "Age",
  "Nationality",
  "Level of education",
  "Formal education system",
  "Professional training",
  "Retirement situation",
  "Household duties situation",
  "Part-time employment",
  "Reason for reduced worknig hours",
  "Job search",
  "Reasons for seeking employment",
  "Working hours sought",
  "Carry out employment seeking activities",
  "Main employment seeking method",
  "Months seeking employment",
  "Availability",
  "Relation to activity (ILO)",
  "Relation to activity",
  "Main occupation",
  "Main activity",
  "Main professional situation",
  "Main institutional sector",
  "Type of contract",
  "Hours worked",
  "Relationship",
  "Elevator")

 colnames(population) &lt;- col_names_english

population &lt;- population %&gt;%
  clean_names() %&gt;%
  filter(!is.na(hours_worked)) %&gt;%
  filter(!is.na(part_time_employment)) %&gt;%
  mutate(part_time_employment = ifelse(part_time_employment == 1, "Working full time", "Working part time")) %&gt;%
  mutate(type_of_contract = ifelse(is.na(type_of_contract), "Unknown", type_of_contract)) %&gt;%
  mutate(sex = ifelse(sex == 1, "Male", "Female")) %&gt;%
  mutate(age_group = case_when(between(age, 4, 7) ~ "1",
                               between(age, 8, 12) ~ "2",
                               age &gt; 12 ~ "3")) %&gt;%
  mutate(type_of_contract = ifelse(type_of_contract %in% c(seq(2, 4), 6), "Other", type_of_contract)) %&gt;%  
  select(capital,
         sex,
         age_group,
         level_of_education,
         part_time_employment,
         type_of_contract,
         hours_worked) %&gt;%
  mutate(across(-hours_worked, as.factor)) %&gt;%
  mutate(id = row_number())</code></pre>
<p>
Let’s put some data on the side, for later:
</p>
<pre class="r"><code>holdout &lt;- population %&gt;%
  sample_n(300)

population &lt;- population %&gt;%
  filter(!(id %in% holdout$id))</code></pre>
<p>
This holdout set will be useful later on. I’m now going to compute some sampling weights. This weights will make it easy for me to select biased samples, where part-time workers are over-represented:
</p>
<pre class="r"><code>set.seed(1234)
beta0 &lt;- -3.6
beta1 &lt;- 2.63
population &lt;- population %&gt;%
  mutate(pi_x = exp(beta0 + beta1 * I(part_time_employment == "Working part time")) / (1 + exp(beta0 + beta1 * I(part_time_employment == "Working part time"))))</code></pre>
<p>
By the way, I’ve found this code <a href="https://stats.stackexchange.com/questions/12857/generate-random-correlated-data-between-a-binary-and-a-continuous-variable/12858#12858">here</a>.
</p>
<p>
Let’s see what happens when I randomly sample from the population and compute some basic frequencies, and then what happens when I sample using the weights. First, the true frequencies of part-time and full-time workers, on the complete population:
</p>
<pre class="r"><code>population %&gt;%
  tabyl(part_time_employment)</code></pre>
<pre><code>##  part_time_employment    n   percent
##     Working full time 4107 0.8204155
##     Working part time  899 0.1795845</code></pre>
<p>
Now, on a random sample:
</p>
<pre class="r"><code>sample_n(population, 1000) %&gt;%
  tabyl(part_time_employment)</code></pre>
<pre><code>##  part_time_employment   n percent
##     Working full time 823   0.823
##     Working part time 177   0.177</code></pre>
<p>
Pretty much the same value, now what happens when I don’t have a random sample:
</p>
<pre class="r"><code>sample_n(population, 1000, weight = pi_x) %&gt;%
  tabyl(part_time_employment)</code></pre>
<pre><code>##  part_time_employment   n percent
##     Working full time 409   0.409
##     Working part time 591   0.591</code></pre>
<p>
This might seem obvious, since I have computed the weights such as to over-represent part-time workers. But this problem also affects other variables:
</p>
<pre class="r"><code>sample_n(population, 1000) %&gt;%
  tabyl(sex)</code></pre>
<pre><code>##     sex   n percent
##  Female 471   0.471
##    Male 529   0.529</code></pre>
<pre class="r"><code>sample_n(population, 1000, weight = pi_x) %&gt;%
  tabyl(sex)</code></pre>
<pre><code>##     sex   n percent
##  Female 633   0.633
##    Male 367   0.367</code></pre>
<p>
Because more women work part-time than men, women are now over-represented. The age structure is also different:
</p>
<pre class="r"><code>sample_n(population, 1000) %&gt;%
  tabyl(age_group)</code></pre>
<pre><code>##  age_group   n percent
##          1 181   0.181
##          2 726   0.726
##          3  93   0.093</code></pre>
<pre class="r"><code>sample_n(population, 1000, weight = pi_x) %&gt;%
  tabyl(age_group)</code></pre>
<pre><code>##  age_group   n percent
##          1 215   0.215
##          2 662   0.662
##          3 123   0.123</code></pre>
<p>
And what about what interests us, the hours worked?
</p>
<pre class="r"><code>sample_n(population, 1000) %&gt;%
  summarise(mean(hours_worked))</code></pre>
<pre><code>## # A tibble: 1 × 1
##   `mean(hours_worked)`
##                  &lt;dbl&gt;
## 1                 29.9</code></pre>
<pre class="r"><code>sample_n(population, 1000, weight = pi_x) %&gt;%
  summarise(mean(hours_worked))</code></pre>
<pre><code>## # A tibble: 1 × 1
##   `mean(hours_worked)`
##                  &lt;dbl&gt;
## 1                 23.1</code></pre>
<p>
Ok, so this is bad, and the way to deal with it would be to computed post-stratification weights.
</p>
<p>
But let’s go a bit further and see what happens if I rerun this a 1000 times. Maybe I just got very unlucky with my non-random sample? With another sample, maybe things wouldn’t be so bad?
</p>
<pre class="r"><code>true_mean &lt;- mean(population$hours_worked)

random_samples &lt;- rerun(1000, sample_n(population, 1000))

hours_worked_random_samples &lt;- map_df(.x = random_samples,
                                      ~summarise(.x, mean_hours_worked = mean(hours_worked)))

hours_worked_random_samples %&gt;%
  summarise(mean(mean_hours_worked), sd(mean_hours_worked))</code></pre>
<pre><code>## # A tibble: 1 × 2
##   `mean(mean_hours_worked)` `sd(mean_hours_worked)`
##                       &lt;dbl&gt;                   &lt;dbl&gt;
## 1                      29.8                   0.393</code></pre>
<pre class="r"><code>hours_worked_random_samples %&gt;%
  ggplot() +
  geom_density(aes(x = mean_hours_worked)) +
  geom_vline(xintercept = true_mean)</code></pre>
<pre><code>## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): X11 used font
## size 25 when 29 was requested</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/worth_weight-12-1.png" width="80%" height="auto">
</p>
<p>
We see that the distribution is centered around the true mean. What about a 1000 biased samples?
</p>
<pre class="r"><code>biased_samples &lt;- rerun(1000, sample_n(population, 1000, weight = pi_x))

hours_worked_biased_samples &lt;- map_df(.x = biased_samples,
                                      ~summarise(.x, mean_hours_worked = mean(hours_worked)))

hours_worked_biased_samples %&gt;%
  summarise(mean(mean_hours_worked), sd(mean_hours_worked))</code></pre>
<pre><code>## # A tibble: 1 × 2
##   `mean(mean_hours_worked)` `sd(mean_hours_worked)`
##                       &lt;dbl&gt;                   &lt;dbl&gt;
## 1                      23.4                   0.355</code></pre>
<pre class="r"><code>hours_worked_biased_samples %&gt;%
  ggplot() +
  geom_density(aes(x = mean_hours_worked)) +
  geom_vline(xintercept = true_mean)</code></pre>
<pre><code>## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : X11
## used font size 25 when 29 was requested</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/worth_weight-13-1.png" width="80%" height="auto">
</p>
<p>
Clearly, the average hours worked are consistently under-estimated. So it’s not a matter of being unlucky with one particular sample.
</p>
<p>
But what about other tasks, such as prediction and regression? What is the impact there? This is where I started getting confused.
</p>
</section>
<section id="regression-and-prediction-with-weights" class="level2">
<h2 class="anchored" data-anchor-id="regression-and-prediction-with-weights">
Regression and prediction (with weights?)
</h2>
<p>
Let me first write a function that will do a bunch of things:
</p>
<ul>
<li>
split the data into training and testing sets
</li>
<li>
run a linear regression
</li>
<li>
predict on the testing set
</li>
<li>
return the rmse, the coefficients and the model
</li>
</ul>
<pre class="r"><code>run_regression &lt;- function(dataset){

  split_unbiased_data &lt;- initial_split(dataset, prop = 0.9)

  training_unbiased_data &lt;- training(split_unbiased_data)

  testing_unbiased_data &lt;- testing(split_unbiased_data)

  linear_model &lt;- lm(hours_worked ~ capital +
                       sex +
                       age_group +
                       level_of_education +
                       part_time_employment +
                       type_of_contract,
                     data = training_unbiased_data)

  lm_predictions &lt;- predict(linear_model,
                            newdata = testing_unbiased_data)

  testing_data_lm_predictions &lt;- testing_unbiased_data %&gt;%
    mutate(lm_pred = lm_predictions)

  lm_rmse &lt;- testing_data_lm_predictions %&gt;%
    rmse(hours_worked, lm_pred)

  lm_result &lt;- broom::tidy(linear_model)

  tribble(~rmse, ~tidy_coeffs, ~model,
          lm_rmse$.estimate, lm_result, linear_model)

}</code></pre>
<p>
Let’s now run this on the 1000 random samples and on the 1000 non-random samples:
</p>
<pre class="r"><code>many_lms &lt;- map_df(.x = random_samples, ~run_regression(.x))

many_biased_lms &lt;- map_df(.x = biased_samples, ~run_regression(.x))</code></pre>
<p>
Let’s take a look at the RMSE of both models:
</p>
<pre class="r"><code>many_lms %&gt;%
  summarise(mean(rmse), sd(rmse))</code></pre>
<pre><code>## # A tibble: 1 × 2
##   `mean(rmse)` `sd(rmse)`
##          &lt;dbl&gt;      &lt;dbl&gt;
## 1         13.3       1.18</code></pre>
<pre class="r"><code>many_biased_lms %&gt;%
  summarise(mean(rmse), sd(rmse))</code></pre>
<pre><code>## # A tibble: 1 × 2
##   `mean(rmse)` `sd(rmse)`
##          &lt;dbl&gt;      &lt;dbl&gt;
## 1         12.1       1.08</code></pre>
<p>
So… both models perform the same? Hum. What about the coefficients? Well I don’t expect much difference there now, but let’s see:
</p>
<pre class="r"><code>random_sample_coefs &lt;- many_lms %&gt;%
  pull(tidy_coeffs) %&gt;%
  bind_rows() %&gt;%
  mutate(tidy_coeffs = "random_sample")

biased_sample_coefs &lt;- many_biased_lms %&gt;%
  pull(tidy_coeffs) %&gt;%
  bind_rows() %&gt;%
  mutate(tidy_coeffs = "biased_sample")

true_lm &lt;- lm(hours_worked ~ capital +
                       sex +
                       age_group +
                       level_of_education +
                       part_time_employment +
                       type_of_contract,
                     data = population)

true_lm_coefs &lt;- broom::tidy(true_lm) %&gt;%
  mutate(tidy_coeffs = "true")

simulations &lt;- bind_rows(random_sample_coefs,
          biased_sample_coefs) </code></pre>
<p>
Let’s plot the 1000 coefficients for each variable in a nice violin plot:
</p>
<pre class="r"><code>ggplot() +
  geom_violin(data = simulations, aes(y = estimate, x = term, fill = tidy_coeffs),
              draw_quantiles = c(0.05, 0.5, 0.95)) +
  geom_point(data = true_lm_coefs, aes(y = estimate, x = term), size = 2) +
  scale_x_discrete(guide = guide_axis(n.dodge = 4)) +
  theme(legend.position = "bottom")</code></pre>
<pre><code>## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : X11
## used font size 25 when 29 was requested</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/worth_weight-18-1.png" width="80%" height="auto">
</p>
<p>
The dots are the true coefficients (obtained from a linear regression on the whole data). The coefficients from the random sample are “more often” closer to the true coefficients, but it doesn’t seem to be a lot (the bars in the violins are the 5th, 50th and 95th percentile).
</p>
<p>
Let’s now see what happens on the holdout set (using the best performing models):
</p>
<pre class="r"><code>best_unbiased_model &lt;- many_lms %&gt;%
  filter(rmse == min(rmse)) %&gt;%
  pull(model) %&gt;%
  .[[1]]

holdout &lt;- holdout %&gt;%
  mutate(unbiased = predict(best_unbiased_model, newdata = holdout))

best_biased_model &lt;- many_biased_lms %&gt;%
  filter(rmse == min(rmse)) %&gt;%
  pull(model) %&gt;%
  .[[1]]

holdout &lt;- holdout %&gt;%
  mutate(biased = predict(best_biased_model, newdata = holdout))

holdout %&gt;%
  rmse(hours_worked, unbiased)</code></pre>
<pre><code>## # A tibble: 1 × 3
##   .metric .estimator .estimate
##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;
## 1 rmse    standard        13.3</code></pre>
<pre class="r"><code>holdout %&gt;%
  rmse(hours_worked, biased)</code></pre>
<pre><code>## # A tibble: 1 × 3
##   .metric .estimator .estimate
##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;
## 1 rmse    standard        13.3</code></pre>
<p>
Again, pretty much no difference… What about hours worked?
</p>
<pre class="r"><code>holdout %&gt;%
  summarise(mean_true = mean(hours_worked),
            mean_unbiased = mean(unbiased),
            mean_biased = mean(biased))</code></pre>
<pre><code>## # A tibble: 1 × 3
##   mean_true mean_unbiased mean_biased
##       &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;
## 1      30.4          29.9        29.9</code></pre>
<p>
Same…??? What about coefficients?
</p>
<pre class="r"><code>bind_cols(broom::tidy(best_unbiased_model),
          broom::tidy(best_biased_model)) %&gt;%
  select(term...1, estimate...2, std.error...3, estimate...7, std.error...8)</code></pre>
<pre><code>## New names:
## * term -&gt; term...1
## * estimate -&gt; estimate...2
## * std.error -&gt; std.error...3
## * statistic -&gt; statistic...4
## * p.value -&gt; p.value...5
## * ...</code></pre>
<pre><code>## # A tibble: 13 × 5
##    term...1                estimate...2 std.error...3 estimate...7 std.error...8
##    &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;
##  1 (Intercept)                   30.6           2.11        36.4           1.95 
##  2 capital2                       0.317         1.91        -3.35          1.72 
##  3 capital3                       0.501         1.90        -2.66          1.78 
##  4 capital9                       0.258         1.40        -3.45          1.32 
##  5 sexMale                        3.54          0.946       -0.649         0.915
##  6 age_group2                     0.295         1.29        -0.467         1.09 
##  7 age_group3                    -3.42          1.82        -5.55          1.45 
##  8 level_of_education2           -0.506         1.21         0.439         1.06 
##  9 level_of_education3            0.636         1.20         0.545         1.06 
## 10 part_time_employmentWo…      -13.3           1.23       -14.3           0.960
## 11 type_of_contract5             -0.646         1.20        -1.86          0.982
## 12 type_of_contractOther         -5.74          2.60        -4.98          1.63 
## 13 type_of_contractUnknown        0.378         1.18         3.17          1.25</code></pre>
<p>
Again, some differences here (especially for significant coefficients, which makes sense). So I guess you <em>should</em> use weights if you’re interested in the coefficients (and especially their standard deviation). I definitely need to explore this more, and read some more.
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2021-07-30-worth_weight.html</guid>
  <pubDate>Fri, 30 Jul 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building your own knitr compile farm on your Raspberry Pi with {plumber}</title>
  <link>https://b-rodrigues.github.io/posts/2021-06-04-own_knit_server.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=4xYu2WrygtQ"> <img src="https://b-rodrigues.github.io/assets/img/i_do_my_own_plumbing.png" title="Always do your own plumbing" width="80%" height="auto"></a>
</p>
</div>
<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<section id="rage-is-my-fuel" class="level2">
<h2 class="anchored" data-anchor-id="rage-is-my-fuel">
Rage is my fuel
</h2>
<p>
I’ve had the <code>{plumber}</code> package on my radar for quite some time, but never tried it. However, a couple of weeks ago, I finally had a reason to try it out and see how the package works.
</p>
<p>
One of my main problems in life is that my work laptop runs Windows, and my second problem is that I need to compile <img src="https://latex.codecogs.com/png.latex?()"> documents (via Rmarkdown) on Windows, and it’s just a pain. Not because of Rmarkdown, nor <img src="https://latex.codecogs.com/png.latex?()">, but because of Windows. Windows and UTF-8 don’t mix well, and I’ve grown so frustrated that I thought about creating my own Rmarkdown knitr compile farm using my Raspberry Pi 4 to solve this issue. The idea would be to send in the encrypted <code>.Rmd</code> file and get back an encrypted <code>.pdf</code> file. Dear reader, you surely think that this is overkill; let me assure you, it is not. I have wasted so much time on Windows because Windows is a joke that cannot properly handle THE MOST COMMON TEXT ENCODING IN THE UNIVERSE that this the only way out. Even Yihui Xie, the creator of the <code>{knitr}</code> package (among many others), wrote a blog post titled <a href="https://yihui.org/en/2018/11/biggest-regret-knitr/">My Biggest Regret in the knitr Package</a>, in which he explains how Windows’ crappy handling of UTF-8 made him make a regrettable decision. The issue Yihui Xie discusses is now resolved since <code>{rmarkdown}</code> version 2, as stated in the <a href="https://rmarkdown.rstudio.com/docs/news/#rmarkdown-2-0-2019-12-12">release notes</a> (ctrl-f “utf-8”), but, for some reason, I still have problems with UTF-8 on Windows. While it is a fact that characters like the french é, è, ô, ç etc are now properly shown in a compiled document, any such character in a plot will not show properly, as you can see in the screenshot below:
</p>
<p>
<img src="https://i.imgur.com/VBVlHLV.png"><!-- -->
</p>
<p>
I did not really ever notice this issue in the past because I wrote 100% of my documents in English, but now that I’m a public servant in a country where French is the administrative language, man, am I having a bad time.
</p>
<p>
Now, I make sure my <code>.Rmd</code> files are encoded in UTF-8, but I still get issues with plots. I tried changing the graphics device to Cairo or <code>{ragg}</code>, but I still have these issues.
</p>
<p>
Who knows, maybe this is also a case of PEBKAC, but in that case it’s still Windows’ fault for making me feel bad.
</p>
<p>
Anyway, this was reason enough for me to start developing an API that would allow me to get a nice looking PDF compiled on a serious operating system.
</p>
</section>
<section id="getting-started-docker" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-docker">
Getting started: Docker
</h2>
<p>
I started by writing a prototype on my local machine that (sort of, but not really) worked, but to put it on my Raspberry Pi I wanted to create a new Docker image to make deployment easier. For this, just like I did for this <a href="https://www.brodrigues.co/blog/2020-09-20-shiny_raspberry/">other blog post</a>, I wrote a ’Dockerfile’ and pushed an image to Docker Hub. The Dockerfile is heavily inspired by <a href="https://github.com/hvalev/shiny-server-arm-docker">hvalev’s</a> Dockerfile, and also by the official <code>plumber</code> one you can find <a href="https://github.com/rstudio/plumber/blob/master/Dockerfile">here</a>. I then built the image on my Raspberry Pi.
</p>
<p>
You can use the Dockerfile to build your own image, which you can find <a href="https://github.com/b-rodrigues/tex-plumber">here</a>, or you can pull the one I pushed on <a href="https://hub.docker.com/r/brodriguesco/tex-plumber/">Docker Hub</a>. Now, something important: this Docker image does not contain my <code>plumber.R</code> file. So the first time you’re going to run it, it’ll fail. You’ll need to make one further adaptation on your server first.
</p>
<p>
Put your <code>plumber.R</code> where you want, and copy the path to the file. For instance, suppose that you put the file at: <code>/path/to/your/apis/plumber.R</code>. Then, you can finally run the image like so:
</p>
<pre><code>docker run -d -it -p 8000:8000 -v /path/to/your/apis:/srv/plumber/ --rm --name tex-plumber tex-plumber:latest</code></pre>
<p>
Docker looks for a plumber file inside <code>/srv/plumber/</code> but that’s inside the image; this path gets sort of linked to your <code>/path/to/your/apis/</code> and thus the <code>plumber.R</code> file you put there will be run. You can also put this there beforehand, adapt the Dockerfile and then build the image. It’s not the most elegant way to do it, but hey, I’m a beginner.
</p>
<p>
These instructions are very general and independent from my API I’m discussing here. What follows will be specific to my API.
</p>
</section>
<section id="an-api-that-ingests-an-rmd-file-and-spits-out-a-compiled-document" class="level2">
<h2 class="anchored" data-anchor-id="an-api-that-ingests-an-rmd-file-and-spits-out-a-compiled-document">
An API that ingests an Rmd file and spits out a compiled document
</h2>
<p>
First of all, none of this would have been possible without the following Stackoverflow threads and Github repos:
</p>
<ul>
<li>
<a href="https://stackoverflow.com/questions/63808430/r-plumber-getting-as-excel-xlsx/63809737#63809737" class="uri">https://stackoverflow.com/questions/63808430/r-plumber-getting-as-excel-xlsx/63809737#63809737</a>
</li>
<li>
<a href="https://github.com/ChrisBeeley/reports_with_plumber/blob/master/plumber.R" class="uri">https://github.com/ChrisBeeley/reports_with_plumber/blob/master/plumber.R</a>
</li>
<li>
<a href="https://stackoverflow.com/questions/64639748/how-to-upload-a-xlsx-file-in-plumber-api-as-a-input" class="uri">https://stackoverflow.com/questions/64639748/how-to-upload-a-xlsx-file-in-plumber-api-as-a-input</a>
</li>
</ul>
<p>
and <a href="https://github.com/meztez">Bruno Tremblay’s</a> help on this <a href="https://community.rstudio.com/t/trying-to-understand-whats-wrong-with-my-api/106424?u=brodriguesco">thread</a> I made calling for help. You’ll probably notice that the answers in the stackoverflow threads all come from Bruno Tremblay, so a big thank you to him!
</p>
<p>
With his help, I was able to clob together this API:
</p>
<pre class="r"><code>#* Knit Rmarkdown document
#* @param data:file The Rmd file
#* @param string The output format
#* @post /knit
# We use serializer contentType, the pdf serializer is the plot output from grDevices
# Since the content is already in the right format from render, we just need to set
# the content-type
#* @serializer contentType list(type = "application/gzip")
function(data, output_format) { 
  # Save the RMD file to a temporary location
  rmd_doc &lt;- file.path(tempdir(), names(data))
  writeBin(data[[1]], rmd_doc)
  # render document to the selected output format
  # (file will be saved side by side with source and with the right extension)
  output &lt;- rmarkdown::render(rmd_doc, output_format)
  tar("output.tar.gz", normalizePath(output), compression = "gzip", tar = "tar")
  # remove files on exit
  on.exit({file.remove(rmd_doc, output, "output.tar.gz")}, add = TRUE)
  # Include file in response as attachment
  value &lt;- readBin("output.tar.gz", "raw", file.info("output.tar.gz")$size)
  plumber::as_attachment(value, basename("output.tar.gz"))
}</code></pre>
<p>
This will go inside the <code>plumber.R</code> script. When the Docker image is running, you can hit the endpoint <code>/knit</code> to knit a document. But before discussing how to hit the API, let’s go through the above code.
</p>
<pre class="r"><code>function(data, output_format) { 
  # Save the RMD file to a temporary location
  rmd_doc &lt;- file.path(tempdir(), names(data))
  writeBin(data[[1]], rmd_doc)</code></pre>
<p>
This function takes two arguments: <code>data</code> and <code>output_format</code>. <code>data</code> is your Rmd file (I should have named this better… oh well) that you will send via a POST. The Rmd will get written to a temporary location. In a previous version of the function I’ve used <code>writeLines</code> instead of <code>writeBin</code> which works as well.
</p>
<p>
The next lines render the output as the provided output format (through the second argument, <code>output_format</code>) and the output file gets compressed to a <code>tar.gz</code> archive. Why? The first reason is, obviously, to save precious bandwidth. The second, most important reason, is for the API to be able to download it.
</p>
<pre class="r"><code>  output &lt;- rmarkdown::render(rmd_doc, output_format)
  tar("output.tar.gz", normalizePath(output), compression = "gzip", tar = "tar")</code></pre>
<p>
The way I understand how this works, is that if you want your API to return an attachment, you need to set the right content type. This is done by decorating the function with the right serializer:
</p>
<pre class="r"><code>#* @serializer contentType list(type = "application/gzip")</code></pre>
<p>
At first I only wanted PDF files, and thus set the <code>pdf</code> serializer. This was a mistake, as the <code>pdf</code> serializer is only used if the API is supposed to return a plot (in the pdf format). When this was pointed out to me (in the Rstudio forums), Bruno Tremblay showed me the right solution:
</p>
<pre class="r"><code>#* @serializer contentType list(type = "application/pdf")</code></pre>
<p>
which worked! However, I then thought about how I would make the API more flexible by allowing the user to compile any format, and this is when I thought about compressing the file and returning a <code>tar.gz</code> file instead.
</p>
<p>
The first line of the final lines:
</p>
<pre class="r"><code>  on.exit({file.remove(rmd_doc, output, "output.tar.gz")}, add = TRUE)
  # Include file in response as attachment
  value &lt;- readBin("output.tar.gz", "raw", file.info("output.tar.gz")$size)
  plumber::as_attachment(value, basename("output.tar.gz"))</code></pre>
<p>
simply clean up after exiting. The final lines read in the compressed file in a variable called <code>variable</code> which then gets downloaded automatically as an attachment.
</p>
<p>
Ok, so now, how do I get a document compiled? With the following script:
</p>
<pre class="r"><code>library(httr)
library(magrittr)

my_file &lt;- "testmark"

res &lt;- 
  POST(
    "http://url_to_compile_farm:8000/knit?output_format=html_document",
    body = list(
      data = upload_file(paste0(my_file, ".Rmd"), "text/plain")
    )
  ) %&gt;%
  content()

names(res)

output_filename &lt;- file(paste0(my_file, ".tar.gz"), "wb")
writeBin(object = res, con = output_filename)
close(output_filename)</code></pre>
<p>
This script is saved in a folder which also contains <code>testmark.Rmd</code>, which is the Rmarkdown file I want to compile (and which gets sent to the server as the <code>data</code> argument). You’ll notice in the url that the second argument from my API is defined there:
</p>
<pre class="r"><code>"http://url_to_compile_farm:8000/knit?output_format=html_document"</code></pre>
<p>
you can change <code>html_document</code> to <code>pdf_document</code> or <code>word_document</code> to get a PDF or Word document respectively.
</p>
<p>
I’m pretty happy with this solution, even though it’s quite rough, and still needs some adjustments. For instance, I want to make sure that I can leave this API running without worry; so I need to build in some authentication mechanism, which will probably be quite primitive, but perhaps good enough. I also need to send and receive encrypted documents, and not plain text.
</p>
</section>
<section id="further-reading" class="level2">
<h2 class="anchored" data-anchor-id="further-reading">
Further reading
</h2>
<p>
If you’re into tinkering with Raspberry Pi’s, Rstudio Server an {plumber}, <a href="https://twitter.com/tyluRp">Tyler Littlefield</a> has a pretty cool <a href="https://github.com/tyluRp/pirate">github repo</a> with lots of interesting stuff. Definitely give it a look!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2021-06-04-own_knit_server.html</guid>
  <pubDate>Fri, 04 Jun 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dealing with non-representative samples with post-stratification</title>
  <link>https://b-rodrigues.github.io/posts/2021-04-17-post_strat.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=eOBIIB690yE"> <img src="https://b-rodrigues.github.io/assets/img/bingo.png" title="It could have been worse" width="80%" height="auto"></a>
</p>
</div>
<p>
Let’s go back to stats 101: what do you do if you want to know how many people like to play bingo in a certain population? The answer, of course, is to ask a sample of people if they enjoy playing bingo, compute the proportion and then… we’re done! Right? Well not exactly. This works if your sample is representative, which in practice, is not often the case. I am not an expert of survey methods, very far from it, but I was recently confronted to a similar issue at work. So in this blog post I want to talk about estimating a proportion using a sample that is not representative of the population using a method called “post-stratification”.
</p>
<p>
By the way, before continuing, I also made a video about this topic if you’re interested, watch it <a href="https://www.youtube.com/watch?v=eOBIIB690yE">here</a>.
</p>
<p>
The data I use in this blog post is simulated; so I know the “truth”, since I made the data, and can thus compare the results from post-stratification to the truth. At the end of the blog post, I will post the complete source code, but for now, let’s suppose that this is my sample:
</p>
<pre class="r"><code>library(tidyverse)
library(survey)
library(janitor)
library(brotools)</code></pre>
<pre class="r"><code>my_sample_1</code></pre>
<pre><code>## # A tibble: 904 x 2
##    age_group likes_bingo_1
##    &lt;chr&gt;             &lt;dbl&gt;
##  1 20-49                 0
##  2 20-49                 0
##  3 20-49                 0
##  4 20-49                 0
##  5 20-49                 0
##  6 20-49                 0
##  7 20-49                 0
##  8 20-49                 0
##  9 20-49                 0
## 10 20-49                 1
## # … with 894 more rows</code></pre>
<p>
Let’s suppose that we have asked people two questions: their age, and whether or not they like bingo. Using this sample, I obtain the following result:
</p>
<pre class="r"><code>result &lt;- mean(my_sample_1$likes_bingo_1)</code></pre>
<p>
So according to this sample, 38.38% of people in my population like bingo. But is that right? Let’s use the other piece of information we have: the interviewee’s ages. This is the distribution of the age group in my sample:
</p>
<pre class="r"><code>my_sample_1 %&gt;%
  tabyl(age_group)</code></pre>
<pre><code>##  age_group   n    percent
##        19-  40 0.04424779
##      20-49 174 0.19247788
##      50-79 540 0.59734513
##        80+ 150 0.16592920</code></pre>
<p>
We want to compare this to the distribution of the same age groups in the population. Thankfully, this is something that is readily available in most (all?) countries. National statistical institutes publish such data on a yearly basis. This is the distribution in the population:
</p>
<pre class="r"><code>age_distribution_population</code></pre>
<pre><code>##  age_group     n    percent
##        19- 12825 0.21865516
##      20-49 25833 0.44043032
##      50-79 17779 0.30311658
##        80+  2217 0.03779793</code></pre>
<p>
As we can see, our sample is completely off! Elderly people are over-represented while younger people are under-represented. Perhaps this happened because elderly people love bingo more than younger people and, when given the opportunity to confess their love for bingo, are more willing to answer to a survey. Whatever the reason, it would be unreasonable to assume that the proportion given by our sample is a good, unbiased, estimate of the true proportion in the population.
</p>
<p>
What we would like to do here, is to compute weights for each individual in the sample, such that individuals from over-represented groups contribute less to the computation of the proportion than individuals from under-represented groups. This is where post-stratification and raking come into play. As already said, I’m not an expert of these methods. So don’t believe that this blog post is a tutorial. However, what I’m going to show you might come in handy.
</p>
<p>
We’re going to use the <code>{survey}</code> package to compute the weights using raking, by post-stratifying the sample on age group. This can be done with two commands:
</p>
<pre class="r"><code>unweighted_data &lt;- svydesign(ids = ~1, data = my_sample_1)</code></pre>
<pre><code>## Warning in svydesign.default(ids = ~1, data = my_sample_1): No weights or
## probabilities supplied, assuming equal probability</code></pre>
<pre class="r"><code>weighted_data &lt;- rake(design = unweighted_data,
                      sample.margins = list(~age_group),
                      population.margins = list(pop_marginal_age))</code></pre>
<p>
The first function, <code>svydesign()</code> allows you to create a new object based on your data, which specifies the <a href="https://stats.oecd.org/glossary/detail.asp?ID=3852">design</a> of your study. In this case, I have used <code>ids = ~1</code> to say “I don’t have any weights, nor anything specific to tell you”. Next, using the <code>rake()</code> function, I can compute the weights. For this, I need the object I created before, the variable I want to post-stratify on, and then give a table that contains the distribution of said variable in the population. This table looks a bit different from the one I already showed you: it doesn’t contain the categories’ frequencies, and the variable containing the counts is called <code>Freq</code> (<code>rake()</code> looks for this variable so it must be named like this):
</p>
<pre class="r"><code>pop_marginal_age </code></pre>
<pre><code>##   age_group  Freq
## 1       19- 12825
## 2     20-49 25833
## 3     50-79 17779
## 4       80+  2217</code></pre>
<p>
We can now take a look at the weights:
</p>
<pre class="r"><code>summary(weights(weighted_data))</code></pre>
<pre><code>##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   14.78   32.92   32.92   64.88   32.92  320.62</code></pre>
<p>
In cases where you have very high or very low weights, the literature recommends trimming them. However, I have not seen anything very definitive on this, and it seems that practitioners rely on rules of thumb and gut feeling to know when to trim weights. In my example here, I don’t think it is needed, but as I said, I have no intuition for this. Anyways, we are now ready to compute the new proportion:
</p>
<pre class="r"><code>svymean(~likes_bingo_1, weighted_data)</code></pre>
<pre><code>##                  mean     SE
## likes_bingo_1 0.19343 0.0121</code></pre>
<p>
The result is quite different from before (it was 38.38% in the “raw” sample)! Because I have simulated the data, I can now compare to the “true” value:
</p>
<pre class="r"><code>eusilcP %&gt;%
  summarise(mean(likes_bingo_1))</code></pre>
<pre><code>##   mean(likes_bingo_1)
## 1           0.1830225</code></pre>
<p>
And we’re quite close!
</p>
<p>
Now let’s continue a little bit, with a more complicated example. Imagine that I collected five samples, one per week. Each sample contains totally different people (no person gets asked twice). Also, imagine that while I’m collecting my samples and analyzing them, bingo fever is running amok in my country, always infecting more and more people. As time passes, the proportion of people who love bingo keeps increasing. So my population’s parameter keeps changing, and each week, when I get a new sample, the proportion in my sample will also grow on a weekly basis. Because of this, I have to compute weights each week. Thankfully, the distribution of age groups in my population can be assumed to stay constant, so I don’t need to think about that.
</p>
<p>
Let’s take a look at my sample which contains 5 weeks of data:
</p>
<pre class="r"><code>samples</code></pre>
<pre><code>## # A tibble: 31,590 x 3
##    age_group week            yes
##    &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;
##  1 20-49     likes_bingo_1     0
##  2 20-49     likes_bingo_2     0
##  3 20-49     likes_bingo_3     0
##  4 20-49     likes_bingo_4     0
##  5 20-49     likes_bingo_5     0
##  6 20-49     likes_bingo_1     0
##  7 20-49     likes_bingo_2     0
##  8 20-49     likes_bingo_3     0
##  9 20-49     likes_bingo_4     0
## 10 20-49     likes_bingo_5     1
## # … with 31,580 more rows</code></pre>
<p>
Each row is one person, and this person gets sample exactly once. The <code>yes</code> variable collects the answer to the question “do you like bingo?”. Let’s see how my proportion evolves through time:
</p>
<pre class="r"><code>(samples_likes_bingo_through_time &lt;- samples %&gt;%
  group_by(week) %&gt;%
  summarise(freq = mean(yes)))</code></pre>
<pre><code>## # A tibble: 5 x 2
##   week           freq
##   &lt;chr&gt;         &lt;dbl&gt;
## 1 likes_bingo_1 0.256
## 2 likes_bingo_2 0.446
## 3 likes_bingo_3 0.550
## 4 likes_bingo_4 0.618
## 5 likes_bingo_5 0.662</code></pre>
<p>
We see that it keeps increasing: this is a good sign, since we know that this is also the case in the population. We just don’t know by how much. Let’s compute weights for each week, and then recompute estimated proportions using these weights. In order to do this, I will write a function that will make it easy to do just that:
</p>
<pre class="r"><code>compute_weekly_weights &lt;- function(sample_df){

  unweighted_data &lt;- svydesign(ids = ~1, data = sample_df)

  rake(design = unweighted_data,
       sample.margins = list(~age_group),
       population.margins = list(pop_marginal_age))

}</code></pre>
<p>
This function does the exact same thing as before. But it will now make it easy to apply to each week using the <code>group_by</code>-<code>nest</code>-<code>map</code> approach:
</p>
<pre class="r"><code>weighted_samples &lt;- samples %&gt;%
  group_nest(week) %&gt;%
  mutate(weights = map(data, compute_weekly_weights)) %&gt;%
  mutate(svymeans = map(weights, ~svymean(~yes, .)))</code></pre>
<pre><code>## Warning in svydesign.default(ids = ~1, data = sample_df): No weights or
## probabilities supplied, assuming equal probability

## Warning in svydesign.default(ids = ~1, data = sample_df): No weights or
## probabilities supplied, assuming equal probability

## Warning in svydesign.default(ids = ~1, data = sample_df): No weights or
## probabilities supplied, assuming equal probability

## Warning in svydesign.default(ids = ~1, data = sample_df): No weights or
## probabilities supplied, assuming equal probability

## Warning in svydesign.default(ids = ~1, data = sample_df): No weights or
## probabilities supplied, assuming equal probability</code></pre>
<p>
Let’s take a look at this object:
</p>
<pre class="r"><code>weighted_samples</code></pre>
<pre><code>## # A tibble: 5 x 4
##   week                    data weights    svymeans     
##   &lt;chr&gt;         &lt;list&lt;tibble&gt;&gt; &lt;list&gt;     &lt;list&gt;       
## 1 likes_bingo_1    [6,318 × 2] &lt;srvy.ds2&gt; &lt;svystat [1]&gt;
## 2 likes_bingo_2    [6,318 × 2] &lt;srvy.ds2&gt; &lt;svystat [1]&gt;
## 3 likes_bingo_3    [6,318 × 2] &lt;srvy.ds2&gt; &lt;svystat [1]&gt;
## 4 likes_bingo_4    [6,318 × 2] &lt;srvy.ds2&gt; &lt;svystat [1]&gt;
## 5 likes_bingo_5    [6,318 × 2] &lt;srvy.ds2&gt; &lt;svystat [1]&gt;</code></pre>
<p>
So for each week, I have now a <code>svydesign</code> object and also a new, hopefully unbiased, proportion of people who like bingo. The following lines simply but this into a nice tibble:
</p>
<pre class="r"><code>weighted_samples &lt;- weighted_samples %&gt;%
  mutate(svymeans = map(svymeans, as_tibble)) %&gt;%
  select(week, svymeans) %&gt;%
  unnest(cols = svymeans) %&gt;%
  rename(freq = mean,
         SE = yes) %&gt;%
  mutate(is = "corrected_sample")</code></pre>
<p>
To conclude, let’s create a plot that compares the proportions computed without using weights to the proportions computed with weights to the true values that I simulated myself. I put everything in a data frame and the create the plot:
</p>
<pre class="r"><code>all_data &lt;- bind_rows(weighted_samples, # my corrected data
                      mutate(samples_likes_bingo_through_time, is = "raw_sample"), # the raw samples
                      mutate(likes_bingo_through_time, is = "true_value")) %&gt;% # the true, simulated, values
  mutate(SE = ifelse(is.na(SE), 0, SE))

ggplot(all_data) +
  geom_ribbon(aes(y = freq, x = week,
                  ymin = freq - 2*SE,
                  ymax = freq + 2*SE,
                  group = is),
              fill = "pink",
              alpha = .3) +
  geom_line(aes(y = freq, x = week, colour = is, group = is)) +
  theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/post_strat-20-1.png" width="80%" height="auto">
</p>
<p>
We can see that the proportions computed without weights were clearly over-estimating the true share of bingo enthusiasts in the population. The weighted proportions are very close to the true values and are acceptable estimates of the true proportions!
</p>
<p>
If you want to take a look at the source code, go <a href="https://gist.github.com/b-rodrigues/d9efe80f879f95d305cd661b63e2dee9">here</a>.
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2021-04-17-post_strat.html</guid>
  <pubDate>Sat, 17 Apr 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The link between keyboard layouts and typing speed - Data collection phase</title>
  <link>https://b-rodrigues.github.io/posts/2021-03-28-survey.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://forms.gle/vprM4C8yk1bBGCNx8"> <img src="https://i.imgur.com/JXueyyT.png" title="Touch typing can also help fight zombies"></a>
</p>
</div>
<p>
I’m curious about different keyboard layouts, and how that correlates with typing speed (if at all). I prepared a little 2 minute survey, and would be very grateful if you could take it. You can find it on this <a href="https://forms.gle/vprM4C8yk1bBGCNx8">link</a>.
</p>
<p>
There’s no R code in this blog post, but I’ll be analyzing the data using R, promise :)
</p>



 ]]></description>
  <category>R</category>
  <category>proramming</category>
  <guid>https://b-rodrigues.github.io/posts/2021-03-28-survey.html</guid>
  <pubDate>Sun, 28 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to treat as many files as fit on your hard disk without loops (sorta) nor running out of memory all the while being as lazy as possible</title>
  <link>https://b-rodrigues.github.io/posts/2021-03-19-no_loops_tidyeval.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=DERMZi3Ck20"> <img src="https://b-rodrigues.github.io/assets/img/30b.png" title="Click to watch the Netflix adaptation of this blog post" width="80%" height="auto"></a>
</p>
</div>
<section id="tldr" class="level1">
<h1>
tl;dr
</h1>
<p>
This blog post is going to be long, and deal with many topics. But I think you’re going to enjoy it. So get a hot beverage and relax. Take the time to read. We don’t take enough time to read anymore. It’s a shame. But if you’re really busy, the tl;dr is that I found out a way of combining tidy evaluation and functional programming to analyze potentially millions of files (as many as fit on your hard disk) without running out of memory in R. As an example, I’m going to use the 15000ish Excel files from the Enron Corpus. It’s a pretty neat blog post, if I may say so myself, so you definitely should read it. If at the end you think I wasted your time, you can file a complaint <a href="https://is.gd/LFX1YS">here</a>.
</p>
</section>
<section id="introduction" class="level1">
<h1>
Introduction
</h1>
<p>
If you’ve been a faithful reader of this blog, or if you watch my <a href="https://www.youtube.com/channel/UCTZXht1RTL2Duc3eU8MYGzQ">youtube channel</a> you’ve very likely seen me write code that looks like this:
</p>
<pre class="r"><code>library(tidyverse)
library(rlang)
library(tidyxl)
library(brotools)</code></pre>
<pre class="r"><code>mtcars_plot &lt;- mtcars %&gt;%
  group_nest(am) %&gt;% #shortcut for group_by(am) %&gt;% nest() 
  mutate(plots = map2(.y = am, .x = data, ~{ggplot(data = .x) +
                              geom_smooth(aes(y = mpg, x = hp), colour = "#82518c") +
                                ggtitle(paste0("Miles per gallon as a function of horse power for am = ", .y)) +
                                theme_blog()}))</code></pre>
<p>
This creates a new data frame that looks like this:
</p>
<pre class="r"><code>mtcars_plot</code></pre>
<pre><code>## # A tibble: 2 x 3
##      am           data plots 
##   &lt;dbl&gt; &lt;list&lt;tibble&gt;&gt; &lt;list&gt;
## 1     0      [19 × 10] &lt;gg&gt;  
## 2     1      [13 × 10] &lt;gg&gt;</code></pre>
<p>
In three lines of code, I grouped the <code>mtcars</code> dataframe by the variable <code>am</code> and then created two plots, which are contained in a new column called <code>plots</code>. If you’re unfamiliar with R, it is quite likely that you’ve never seen anything like this. If you have experience with functional programming languages though, you might recognize what’s going on. Essentially, <code>map2()</code> <em>loops</em> over two variables, <code>am</code> and <code>data</code> (this variable is not in the original data frame, but gets created as a result of the <code>group_nest(am)</code> call) and applies a function, in this case a call to <code>ggplot()</code>, to generate two plots… If you’ve never seen this before, I invite you to read the section dedicated to this type of workflows on my <a href="https://b-rodrigues.github.io/modern_R/functional-programming.html#list-based-workflows-for-efficiency">ebook</a>.
</p>
<p>
Let’s take a look at the plots:
</p>
<pre class="r"><code>mtcars_plot %&gt;%
  pull(plots)</code></pre>
<pre><code>## [[1]]</code></pre>
<pre><code>## `geom_smooth()` using method = 'loess' and formula 'y ~ x'</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/no_loops_tidyeval-5-1.png" width="80%" height="auto">
</p>
<pre><code>## 
## [[2]]</code></pre>
<pre><code>## `geom_smooth()` using method = 'loess' and formula 'y ~ x'</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/no_loops_tidyeval-5-2.png" width="80%" height="auto">
</p>
<p>
The advantage of this workflow is that you don’t have to think much about anything -once you understand how it works-. The alternative would be two create two separate data frames, and create two separate plots. That’s a totally valid solution, unless you need to create hundreds of plots. With the workflow above, it doesn’t matter if the <code>am</code> variable has 2 or 2000 levels. The code would look exactly the same.
</p>
<p>
This workflow is very flexible. You can even use this approach to read in, and analyze, many, many files. As many as, for instance, 15931 Excel files from an American oil company that went bust in the early 2000’s, Enron.
</p>
</section>
<section id="the-enron-corpus" class="level1">
<h1>
The Enron Corpus
</h1>
<p>
I won’t go into much detail about the Enron Corpus, but to make a long story short: Big evil American oil company went bust, company emails got released for research purposes after being purchased for 10000USD by a computer scientist, and many of these emails had Excel spreadsheets attached to them. Other computer scientist released spreadsheets for research purposes. You can read the whole story on <a href="https://www.felienne.com/archives/3634">Felienne Hermans’ blog</a> (read it, it’s quite interesting).
</p>
<p>
Anyways, you can now get this treasure trove of nightmarish Excel spreadsheets by clicking <a href="https://figshare.com/articles/dataset/Enron_Spreadsheets_and_Emails/1221767">here</a> (this is the link provided in the blog post by Felienne Hermans). I already discussed this in a <a href="https://www.brodrigues.co/blog/2020-11-21-guis_mistake/">previous blog post</a>.
</p>
<p>
On Felienne Hermans’ blog post, you can spot the following table:
</p>
<p>
<img src="https://i0.wp.com/www.felienne.com/wp-content/uploads/2014/10/Table1.png" width="80%" height="auto"><!-- -->
</p>
<p>
I’m going to show how this table could be replicated using R and the <code>mutate()</code>-<code>map()</code> workflow above.
</p>
<p>
First, let’s load one single spreadsheet with <code>{tidyxl}</code> and get some of the code ready that we will need. Let’s get all the paths to all the files in a vector:
</p>
<pre class="r"><code>list_paths &lt;- list.files(path = "~/six_to/spreadsheets",
                         pattern = ".xlsx",
                         full.names = TRUE)</code></pre>
<p>
Let’s work with the first one. Let’s read it in with <code>{tidyxl}</code>:
</p>
<pre class="r"><code>(example_xlsx &lt;- xlsx_cells(list_paths[1]))</code></pre>
<pre><code>## # A tibble: 19,859 x 21
##    sheet       address   row   col is_blank data_type error logical numeric
##    &lt;chr&gt;       &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;lgl&gt;    &lt;chr&gt;     &lt;chr&gt; &lt;lgl&gt;     &lt;dbl&gt;
##  1 Preschedule A1          1     1 FALSE    date      &lt;NA&gt;  NA           NA
##  2 Preschedule B1          1     2 TRUE     blank     &lt;NA&gt;  NA           NA
##  3 Preschedule C1          1     3 TRUE     blank     &lt;NA&gt;  NA           NA
##  4 Preschedule D1          1     4 TRUE     blank     &lt;NA&gt;  NA           NA
##  5 Preschedule E1          1     5 TRUE     blank     &lt;NA&gt;  NA           NA
##  6 Preschedule F1          1     6 TRUE     blank     &lt;NA&gt;  NA           NA
##  7 Preschedule G1          1     7 TRUE     blank     &lt;NA&gt;  NA           NA
##  8 Preschedule H1          1     8 TRUE     blank     &lt;NA&gt;  NA           NA
##  9 Preschedule I1          1     9 TRUE     blank     &lt;NA&gt;  NA           NA
## 10 Preschedule J1          1    10 TRUE     blank     &lt;NA&gt;  NA           NA
## # … with 19,849 more rows, and 12 more variables: date &lt;dttm&gt;, character &lt;chr&gt;,
## #   character_formatted &lt;list&gt;, formula &lt;chr&gt;, is_array &lt;lgl&gt;,
## #   formula_ref &lt;chr&gt;, formula_group &lt;int&gt;, comment &lt;chr&gt;, height &lt;dbl&gt;,
## #   width &lt;dbl&gt;, style_format &lt;chr&gt;, local_format_id &lt;int&gt;</code></pre>
<p>
The beauty of <code>{tidyxl}</code> is that it can read in a very complex and ugly Excel file without any issues. Each cell of the spreadsheet is going to be one row of the data set, the contents of all cells is now easily accessible. Let’s see how many sheets are in there:
</p>
<pre class="r"><code>example_xlsx %&gt;%
  summarise(n_sheets = n_distinct(sheet))</code></pre>
<pre><code>## # A tibble: 1 x 1
##   n_sheets
##      &lt;int&gt;
## 1       11</code></pre>
<p>
11… that’s already quite a lot. How many formulas are there per sheet?
</p>
<pre class="r"><code>example_xlsx %&gt;%
  mutate(is_formula = !is.na(formula)) %&gt;%  
  group_by(sheet) %&gt;%
  summarise(n_formula = sum(is_formula)) %&gt;%
  arrange(desc(n_formula))</code></pre>
<pre><code>## # A tibble: 11 x 2
##    sheet                  n_formula
##    &lt;chr&gt;                      &lt;int&gt;
##  1 Preschedule                 2651
##  2 Deals                        324
##  3 Economics                    192
##  4 Balancing                     97
##  5 Fuel                          70
##  6 Comp                           0
##  7 EPEData                        0
##  8 HeatRate                       0
##  9 spin reserve log sheet         0
## 10 Top                            0
## 11 Unit Summary                   0</code></pre>
<p>
There’s a sheet in there with 2651 formulas. This is insane. Anyways, as you can see, <code>{tidyxl}</code> makes analyzing what’s inside such Excel files quite simple. Let’s now create functions that will compute what we need. I won’t recreate everything from the table, but you’ll very quickly get the idea. Let’s start with a function to count spreadsheets that contain at least one formula:
</p>
<pre class="r"><code>at_least_one_formula &lt;- function(x){

  (any(!is.na(x$formula)))

}</code></pre>
<p>
Let’s get the number of worksheets:
</p>
<pre class="r"><code>n_sheets &lt;- function(x){

  x %&gt;%
    summarise(n_sheets =  n_distinct(sheet)) %&gt;%
    pull(n_sheets)

}</code></pre>
<p>
And how many formulas are contained in a spreadsheet:
</p>
<pre class="r"><code>n_formulas &lt;- function(x){

  x %&gt;%
    mutate(is_formula = !is.na(formula)) %&gt;%
    summarise(n_formula = sum(is_formula)) %&gt;%
    pull(n_formula)

}</code></pre>
<p>
Let’s stop here. We could of course continue adding functions, but that’s enough to illustrate what’s coming. Let’s just define one last function. This function will call all three functions defined above, and return the result in a dataframe. You’ll see why soon enough:
</p>
<pre class="r"><code>get_stats &lt;- function(x){

  tribble(~has_formula, ~n_sheets, ~n_formulas,
          at_least_one_formula(x), n_sheets(x), n_formulas(x))

}</code></pre>
<p>
Let’s try it out on our single spreadsheet:
</p>
<pre class="r"><code>get_stats(example_xlsx)</code></pre>
<pre><code>## # A tibble: 1 x 3
##   has_formula n_sheets n_formulas
##   &lt;lgl&gt;          &lt;int&gt;      &lt;int&gt;
## 1 TRUE              11       3334</code></pre>
<p>
Neat.
</p>
<p>
Now, let’s see how we can apply these function to 15k+ Excel spreadsheets.
</p>
</section>
<section id="no-loops-ever-allowed" class="level1">
<h1>
No loops ever allowed
</h1>
<p>
10 years ago, I was confronted to a similar problem. I had a pretty huge amount of files on a computer that I needed to analyze for a chapter of my Phd thesis. The way I solved this issue was by writing a loop that looked horrible and did what I needed on each file. It did the job, but it did not look good, and was a nightmare whenever I needed to modify it, which I needed to do often. I had to think about a structure to hold the results; it was a nested list with I think 4 or 5 levels, and I had to keep track of the dimensions in my head to make sure I was writing the right result in the right spot. It wasn’t pleasant. Until this week, I thought that such a loop was the only real solution to such a problem.
</p>
<p>
But a comment on one of my youtube video changed this:
</p>
<div style="text-align:center;">
<p>
<img src="https://b-rodrigues.github.io/assets/img/youtube_comment.png" title="Click to watch the Netflix adaptation of this blog post" width="80%" height="auto">
</p>
</div>
<p>
The comment was made on <a href="https://www.youtube.com/watch?v=vtxb1j0aqJM">this video</a> in which I create a data set like in the introduction to this blog post, but instead of having 2 groups (and thus 2 datasets), I had 100. Now, in the video this wasn’t an issue, but what if instead of having 100 datasets, I had 15k+? And what if these datasets were quite huge? For example, the largest spreadsheet in the Enron Corpus is 40MiB. Loading it with <code>{tidyxl}</code> returns a tibble with 17 million rows, and needs 2GiB of RAM in a clean R session. If you want to read in all the 15k+, you’re simply going to run out of memory even before you could analyze anything. As I’ve written above, the solution would be to loop over each file, do whatever I need done, and save the results in some kind of structure (very likely some complex nested list). Or is it the only solution? Turns out that I tried some things out and found a solution that does not require changing my beloved <code>mutate()</code>-<code>map()</code> workflow.
</p>
<p>
Let’s first start by putting the paths in a data frame:
</p>
<pre class="r"><code>(enron &lt;- enframe(list_paths, name = NULL, value = "paths"))</code></pre>
<pre><code>## # A tibble: 15,871 x 1
##    paths                                                                        
##    &lt;chr&gt;                                                                        
##  1 /home/cbrunos/six_to/spreadsheets/albert_meyers__1__1-25act.xlsx             
##  2 /home/cbrunos/six_to/spreadsheets/albert_meyers__2__1-29act.xlsx             
##  3 /home/cbrunos/six_to/spreadsheets/andrea_ring__10__ENRONGAS(1200).xlsx       
##  4 /home/cbrunos/six_to/spreadsheets/andrea_ring__11__ENRONGAS(0101).xlsx       
##  5 /home/cbrunos/six_to/spreadsheets/andrea_ring__12__ENRONGAS(1200).xlsx       
##  6 /home/cbrunos/six_to/spreadsheets/andrea_ring__13__Trader &amp; Products 5-15-01…
##  7 /home/cbrunos/six_to/spreadsheets/andrea_ring__14__Trader &amp; Products 5-16-01…
##  8 /home/cbrunos/six_to/spreadsheets/andrea_ring__15__IFERCnov.xlsx             
##  9 /home/cbrunos/six_to/spreadsheets/andrea_ring__16__ifercdec.xlsx             
## 10 /home/cbrunos/six_to/spreadsheets/andrea_ring__17__IFERCJan.xlsx             
## # … with 15,861 more rows</code></pre>
<p>
For the purposes of this blog post, let’s limit ourselves to 30 spreadsheets. This won’t impact how the code is going to work, nor memory usage. It’s just that I won’t my post to compile quickly while I’m writing:
</p>
<pre class="r"><code>(enron &lt;- head(enron, 30)) </code></pre>
<pre><code>## # A tibble: 30 x 1
##    paths                                                                        
##    &lt;chr&gt;                                                                        
##  1 /home/cbrunos/six_to/spreadsheets/albert_meyers__1__1-25act.xlsx             
##  2 /home/cbrunos/six_to/spreadsheets/albert_meyers__2__1-29act.xlsx             
##  3 /home/cbrunos/six_to/spreadsheets/andrea_ring__10__ENRONGAS(1200).xlsx       
##  4 /home/cbrunos/six_to/spreadsheets/andrea_ring__11__ENRONGAS(0101).xlsx       
##  5 /home/cbrunos/six_to/spreadsheets/andrea_ring__12__ENRONGAS(1200).xlsx       
##  6 /home/cbrunos/six_to/spreadsheets/andrea_ring__13__Trader &amp; Products 5-15-01…
##  7 /home/cbrunos/six_to/spreadsheets/andrea_ring__14__Trader &amp; Products 5-16-01…
##  8 /home/cbrunos/six_to/spreadsheets/andrea_ring__15__IFERCnov.xlsx             
##  9 /home/cbrunos/six_to/spreadsheets/andrea_ring__16__ifercdec.xlsx             
## 10 /home/cbrunos/six_to/spreadsheets/andrea_ring__17__IFERCJan.xlsx             
## # … with 20 more rows</code></pre>
<p>
Ok, so now, in order to read in all these files, I would write the following code:
</p>
<pre class="r"><code>enron %&gt;%
  mutate(datasets = map(paths, xlsx_cells))</code></pre>
<p>
This would create a new column called <code>datasets</code> where each element would be a complete data set. If I run this in my 30 examples, it might be ok. But if I run it on the full thing, there’s no way I’m not going to run out of RAM. So how to solve this issue? How to run my neat <code>get_stats()</code> function on all datasets if I cannot read in the data? The solution is to only read in the data when I need it, and only one dataset at a time. The solution is to build a <em>lazy</em> tibble. And this is possible using <code>quo()</code>. To quickly grasp what <code>quo()</code> does, let’s try calling the following expression once with, and once without <code>quo()</code>:
</p>
<pre class="r"><code>runif(10)</code></pre>
<pre><code>##  [1] 0.98342755 0.13500737 0.06196822 0.61304269 0.30600919 0.48015570
##  [7] 0.05747049 0.04535318 0.37880304 0.70647563</code></pre>
<p>
This runs <code>runif(10)</code> returning 10 randomly generated numbers, as expected.
</p>
<pre class="r"><code>quo(unif(10))</code></pre>
<pre><code>## &lt;quosure&gt;
## expr: ^unif(10)
## env:  global</code></pre>
<p>
This instead returns a quosure, which to be honest, is a complex beast. I’m not sure I get it myself. The definition, is that quosures are <em>quoted expressions that keep track of an environment</em>. For our practical purposes, we can use that to delay when the data gets read in, and that’s all that matters:
</p>
<pre class="r"><code>(enron &lt;- enron %&gt;%
   mutate(datasets = map(paths, ~quo(xlsx_cells(.)))))</code></pre>
<pre><code>## # A tibble: 30 x 2
##    paths                                                                datasets
##    &lt;chr&gt;                                                                &lt;list&gt;  
##  1 /home/cbrunos/six_to/spreadsheets/albert_meyers__1__1-25act.xlsx     &lt;quosur…
##  2 /home/cbrunos/six_to/spreadsheets/albert_meyers__2__1-29act.xlsx     &lt;quosur…
##  3 /home/cbrunos/six_to/spreadsheets/andrea_ring__10__ENRONGAS(1200).x… &lt;quosur…
##  4 /home/cbrunos/six_to/spreadsheets/andrea_ring__11__ENRONGAS(0101).x… &lt;quosur…
##  5 /home/cbrunos/six_to/spreadsheets/andrea_ring__12__ENRONGAS(1200).x… &lt;quosur…
##  6 /home/cbrunos/six_to/spreadsheets/andrea_ring__13__Trader &amp; Product… &lt;quosur…
##  7 /home/cbrunos/six_to/spreadsheets/andrea_ring__14__Trader &amp; Product… &lt;quosur…
##  8 /home/cbrunos/six_to/spreadsheets/andrea_ring__15__IFERCnov.xlsx     &lt;quosur…
##  9 /home/cbrunos/six_to/spreadsheets/andrea_ring__16__ifercdec.xlsx     &lt;quosur…
## 10 /home/cbrunos/six_to/spreadsheets/andrea_ring__17__IFERCJan.xlsx     &lt;quosur…
## # … with 20 more rows</code></pre>
<p>
This takes less than a second to run, and not just because I only have 30 paths. Even if I was working on the complete 15k+ datasets, this would run in an instant. That’s because we’re actually not reading in anything yet. We’re only setting the scene.
</p>
<p>
The magic happens now: we’re going to now map our function that computes the stats we need. We only need to change one thing. Let’s see:
</p>
<pre class="r"><code>get_stats &lt;- function(x){

  x &lt;- eval_tidy(x)

  tribble(~has_formula, ~n_sheets, ~n_formulas,
          at_least_one_formula(x), n_sheets(x), n_formulas(x))

}</code></pre>
<p>
I’ve added this line:
</p>
<pre class="r"><code>x &lt;- eval_tidy(x)</code></pre>
<p>
This evaluates the quosure, thus instantiating the dataset, and then proceeds to make all the computations. Let’s see what happens when we run this on our lazy tibble:
</p>
<pre class="r"><code>(enron &lt;- enron %&gt;%
   mutate(stats = map(datasets, get_stats)))</code></pre>
<pre><code>## # A tibble: 30 x 3
##    paths                                                  datasets  stats       
##    &lt;chr&gt;                                                  &lt;list&gt;    &lt;list&gt;      
##  1 /home/cbrunos/six_to/spreadsheets/albert_meyers__1__1… &lt;quosure&gt; &lt;tibble [1 …
##  2 /home/cbrunos/six_to/spreadsheets/albert_meyers__2__1… &lt;quosure&gt; &lt;tibble [1 …
##  3 /home/cbrunos/six_to/spreadsheets/andrea_ring__10__EN… &lt;quosure&gt; &lt;tibble [1 …
##  4 /home/cbrunos/six_to/spreadsheets/andrea_ring__11__EN… &lt;quosure&gt; &lt;tibble [1 …
##  5 /home/cbrunos/six_to/spreadsheets/andrea_ring__12__EN… &lt;quosure&gt; &lt;tibble [1 …
##  6 /home/cbrunos/six_to/spreadsheets/andrea_ring__13__Tr… &lt;quosure&gt; &lt;tibble [1 …
##  7 /home/cbrunos/six_to/spreadsheets/andrea_ring__14__Tr… &lt;quosure&gt; &lt;tibble [1 …
##  8 /home/cbrunos/six_to/spreadsheets/andrea_ring__15__IF… &lt;quosure&gt; &lt;tibble [1 …
##  9 /home/cbrunos/six_to/spreadsheets/andrea_ring__16__if… &lt;quosure&gt; &lt;tibble [1 …
## 10 /home/cbrunos/six_to/spreadsheets/andrea_ring__17__IF… &lt;quosure&gt; &lt;tibble [1 …
## # … with 20 more rows</code></pre>
<p>
What happened here is nothing short of black magic: one by one, each quosure was instantiated, and the required stats were computed, then the dataset was thrown into the garbage before moving on to the next quosure. This means that RAM usage was kept to a minimum, and I could have run this over my 15k+ spreadsheets without any issue. You can watch me run similar code in my video <a href="https://youtu.be/DERMZi3Ck20?t=820">here</a>; I show how my RAM usage does not move even though I’m mapping over all the Excel sheets. The column <code>stats</code> now holds one dataframe with one row and three columns for each Excel file. Because <code>stats</code> is a list-column of dataframes, we can use <code>unnest()</code> to get to the data. Let’s take a closer look on one dataframe:
</p>
<pre class="r"><code>enron %&gt;%
  head(1) %&gt;%
  select(paths, stats) %&gt;%
  unnest(cols = stats)</code></pre>
<pre><code>## # A tibble: 1 x 4
##   paths                                          has_formula n_sheets n_formulas
##   &lt;chr&gt;                                          &lt;lgl&gt;          &lt;int&gt;      &lt;int&gt;
## 1 /home/cbrunos/six_to/spreadsheets/albert_meye… TRUE              11       3334</code></pre>
<p>
We see that by using <code>unnest()</code>, the two columns inside the nested dataframe get expanded and become columns of the “main” dataframe.
</p>
<p>
We’re done, but let’s clean up the dataset a little bit and take a look at the results:
</p>
<pre class="r"><code>(
  enron &lt;- enron %&gt;%
    mutate(excel_file = str_remove(paths, "/home/cbrunos/six_to/spreadsheets/")) %&gt;%
    select(-paths, -datasets) %&gt;%
    unnest(cols = stats)
)</code></pre>
<pre><code>## # A tibble: 30 x 4
##    has_formula n_sheets n_formulas excel_file                                   
##    &lt;lgl&gt;          &lt;int&gt;      &lt;int&gt; &lt;chr&gt;                                        
##  1 TRUE              11       3334 albert_meyers__1__1-25act.xlsx               
##  2 TRUE              11       3361 albert_meyers__2__1-29act.xlsx               
##  3 TRUE               4        550 andrea_ring__10__ENRONGAS(1200).xlsx         
##  4 TRUE               4        549 andrea_ring__11__ENRONGAS(0101).xlsx         
##  5 TRUE               4        550 andrea_ring__12__ENRONGAS(1200).xlsx         
##  6 FALSE              0          0 andrea_ring__13__Trader &amp; Products 5-15-01 E…
##  7 FALSE              0          0 andrea_ring__14__Trader &amp; Products 5-16-01 E…
##  8 TRUE               1        169 andrea_ring__15__IFERCnov.xlsx               
##  9 TRUE               1        177 andrea_ring__16__ifercdec.xlsx               
## 10 TRUE               1        162 andrea_ring__17__IFERCJan.xlsx               
## # … with 20 more rows</code></pre>
<p>
Getting some statistics is now easy:
</p>
<pre class="r"><code>enron %&gt;%
  summarise(average_n_formulas = mean(n_formulas),
            max_sheets = max(n_sheets))</code></pre>
<pre><code>## # A tibble: 1 x 2
##   average_n_formulas max_sheets
##                &lt;dbl&gt;      &lt;int&gt;
## 1               490.         11</code></pre>
<p>
By the way, now that we see that the code works, we can run it on all the spreadsheets simply by not running the following line:
</p>
<pre class="r"><code>(enron &lt;- head(enron, 30)) </code></pre>
<p>
Also, we can quite easily run all of this in parallel using <code>{furrr}</code>:
</p>
<pre class="r"><code>library(furrr)</code></pre>
<pre><code>## Loading required package: future</code></pre>
<pre class="r"><code>plan(multiprocess, workers = 12)

enron &lt;- enframe(list_paths, name = NULL, value = "paths")

enron &lt;- head(enron, 1200) #just to compile the document faster, I only consider 1200 Excel spreadsheets

enron &lt;- enron %&gt;%
   mutate(datasets = map(paths, ~quo(xlsx_cells(.))))

start &lt;- Sys.time()
enron &lt;- enron %&gt;%
  mutate(stats = future_map(datasets, get_stats))
Sys.time() - start</code></pre>
<pre><code>## Time difference of 36.86839 secs</code></pre>
<p>
Same code, no parallelization (it takes longer, obviously):
</p>
<pre class="r"><code>enron &lt;- enframe(list_paths, name = NULL, value = "paths")

enron &lt;- head(enron, 1200)

enron &lt;- enron %&gt;%
   mutate(datasets = map(paths, ~quo(xlsx_cells(.))))

start &lt;- Sys.time()
enron &lt;- enron %&gt;%
  mutate(stats = map(datasets, get_stats))
Sys.time() - start</code></pre>
<pre><code>## Time difference of 1.217199 mins</code></pre>
<p>
I think this is pretty neat.
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2021-03-19-no_loops_tidyeval.html</guid>
  <pubDate>Fri, 19 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Using explainability methods to understand (some part) of the spread of COVID-19 in a landlocked country</title>
  <link>https://b-rodrigues.github.io/posts/2021-03-05-covid_lu.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://github.com/b-rodrigues/covid_pred"> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Luxembourg_City_pano_Wikimedia_Commons.jpg/800px-Luxembourg_City_pano_Wikimedia_Commons.jpg" title="Click to go to visualisations" width="80%" height="auto"></a>
</p>
</div>
<p>
<em>This blog post is based on an article I’m currently working on which you can find <a href="https://github.com/b-rodrigues/covid_pred">here</a>. Contributions more than welcome!</em>
</p>
<section id="you-expect-me-to-read-all-this" class="level2">
<h2 class="anchored" data-anchor-id="you-expect-me-to-read-all-this">
“You expect me to read all this?”
</h2>
<p>
The gist of this blog post can be summarised in the following sentence: lagged positive cases of the neighbouring regions of Luxembourg predict weekly positive cases in Luxembourg. But prediction is not the goal of all this, but rather, understanding. Go grab a hot beverage and read on.
</p>
</section>
<section id="introduction" class="level1">
<h1>
Introduction
</h1>
<p>
Due to its quite unique characteristics, the spread of COVID-19 in a landlocked country like Luxembourg is the exact opposite of the spread of COVID-19 that can be observed on an island country such as New Zealand, or Madagascar. A landlocked country like Luxembourg, which is furthermore highly dependent on foreign workers (50% of Luxembourg’s workforce are non-residents commuters from France, Belgium and Germany), has many more difficulties to control the spread of COVID-19 within its borders. Unlike an island country, a landlocked country that is highly tied to its neighbours cannot simply close its borders and put a very hard lockdown in place to control the pandemic. Or if the landlocked country does that, as soon as it opens its borders, the disease will start spreading again. To illustrate this idea, I will discuss how COVID-19 starting spreading, but not only within the borders of Luxembourg, but rather within the so-called Greater Region. The Greater Region is <em>a space for cross-border cooperation in the heart of Europe</em> and is composed of the Grand-Duchy of Luxembourg, two Belgian Provinces, two French Départements and two German Bundesländer.
</p>
<p>
<img src="https://github.com/b-rodrigues/covid_pred/blob/master/paper/figs/commuters.png?raw=true"><!-- -->
</p>
<p>
The figure above shows a map of the Greater Region with the flows of daily commuters between its constituent regions. Every day, according to this map from 2018, more than 150000 commuters go to Luxembourg to work. In 2019, it was reported that this number reached 200000.
</p>
<p>
The approach I will be using here is thus as follows: I will train a machine learning model to predict the spread of COVID-19 in Luxembourg using openly available data on the weekly positive cases of COVID-19. However, because of the very tight economic and social integration of Luxembourg to its neighbours I will use as features weekly positive cases in the border regions as well as <a href="https://www.google.com/covid19/mobility/">Google Mobility data</a> for Luxembourg to proxy for hard, and soft, lockdowns. I will show that lags of weekly cases in the neighbouring regions predict cases for Luxembourg. The end goal however, is <em>not</em> to build a model to predict how many weekly positive cases will be detected in Luxembourg. This would be a fools errand; in order to predict the future, the future has to look like the past, but in the case of this pandemic there is absolutely no guarantee that the future will look like the past, and there are many reasons for this. First of all, people are constantly adapting their behaviour, and public health policies are also constantly being tuned, and getting sometimes more restrictive, sometimes more relaxed. Secondly, vaccines have started being administrated and it would be impossible to predict the effect on weekly positive cases using the approach I’m using. Finally, there’s also the threat of the variants. Here again, it is impossible to predict which new variants could arise and how much more contagious -and deadly- these could be. So then, why bother? The end goal is not prediction, but explainability. Once the model is trained, I will use explainability methods to show which variables, and their interaction with each other, predict positive cases for Luxembourg. This will be a clear illustration of the hypothesis that I posited at the beginning; that a landlocked country like Luxembourg which is very tightly economically and socially integrated with its neighbours cannot fight a pandemic on its own, but must cooperate with its neighbours. This argument can also be applied to any other country in the same situation as Luxembourg or even to the constituent states of a federal nation. Unfortunately, the virus does not respect the borders of sovereign nations.
</p>
<p>
This blog post won’t be a tutorial, I will only present some interesting results. I think that I will do a walkthrough tutorial of the methods that I use here in a video, as it will make things easier to explain.
</p>
</section>
<section id="the-data-to-replicate-the-results" class="level1">
<h1>
The data to replicate the results
</h1>
<p>
Data on positive cases from the regions of the Greater Region was collected through each of the countries’ open data portal. The levels of detail were heterogeneous, with Belgium and Germany providing a high level of detail (daily cases by sex, age group, Province in the case of Belgium, and Land- and Stadtkreise in the case of Germany), followed by France (daily cases by department and age group), with Luxembourg providing the least amount of details; only daily cases at the national level. In order to simplify the process of getting the data from all these sources, I wrote an R package called <code>{covidGrandeRegion}</code> which can be found on the following <a href="https://github.com/b-rodrigues/covidGrandeRegion">github repository</a>. This R package provides several functions to download daily or weekly data, either for one single country or for the whole of the Greater Region as well as a function to call an interactive map of the region with a timeline, making it easy to visualise the spread of the disease through the region. It is also possible to normalize the data by dividing the daily or weekly cases by the size of the population in each sub-region. However, at the time of writing, there seems to be issues if you run this on Windows, and I suspect it’s because of Windows’ limitation with UTF-8 characters. In any case, you can also download the data from <a href="https://github.com/b-rodrigues/covid_pred/blob/master/data/data_for_model.csv">here</a> instead of having to install the package and run the preprocessing steps.
</p>
<p>
Another variable that was included comes from the <a href="https://www.google.com/covid19/mobility/">Google Mobility website</a>. This data shows on a daily basis how communities move since the start of the pandemic. This data is used here as proxy for lockdowns.
</p>
<p>
Let’s take a look at the data:
</p>
<pre class="r"><code>dplyr::glimpse(data.table::fread("https://raw.githubusercontent.com/b-rodrigues/covid_pred/master/data/data_for_model.csv"))</code></pre>
<pre><code>## Rows: 54
## Columns: 18
## $ week               &lt;date&gt; 2020-02-24, 2020-03-02, 2020-03-09, 2020-03-16, 20…
## $ Luxembourg         &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 111.642081, 163.55005…
## $ lag_Belgique_01    &lt;dbl&gt; 0.00000000, 0.08229904, 2.57870326, 11.27496850, 32…
## $ lag_Belgique_02    &lt;dbl&gt; 0.00000000, 0.00000000, 0.08229904, 2.57870326, 11.…
## $ lag_Belgique_03    &lt;dbl&gt; 0.00000000, 0.00000000, 0.00000000, 0.08229904, 2.5…
## $ lag_Belgique_04    &lt;dbl&gt; 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.0…
## $ lag_Deutschland_01 &lt;dbl&gt; 0.0000000, 0.7085512, 2.8145229, 20.5086217, 37.356…
## $ lag_Deutschland_02 &lt;dbl&gt; 0.0000000, 0.0000000, 0.7085512, 2.8145229, 20.5086…
## $ lag_Deutschland_03 &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.7085512, 2.81452…
## $ lag_Deutschland_04 &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.70855…
## $ lag_France_01      &lt;dbl&gt; 0.000000, 0.000000, 2.418298, 42.752058, 38.649588,…
## $ lag_France_02      &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 2.418298, 42.752058, …
## $ lag_France_03      &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 2.418298, 4…
## $ lag_France_04      &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 2…
## $ lag_stay_home_01   &lt;dbl&gt; 0.0000000, 1.2857143, 0.7142857, 3.8571429, 3.85714…
## $ lag_stay_home_02   &lt;dbl&gt; 0.0000000, 0.0000000, 1.2857143, 0.7142857, 3.85714…
## $ lag_stay_home_03   &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 1.2857143, 0.71428…
## $ lag_stay_home_04   &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.0000000, 1.28571…</code></pre>
<p>
The target variable is <code>Luxembourg</code> and contains the weekly positive COVID-19 cases. Then, we can see the weekly positive cases for the French, Belgian and German constituent regions of the Greater Region as well as the Google mobility data (four last rows). All these variables were lagged up to four times: the idea is to show that lagged positive cases of the neighbouring regions predict weekly positive cases in Luxembourg.
</p>
</section>
<section id="visualisations" class="level1">
<h1>
Visualisations
</h1>
<p>
The plot below shows the epidemic curves for the Regions of the Greater Region (by country):
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/covid_lu-3-1.png" width="80%" height="auto">
</p>
<p>
The second wave from October/November was quite bad. The German part of the Greater Region did pretty well overall. The plot below shows the daily percentage change in time spent at home in Luxembourg (from the Google Mobility data):
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/covid_lu-4-1.png" width="80%" height="auto">
</p>
<p>
The lockdown from Spring 2020 appears very clearly in the data. The soft lockdown during the Christmas holidays as well.
</p>
<p>
Now armed with this data, I fit a machine learning model using the <code>{modeltime}</code> package and the <code>{tidymodels}</code> framework. As I said in the beginning, I won’t go into technical details here. I will make a video to explain exactly what I did. In the meantime, let’s take a look at what the model predicts:
</p>
<pre><code>## Warning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning
## -Inf</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/covid_lu-5-1.png" width="80%" height="auto">
</p>
<p>
I did the usual stuff: split the data into a training set and a testing set (and since we’re dealing with time series data, I respected the time structure of the data), fit the model on the training set and saw how well it fared on the testing set. It did not bother tuning it, because, as said previously, prediction is not really the goal, and also, the model is already doing pretty well, which honestly surprised me. The model I fit was an ARIMA model, quite standard in the time series literature, but then, in order to extract even more signal from the noise, an XGBOOST model is fit on the residuals of the ARIMA model. This is where the lagged features come into play. What’s interesting, is that the ARIMA model has 0 for each of its hyper-parameters, meaning that the ARIMA model is essentially telling us that the average weekly cases over the training set are the best predictor it can find. But what about the XGBOOST part of the model? What else can be extracted? This is where explainability comes into play. I use the <code>{DALEX}</code> and <code>{DALEXtra}</code> package for explainability, and show here the variable importance plot. In the paper in the repository, I have more plots and use more methods. But I still need to think more about it. So for this blog post, I focus on this plot which is quite simple to interpret, and also quite telling:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/covid_lu-6-1.png" width="80%" height="auto">
</p>
<p>
It would seem that the single most important feature are the positive cases in Belgium (1, 2 and 3 weeks lags) and cases from the previous week in Germany.
</p>
<p>
This seems to confirm the hypothesis I formulated at the beginning. I will continue exploring this, but I am really looking for feedback as well. Tell me where I’m wrong or too optimistic!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2021-03-05-covid_lu.html</guid>
  <pubDate>Fri, 05 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Server(shiny)-less dashboards with R, {htmlwidgets} and {crosstalk}</title>
  <link>https://b-rodrigues.github.io/posts/2021-03-02-no_shiny_dashboard.html</link>
  <description><![CDATA[ 




<script src="../assets/rmarkdown-libs/header-attrs/header-attrs.js"></script>
<script src="../assets/rmarkdown-libs/htmlwidgets/htmlwidgets.js"></script>
<script src="../assets/rmarkdown-libs/plotly-binding/plotly.js"></script>
<script src="../assets/rmarkdown-libs/typedarray/typedarray.min.js"></script>
<script src="../assets/rmarkdown-libs/jquery/jquery.min.js"></script>
<link href="../assets/rmarkdown-libs/crosstalk/css/crosstalk.css" rel="stylesheet">
<script src="../assets/rmarkdown-libs/crosstalk/js/crosstalk.min.js"></script>
<link href="../assets/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css" rel="stylesheet">
<script src="../assets/rmarkdown-libs/plotly-main/plotly-latest.min.js"></script>
<div style="text-align:center;">
<p>
<a href=""> <img src="https://b-rodrigues.github.io/assets/img/all_dashboards.png" title="Noservers, soon nocode, and a bit later nocomputer" width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<p>
In this blog post, I want to discuss something that I, personally, have never seen discussed; how to create a “serverless” (or “shinyless” you could say) dashboard using R.
</p>
<p>
I made one dashboard like that, which you can find <a href="https://raw.githack.com/b-rodrigues/shinyless_dashboard/master/dashboard.html">here</a>. This dashboard is running on a simple, standard web server. No Shiny involved!
</p>
<p>
The idea is to create a dashboard with simple tables, graphs, and filters, to communicate results without the need for a Shiny server. The “dashboard” will be a simple html file that only needs a good old web server. Or you could even send the rendered html file per email, and the recipient only needs to open it using a web browser. The shortcoming of that, of course, is that this “dashboard”, which is a simple html file will be static; no computation will be possible (well not quite as you’ll see), so you need to precompute everything that you want to show. It won’t also be possible for the users to enter parameters and then have graphs update automatically. For instance, you cannot let a user choose how many days should be used in a moving average. At best, you can compute three variable, each one with a different number of days, and then let the user choose which of these precomputed variables should be drawn.
</p>
<p>
But the first question is, why would we want, or need, something so limited?
</p>
<p>
The advantage of not needing a Shiny server, is that it makes deployment much easier. If you can “deploy” a dashboard that does not need a Shiny server, this means that you don’t need to set up…, well a server. In an institutional setting, this can literally mean you end up saving weeks, sometimes months, of getting the right green lights and signatures. When I worked as a consultant, deployment was definitely the toughest problem to solve (well, toughest maybe after getting access to the data itself). And also, this solution might not be as limited as you think. While it is true that users cannot compute anything on the fly, it is still possible to do a lot of things, which should in all honesty be enough for most use cases. Most users only want or need a glorified Excel with pivot tables and pivot charts. So we’re giving them that, but in a nicer package: the dashboard can be hosted, and users do not have writing rights. That’s honestly all I need in perhaps 90% of the situations.
</p>
<p>
The solution I’m going to present was in front of me for the longest time; it’s just that I did not put 2 and 2 together. The first part of the solution is <code>{flexdashboard}</code>, which is the framework allowing us to build a dashboard. Dashboards made with <code>{flexdashboard}</code> are simple html files, which can have Shiny elements in them, so for instance an interactive plot that gets generated once the user has entered some input. But these dashboards don’t need to have Shiny elements in them; <code>htmlwidgets</code> are enough. What are <code>htmlwidgets</code>? Take a look at the graph below:
</p>
<pre class="r"><code>library(plotly)</code></pre>
<pre class="r"><code>mtcars %&gt;%
  plot_ly(y = ~hp, x = ~mpg, split = ~am)</code></pre>
<pre><code>## No trace type specified:
##   Based on info supplied, a 'scatter' trace seems appropriate.
##   Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter</code></pre>
<pre><code>## No scatter mode specifed:
##   Setting the mode to markers
##   Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode</code></pre>
<div id="htmlwidget-1" class="plotly html-widget" style="width:672px;height:480px;">

</div>
<script type="application/json" data-for="htmlwidget-1">{"x":{"visdat":{"5db310fd169f":["function () ","plotlyVisDat"]},"cur_data":"5db310fd169f","attrs":{"5db310fd169f":{"y":{},"x":{},"split":{},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20]}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"xaxis":{"domain":[0,1],"automargin":true,"title":"mpg"},"yaxis":{"domain":[0,1],"automargin":true,"title":"hp"},"hovermode":"closest","showlegend":true},"source":"A","config":{"showSendToCloud":false},"data":[{"y":[110,175,105,245,62,95,123,123,180,180,180,205,215,230,97,150,150,245,175],"x":[21.4,18.7,18.1,14.3,24.4,22.8,19.2,17.8,16.4,17.3,15.2,10.4,10.4,14.7,21.5,15.5,15.2,13.3,19.2],"type":"scatter","mode":"markers","name":"0","marker":{"color":"rgba(31,119,180,1)","line":{"color":"rgba(31,119,180,1)"}},"error_y":{"color":"rgba(31,119,180,1)"},"error_x":{"color":"rgba(31,119,180,1)"},"line":{"color":"rgba(31,119,180,1)"},"xaxis":"x","yaxis":"y","frame":null},{"y":[110,110,93,66,52,65,66,91,113,264,175,335,109],"x":[21,21,22.8,32.4,30.4,33.9,27.3,26,30.4,15.8,19.7,15,21.4],"type":"scatter","mode":"markers","name":"1","marker":{"color":"rgba(255,127,14,1)","line":{"color":"rgba(255,127,14,1)"}},"error_y":{"color":"rgba(255,127,14,1)"},"error_x":{"color":"rgba(255,127,14,1)"},"line":{"color":"rgba(255,127,14,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
<p>
You can interact with this visualisation, and it’s 100% running in your web browser. No Shiny involved, even though you can zoom and select different levels in the legend on the top right (try double-clicking on the “0” level for instance). This visualisation was made with the <code>{plotly}</code> package, one of the many <code>htmlwidgets</code> available. My favorite for making such visualisations is <code>{echarts4r}</code> which I’ve used to create the <a href="https://covid-grande-region.brodrigues.co/">following map</a> (how-to blog post <a href="https://www.brodrigues.co/blog/2021-02-06-echarts_map/">here</a>). <code>htmlwidgets</code> bring JavaScript visualisations (and other goodies) to R, and what’s really cool about them is that they don’t need a Shiny server to run (that’s the whole point of JavaScript, everything runs in the browser). So this means that by combining <code>{flexdashboard}</code> with the right <code>htmlwidgets</code> we can create a simple, yet useful, dashboard that can be deployed as a web page.
</p>
<p>
To illustrate, I’ve made the <a href="https://raw.githack.com/b-rodrigues/shinyless_dashboard/master/dashboard.html">following dashboard</a>, which shows tables, graphs, and even a pivot table of COVID-19 cases and deaths of the Greater Region (to know more about the Greater Region and why this interests me currently, you can <a href="https://www.brodrigues.co/blog/2021-02-20-covid_paper/">read this</a>).
</p>
<p>
Something else I need to talk about: on the very first tab, you can see a sidebar with some inputs that the user can interact with. For instance, the user can choose which country’s data should appear on the table. It is also possible to filter the positive cases data (not the deaths, but this could be added). This interaction between the sidebar and the table (which was made using <code>{DT}</code>) was made possible using the <code>{crosstalk}</code> package. This package makes it possible to link several <code>htmlwidgets</code> together, but they have to be compatible with <code>{crosstalk}</code>. Unfortunately, at the time of writing, not many <code>htmlwidgets</code> are compatible with <code>{crosstalk}</code> (see <a href="https://rstudio.github.io/crosstalk/widgets.html">here</a>), but I would say that the ones that are compatible still make it possible to create some pretty useful stuff.
</p>
<p>
The only thing you need to do to link <code>htmlwidgets</code> with each other is to convent the dataframe holding your data to a <code>SharedData</code> object:
</p>
<pre class="r"><code>data_set_shared &lt;- SharedData$new(data_set)</code></pre>
<p>
Widgets compatible with <code>{crosstalk}</code> can now use this <code>SharedData</code> object instead of the regular dataframe, and this is how you link them: through this <code>SharedData</code> object.
</p>
<p>
Another tab that uses <code>{crosstalk}</code> is the last one, where you can take a look at the weekly positive cases and deaths for the countries of the Greater Regions (but only for the sub-regions of these countries composing the Greater Region). Here, the user can choose whether deaths or positive cases should be shown. The plot updates immediately, and it’s also possible to focus on a single country by double-clicking on it in the legend on the top-right. Again, it’s also possible to focus on a particular month. Here I wanted to use a slicer like on the first table, but on the date. This should work (I’m using exactly that on another dashboard I made), but for some reason here, it would not work. The dashboard would compile without any error message but trying to open the html file on my browser would make the browser hang. So I settled for another type of slicer. Something else that is quite cool; if you choose to focus on the cases, you can hover the mouse over the bars and see how many cases there were in the sub regions in each country. For this, I had to change the default behavior of the popup in the <code>{plotly}</code> visualisation.
</p>
<p>
Now comes the cherry on top of this already delicious cake; on the second tab, you can interact with a pivot table! This makes it possible to, for instance, see how many deaths there were in each country, region or sub-region, on a weekly basis. You can even switch from a table to several types of visualisations! This pivot table is made possible using the very nice <code>{rpivotTable}</code> package. This package is honestly nuts. It feels like it shouldn’t work so well, and yet, it does work beautifully. Seriously, play around with it in the <a href="https://raw.githack.com/b-rodrigues/shinyless_dashboard/master/dashboard.html#weekly-covid-19-cases-and-deaths-detected-by-country-pivot-table">dashboard</a>, it’s pure magic.
</p>
<p>
One final note; on the top right of the dashboard you can click on “Source Code” and read the dashboard’s source code. You will notice that I use two functions, <code>tar_load()</code> and <code>tar_read()</code> that can be found in the <code>{targets}</code> package. I will be explaining what that is exactly in a subsequent blog post, or perhaps a video on my <a href="https://www.youtube.com/c/BrunoRodrigues1988/videos">youtube channel</a>. You can also see how the inputs in the sidebar work, and how they are linked (through the <code>SharedData</code> object) to the visualisations they control.
</p>
<p>
In any case, I’m quite happy that I found the possibility to develop dashboards without the need of a server, where all the logic is handled client-side by the web browser. I think that this definitely can help many of you that need to communicate results fast to stakeholders without the need to deploy a full server, which can often take quite a long time.
</p>
<section id="bonus" class="level2">
<h2 class="anchored" data-anchor-id="bonus">
Bonus
</h2>
<p>
By the way, yesterday I read the most amazing tweet:
</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Host on GitHub, like you would a normal repo (incl.&nbsp;pics dir etc.)<br><br>GH doesn’t render HTML by default… But you just need to change the root of your URL:<br><br>“github” -&gt; “raw DOT githack”<br><br>(Also delete the “blob/” bit.)<br><br>I host all my lectures and seminar slides this way.
</p>
— Grant McDermott (<span class="citation"><span class="citation" data-cites="grant_mcdermott">@grant_mcdermott</span></span>) <a href="https://twitter.com/grant_mcdermott/status/1366597702339891202?ref_src=twsrc%5Etfw">March 2, 2021</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>
I used this trick to host the dashboard on github!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2021-03-02-no_shiny_dashboard.html</guid>
  <pubDate>Tue, 02 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>R makes it too easy to write papers</title>
  <link>https://b-rodrigues.github.io/posts/2021-02-20-covid_paper.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href=""> <img src="https://b-rodrigues.github.io/assets/img/drake.png" title="Read the blog post to understand this cryptic meme." width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<div>
<p>
I’m currently working on a preprint on the spread of COVID-19 in Luxembourg. My hypothesis is that landlocked countries, especially ones like Luxembourg that have very close ties to their neighbours have a very hard time controlling the pandemic, unlike island countries which can completely close off their borders, impose very drastic quarantine measure to anyone who would still have to come in and successfully wipe out the disease by imposing strict lockdowns and contract tracing measures.
</p>
<p>
In actuality, this started more as a project in which I simply wanted to look at COVID-19 cases for Luxembourg and its neighbouring regions. As I started digging and writing code, this evolved into <a href="https://github.com/b-rodrigues/covidGrandeRegion">this package</a> which makes it easy to download open data on the daily COVID-19 cases from Luxembourg and its neighbours. I also blogged about it <a href="../posts/2021-02-06-echarts_map.html">here</a>. Creating and animating the map that you see in that blog post, I thought about this hypothesis I wanted to test. Maybe it won’t work (preliminary results are <em>encouraging</em> however), but I also took this opportunity to write a preprint using only R, Rmarkdown and packages that make writing something like that easy. This blog post is a shallow review of these tools.
</p>
<p>
By the way, you can take a look at the repo with the preprint <a href="https://github.com/b-rodrigues/covid_pred/tree/master">here</a>, and I’ll be writing about it soon as well.
</p>
</div>
<section id="packages-as-by-products-of-papers" class="level2">
<h2 class="anchored" data-anchor-id="packages-as-by-products-of-papers">
Packages as by-products of papers
</h2>
<p>
The first thing I did was download data from the various open data portals, make sense of it and then plot it. At first, I did so in a very big a messy script file. As time went on, I felt more and more disgusted with this script and wanted to make something cleaner out of it. This is how the package I already mentioned above came to be. It took some time to prepare, but now it simplifies the process of updating my plots and machine learning models much faster. It also makes the paper more “interesting”; not everyone is interesting in the paper itself, but might be interested in the data, or in the process of making the package itself. I think that there are many examples of such packages as by-products of papers, especially papers that present and discuss new methods are very often accompanied by a package to make it easy for readers of the paper to use this new method. Package development is made easy with <code>{usethis}</code>.
</p>
</section>
<section id="starting-a-draft-with-rticles" class="level2">
<h2 class="anchored" data-anchor-id="starting-a-draft-with-rticles">
Starting a draft with {rticles}
</h2>
<p>
The second thing I did was start a draft with <code>{rticles}</code>. This package allows users to start a Rmarkdown draft with a single command. Users can choose among many different drafts for many different journals; I choose the arXiv draft, as I might publish the preprint there. To do so, I used the following command:
</p>
<pre class="r"><code>rmarkdown::draft("paper.Rmd", template = "arxiv", package = "rticles")</code></pre>
<p>
I can now edit this <code>Rmd</code> file and compile it to a nice looking pdf very easily. But I don’t do so in the “traditional” way of knitting the <code>Rmd</code> file from Rstudio (or rather, from Spacemacs, my editor of choice). No, no, for this I use the magnificent <code>{targets}</code> package.
</p>
</section>
<section id="setting-up-a-clean-automated-and-reproducible-workflow-with-targets" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-a-clean-automated-and-reproducible-workflow-with-targets">
Setting up a clean, automated and reproducible workflow with {targets}
</h2>
<p>
<code>{targets}</code> is the latest package by William Landau, who is also the author of <code>{drake}</code>. I was very impressed by <code>{drake}</code> and even made a <a href="https://www.youtube.com/watch?v=yNHwM3N8bAQ">video about it</a> but now <code>{targets}</code> will replace <code>{drake}</code> as THE build automation tool for the R programming language. I started using it for this project, and just like <code>{drake}</code> it’s really an amazing package. It allows you to declare your project as a series of steps, each one of them being a call to a function. It’s very neat, and clean. The dependencies between each of the steps and objects that are created at each step are tracked by <code>{targets}</code> and should one of them get updated (for instance, because you changed the code of the underlying function), every object that depends on it will also get updated once you run the pipeline again.
</p>
<p>
This can get complex very quickly, and here is the network of objects, functions and their dependencies for the preprint I’m writing:
</p>
</section>
<div style="text-align:center;">
<video width="80%" height="auto" controls="">
<source src="../assets/img/targets_network.mp4" type="video/mp4">
Your browser does not support the video tag. </video>
</div>
<div>
<p>
Imagine keeping track of all this in your head. Now I won’t go much into how to use <code>{targets}</code>, because the <a href="https://books.ropensci.org/targets/">user manual</a> is very detailed. Also, you can inspect the repository of my preprint I linked above to figure out the basics of <code>{targets}</code>. What’s really neat though, is that the <code>Rmd</code> file of your paper is also a target that gets built automatically. If you check out my repository, you will see that it’s the last target that is built. And if you check the <code>Rmd</code> file itself, you will see the only R code I use is:
</p>
<pre class="r"><code>tar_load(something)</code></pre>
<p>
<code>tar_load()</code> is a <code>{targets}</code> function that loads an object, in the example above this object is called <code>something</code> and puts it in the paper. For instance, if <code>something</code> is a ggplot object, then this plot will appear on that spot in the paper. It’s really great, because the paper itself gets compiled very quickly once all the targets are built.
</p>
</div>
<section id="machine-learning-and-everything-else" class="level2">
<h2 class="anchored" data-anchor-id="machine-learning-and-everything-else">
Machine learning, and everything else
</h2>
<p>
Last year I wrote a blog post about <code>{tidymodels}</code>, which you can find <a href="../posts/2020-03-08-tidymodels.html">here</a>. Since then, the package evolved, and it’s in my opinion definitely one of the best machine learning packages out there. Just like the other tools I discussed in this blog post, it abstracts away many unimportant idiosyncrasies of many other packages and ways of doing things, and let’s you focus on what matters; getting results and presenting them neatly.
</p>
<p>
I think that this is what I really like about the R programming language, and the ecosystem of packages built on top of it. Combining functional programming, build automation tools, markdown, and all the helper packages like <code>{usethis}</code> make it really easy to go from idea, to paper, or interactive app using <code>{shiny}</code> very quickly.
</p>
</section>


 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2021-02-20-covid_paper.html</guid>
  <pubDate>Sat, 20 Feb 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to draw a map of arbitrary contiguous regions, or visualizing the spread of COVID-19 in the Greater Region</title>
  <link>https://b-rodrigues.github.io/posts/2021-02-06-echarts_map.html</link>
  <description><![CDATA[ 




<div style="text-align:center;">
<p>
<a href="https://happy-newton-bf63ad.netlify.app/"> <img src="https://b-rodrigues.github.io/assets/img/covidGrandeRegion.gif" title="Click to go to visualisations"></a>
</p>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">
Introduction
</h2>
<p>
I was able to blog during the year 2020 without mentioning the ongoing pandemic once. It’s not that I made any conscious effort not to talk about it, but I did not really want to do something that had already been done a 1000 times. This changed this year, when I wanted to look at the spread of COVID-19, not only in the Grand-Duchy of Luxembourg, the country I live in, but also among our neighbours. You see, the Grand-Duchy of Luxembourg is like an island, but instead of being surrounded by water, it’s surrounded by Belgians, Germans and Frenchmen. Many of them commute every day to Luxembourg to work, and even though they technically don’t live inside the country, many aspects of their lives happen inside Luxembourguish borders. Their children might even come to school here, and sometimes they live so close by the border, that they can catch Luxembourguish public transportation in their towns. 200k commuters from Belgium, Germany and France work here every day. That’s half our workforce! So that’s why I thought that it would make sense to look at the spread of the disease at the level of the so-called <em>Greater Region</em>. This <em>Greater Region</em> is made up of the Grand-Duchy of Luxembourg, the Provinces of Liège and Luxembourg in Belgium (hence why I keep writing the <em>Grand-Duchy of</em> Luxembourg to refer to the country, and the <em>Province of Luxembourg</em> to refer to the Belgian province of the same name), and two German <em>Länders</em>, the Saarland and the Rhineland-Palatinate. Confused? Welcome to Europe, where supranational institutions literally have to have a page entitled <a href="https://www.coe.int/en/web/about-us/do-not-get-confused">Do not get confused</a> so that citizens don’t get lost (we still do).
</p>
<p>
So the Greater Region is not a state, but facilitates collaboration between the regions comprising it. To me, technically a citizen of the Greater Region, it feels like there was a want to <strong>peacefully</strong> correct for the randomness of history, where German-speaking regions ended up in both France and Belgium, and where Belgium and Luxembourg, well, somehow became independent countries.
</p>
<p>
Anyways, what I wanted to do was to first of all get the COVID-19 daily cases data for each of these regions. I did that, and even created a package called <code>{covidGrandeRegion}</code> hosted <a href="https://github.com/b-rodrigues/covidGrandeRegion">here</a> that makes it very easy to download the latest data for the Greater Region. I will write another blog post about it, I have something in mind that I wanted to try for some time, and this was the first step. Then I thought that adding a function that would create a map could also be nice. And this is where the technical aspect of this blog post starts.
</p>
</section>
<section id="the-problems-to-map-the-greater-region" class="level2">
<h2 class="anchored" data-anchor-id="the-problems-to-map-the-greater-region">
The problems to map the Greater Region
</h2>
<p>
So how do you draw a map for an arbitrary landmass like the Greater Region? I wanted to draw the maps using <code>{echarts4r}</code>, and there’s a very easy <a href="https://echarts4r.john-coene.com/articles/make-geo-json.html">guide you can read</a>. If you want to draw a map for one, or several, countries, this guide is all you need. But I wanted a map with only parts of France, Belgium and Germany. The only complete country was Luxembourg. So the first problem was how to get only parts of a country. The second problem, is that I had daily covid cases for the lowest administrative levels for France (which are <em>Départements</em>), Belgium (the <em>Provinces</em>) and Germany (<em>Land-</em> and <em>Stadtkreise</em>). But for the Grand-Duchy of Luxembourg, there’s only data at the level of the country. So this would be another problem. How to draw a map with unequal levels of precision? One final problem: the names of the administrative divisions in my covid datasets are not the same than the ones that get downloaded if you follow the guide I linked before. So I had to rename them as well.
</p>
</section>
<section id="the-solutions" class="level2">
<h2 class="anchored" data-anchor-id="the-solutions">
The solutions
</h2>
<p>
Let’s first start by following the guide, so loading the packages, and getting the maps I need:
</p>
<pre class="r"><code>library(echarts4r)
library(sp)
library(raster)
library(geojsonio)</code></pre>
<pre class="r"><code>france_dep &lt;- getData("GADM", country = "FRANCE", level = 2)

ger_kreise &lt;- getData("GADM", country = "GERMANY", level = 2)

be_province &lt;- getData("GADM", country = "BELGIUM", level = 2)</code></pre>
<p>
The above lines of code load the required packages, and download the maps for France, Belgium and Germany with the required administrative level I need. I’ll leave Luxembourg for last.
</p>
<p>
Let’s take a look at what type of object we’re dealing with:
</p>
<pre class="r"><code>class(france_dep)</code></pre>
<pre><code>## [1] "SpatialPolygonsDataFrame"
## attr(,"package")
## [1] "sp"</code></pre>
<p>
So it seems to be something like a data frame, but probably more complex. Looking for some help online, I saw that you can coerce it to a data frame:
</p>
<pre class="r"><code>as.data.frame(be_province)</code></pre>
<pre><code>##    GID_0  NAME_0   GID_1     NAME_1 NL_NAME_1     GID_2          NAME_2
## 1    BEL Belgium BEL.1_1  Bruxelles      &lt;NA&gt; BEL.1.1_1       Bruxelles
## 2    BEL Belgium BEL.2_1 Vlaanderen      &lt;NA&gt; BEL.2.1_1       Antwerpen
## 3    BEL Belgium BEL.2_1 Vlaanderen      &lt;NA&gt; BEL.2.2_1         Limburg
## 4    BEL Belgium BEL.2_1 Vlaanderen      &lt;NA&gt; BEL.2.3_1 Oost-Vlaanderen
## 5    BEL Belgium BEL.2_1 Vlaanderen      &lt;NA&gt; BEL.2.4_1  Vlaams Brabant
## 6    BEL Belgium BEL.2_1 Vlaanderen      &lt;NA&gt; BEL.2.5_1 West-Vlaanderen
## 7    BEL Belgium BEL.3_1   Wallonie      &lt;NA&gt; BEL.3.1_1  Brabant Wallon
## 8    BEL Belgium BEL.3_1   Wallonie      &lt;NA&gt; BEL.3.2_1         Hainaut
## 9    BEL Belgium BEL.3_1   Wallonie      &lt;NA&gt; BEL.3.3_1           Liège
## 10   BEL Belgium BEL.3_1   Wallonie      &lt;NA&gt; BEL.3.4_1      Luxembourg
## 11   BEL Belgium BEL.3_1   Wallonie      &lt;NA&gt; BEL.3.5_1           Namur
##                                                                                                             VARNAME_2
## 1  Brussel Hoofstadt|Brusselse Hoofdstedelijke Gewest|Brüssel|Bruxelas|Région de Bruxelles-Capitale|Brussels|Bruselas
## 2                                                                            Amberes|Antuérpia|Antwerp|Anvers|Anversa
## 3                                                                                                   Limbourg|Limburgo
## 4                   Flandres Oriental|Fiandra Orientale|Flandes Oriental|Flandre orientale|East Flanders|Ost Flandern
## 5                                                 Brabant Flamand|Brabante Flamenco|Brabante Flamengo|Flemish Brabant
## 6           Fiandra Occidentale|Flandes Occidental|Flandre occidentale|Flandres Ocidental|West Flandern|West Flanders
## 7                                                                                       Waals Brabant|Walloon Brabant
## 8                                                                                                 Henegouwen|Hennegau
## 9                                                                                            Luik|Liegi|Lieja|Lüttich
## 10                                                                                   Lussemburgo|Luxemburg|Luxemburgo
## 11                                                                                                              Namen
##    NL_NAME_2                                TYPE_2      ENGTYPE_2 CC_2 HASC_2
## 1       &lt;NA&gt; Hoofdstedelijk Gewest|Région Capitale Capital Region &lt;NA&gt;  BE.BU
## 2       &lt;NA&gt;                             Provincie       Province &lt;NA&gt;  BE.AN
## 3       &lt;NA&gt;                             Provincie       Province &lt;NA&gt;  BE.LI
## 4       &lt;NA&gt;                             Provincie       Province &lt;NA&gt;  BE.OV
## 5       &lt;NA&gt;                             Provincie       Province &lt;NA&gt;  BE.VB
## 6       &lt;NA&gt;                             Provincie       Province &lt;NA&gt;  BE.WV
## 7       &lt;NA&gt;                              Province      Provincie &lt;NA&gt;  BE.BW
## 8       &lt;NA&gt;                              Province      Provincie &lt;NA&gt;  BE.HT
## 9       &lt;NA&gt;                              Province      Provincie &lt;NA&gt;  BE.LG
## 10      &lt;NA&gt;                              Province      Provincie &lt;NA&gt;  BE.LX
## 11      &lt;NA&gt;                              Province      Provincie &lt;NA&gt;  BE.NA</code></pre>
<p>
We’re not going to convert them to data frames however; but this is an interesting clue; these <code>SpatialPolygonsDataFrame</code> objects share common methods with data frames. What this means is that we can use the usual, base R way of manipulating these objects.
</p>
<p>
So to get only the French <em>départements</em> I need, I can slice them like so:
</p>
<pre class="r"><code>lorraine &lt;- france_dep[`%in%`(france_dep$NAME_2, c("Meurthe-et-Moselle", "Meuse", "Moselle", "Vosges")),]</code></pre>
<p>
Same for the German <em>kreise</em>, here I select the <em>Länder</em> which are a higher administrative division than the Kreise, which makes it faster (so I don’t need to type all the 40+ Kreise):
</p>
<pre class="r"><code>ger_kreise &lt;- ger_kreise[`%in%`(ger_kreise$NAME_1, c("Rheinland-Pfalz", "Saarland")),]</code></pre>
<p>
For Germany, many Kreise had a name which was different than on my covid data, so I had to rename them. So here again, the base R way of doing things works:
</p>
<pre class="r"><code>ger_kreise$NAME_2[ger_kreise$NAME_2 == "Eifelkreis Bitburg-Prüm"]  &lt;- "Bitburg-Prüm"
ger_kreise$NAME_2[ger_kreise$NAME_2 == "St. Wendel"]  &lt;- "Sankt Wendel"
ger_kreise$NAME_2[ger_kreise$NAME_2 == "Altenkirchen (Westerwald)"]  &lt;- "Altenkirchen"
ger_kreise$NAME_2[ger_kreise$NAME_2 == "Neustadt an der Weinstraße"]  &lt;- "Neustadt a.d.Weinstraße"
ger_kreise$NAME_2[ger_kreise$NAME_2 == "Landau in der Pfalz"]  &lt;- "Landau i.d.Pfalz"
ger_kreise$NAME_2[ger_kreise$NAME_2 == "Ludwigshafen am Rhein"]  &lt;- "Ludwigshafen"
ger_kreise$NAME_2[ger_kreise$NAME_2 == "Frankenthal (Pfalz)"]  &lt;- "Frankenthal"</code></pre>
<p>
Finally, I do the same for Belgium, and rename their province of Luxembourg, which was simply called “Luxembourg”, to “Province de Luxembourg”:
</p>
<pre class="r"><code>be_wallonia &lt;- be_province[be_province$NAME_1 == "Wallonie", ]
be_wallonia$NAME_2[be_wallonia$NAME_2 == "Luxembourg"]  &lt;- "Province de Luxembourg"</code></pre>
<p>
I rename the province because the Grand-Duchy of Luxembourg is also only called “Luxembourg” in the data, and this would cause issues when mapping.
</p>
<p>
Now, comes Luxembourg. As I’ve written above, I only have data at the level of the country, so I download the country map:
</p>
<pre class="r"><code>lu_map_0 &lt;- getData("GADM", country = "LUXEMBOURG", level = 0)</code></pre>
<p>
Let’s also see how it looks like as a data frame:
</p>
<pre class="r"><code>as.data.frame(lu_map_0)</code></pre>
<pre><code>##   GID_0     NAME_0
## 1   LUX Luxembourg</code></pre>
<p>
Unlike the previous <code>SpatialPolygonsDataFrame</code>s, there are much less columns and this will cause an issue. Indeed, in order to have a single <code>SpatialPolygonsDataFrame</code> object to draw my map, I will need to combine them. This will be very easy, by simple using the <code>rbind()</code> function. Again, simply using base R functions. However, this only works if the data frames have the same columns. Another issue, is that I will be using the names of the regions which are in the <code>SpatialPolygonsDataFrame</code>s’ column called <code>NAME_2</code>, but for Luxembourg, the name of the region (in this case the whole country) is in the column called <code>NAME_0</code>. So I need to add this columns to the <code>SpatialPolygonsDataFrame</code> object for Luxembourg:
</p>
<pre class="r"><code>lu_map_0$GID_1 &lt;- NA
lu_map_0$NAME_1 &lt;- NA
lu_map_0$NL_NAME_1 &lt;- NA
lu_map_0$GID_2 &lt;- NA
lu_map_0$NAME_2 &lt;- "Luxembourg"
lu_map_0$VARNAME_2 &lt;- NA
lu_map_0$NL_NAME_2 &lt;- NA
lu_map_0$TYPE_2 &lt;- NA
lu_map_0$ENGTYPE_2 &lt;- NA
lu_map_0$CC_2 &lt;- NA
lu_map_0$HASC_2 &lt;- NA</code></pre>
<p>
Aaaand… that’s it! Wasn’t that hard, but a bit convoluted nonetheless. Now I can bind all the <code>SpatialPolygonsDataFrame</code> objects in one and use that for mapping:
</p>
<pre class="r"><code>grande_region &lt;- do.call(rbind, list(lorraine, ger_kreise, be_wallonia, lu_map_0))

as.data.frame(grande_region)</code></pre>
<pre><code>##     GID_0     NAME_0    GID_1          NAME_1 NL_NAME_1       GID_2
## 76    FRA     France  FRA.6_1       Grand Est      &lt;NA&gt;   FRA.6.7_1
## 77    FRA     France  FRA.6_1       Grand Est      &lt;NA&gt;   FRA.6.8_1
## 78    FRA     France  FRA.6_1       Grand Est      &lt;NA&gt;   FRA.6.9_1
## 70    FRA     France  FRA.6_1       Grand Est      &lt;NA&gt;  FRA.6.10_1
## 99    DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.1_1
## 110   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.2_1
## 121   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.3_1
## 129   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.4_1
## 130   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.5_1
## 131   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.6_1
## 132   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.7_1
## 133   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.8_1
## 134   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt;  DEU.11.9_1
## 100   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.10_1
## 101   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.11_1
## 102   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.12_1
## 104   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.14_1
## 103   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.13_1
## 105   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.15_1
## 106   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.16_1
## 107   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.17_1
## 108   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.18_1
## 111   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.20_1
## 109   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.19_1
## 112   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.21_1
## 113   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.22_1
## 114   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.23_1
## 115   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.24_1
## 116   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.25_1
## 117   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.26_1
## 118   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.27_1
## 119   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.28_1
## 120   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.29_1
## 122   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.30_1
## 124   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.32_1
## 123   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.31_1
## 125   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.33_1
## 126   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.34_1
## 127   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.35_1
## 128   DEU    Germany DEU.11_1 Rheinland-Pfalz      &lt;NA&gt; DEU.11.36_1
## 135   DEU    Germany DEU.12_1        Saarland      &lt;NA&gt;  DEU.12.1_1
## 136   DEU    Germany DEU.12_1        Saarland      &lt;NA&gt;  DEU.12.2_1
## 137   DEU    Germany DEU.12_1        Saarland      &lt;NA&gt;  DEU.12.3_1
## 138   DEU    Germany DEU.12_1        Saarland      &lt;NA&gt;  DEU.12.4_1
## 139   DEU    Germany DEU.12_1        Saarland      &lt;NA&gt;  DEU.12.5_1
## 140   DEU    Germany DEU.12_1        Saarland      &lt;NA&gt;  DEU.12.6_1
## 7     BEL    Belgium  BEL.3_1        Wallonie      &lt;NA&gt;   BEL.3.1_1
## 8     BEL    Belgium  BEL.3_1        Wallonie      &lt;NA&gt;   BEL.3.2_1
## 9     BEL    Belgium  BEL.3_1        Wallonie      &lt;NA&gt;   BEL.3.3_1
## 10    BEL    Belgium  BEL.3_1        Wallonie      &lt;NA&gt;   BEL.3.4_1
## 11    BEL    Belgium  BEL.3_1        Wallonie      &lt;NA&gt;   BEL.3.5_1
## 1     LUX Luxembourg     &lt;NA&gt;            &lt;NA&gt;      &lt;NA&gt;        &lt;NA&gt;
##                                NAME_2                        VARNAME_2
## 76                 Meurthe-et-Moselle                             &lt;NA&gt;
## 77                              Meuse                             &lt;NA&gt;
## 78                            Moselle                       Lothringen
## 70                             Vosges                             &lt;NA&gt;
## 99                          Ahrweiler                             &lt;NA&gt;
## 110                      Altenkirchen                             &lt;NA&gt;
## 121                       Alzey-Worms                             &lt;NA&gt;
## 129                      Bad Dürkheim                             &lt;NA&gt;
## 130                     Bad Kreuznach                             &lt;NA&gt;
## 131               Bernkastel-Wittlich                             &lt;NA&gt;
## 132                        Birkenfeld                             &lt;NA&gt;
## 133                       Cochem-Zell                             &lt;NA&gt;
## 134                  Donnersbergkreis                             &lt;NA&gt;
## 100                      Bitburg-Prüm                             &lt;NA&gt;
## 101                       Frankenthal                             &lt;NA&gt;
## 102                       Germersheim                             &lt;NA&gt;
## 104                    Kaiserslautern                             &lt;NA&gt;
## 103 Kaiserslautern (Kreisfreie Stadt)                             &lt;NA&gt;
## 105                           Koblenz                             &lt;NA&gt;
## 106                             Kusel                             &lt;NA&gt;
## 107                  Landau i.d.Pfalz                             &lt;NA&gt;
## 108                      Ludwigshafen                             &lt;NA&gt;
## 111                             Mainz                             &lt;NA&gt;
## 109                      Mainz-Bingen                             &lt;NA&gt;
## 112                     Mayen-Koblenz                             &lt;NA&gt;
## 113           Neustadt a.d.Weinstraße                             &lt;NA&gt;
## 114                           Neuwied                             &lt;NA&gt;
## 115                         Pirmasens                             &lt;NA&gt;
## 116              Rhein-Hunsrück-Kreis                             &lt;NA&gt;
## 117                  Rhein-Lahn-Kreis                             &lt;NA&gt;
## 118                 Rhein-Pfalz-Kreis                             &lt;NA&gt;
## 119                            Speyer                             &lt;NA&gt;
## 120               Südliche Weinstraße                             &lt;NA&gt;
## 122                      Südwestpfalz                             &lt;NA&gt;
## 124                             Trier                             &lt;NA&gt;
## 123                    Trier-Saarburg                             &lt;NA&gt;
## 125                       Vulkaneifel                             &lt;NA&gt;
## 126                   Westerwaldkreis                             &lt;NA&gt;
## 127                             Worms                             &lt;NA&gt;
## 128                       Zweibrücken                             &lt;NA&gt;
## 135                     Merzig-Wadern                             &lt;NA&gt;
## 136                       Neunkirchen                             &lt;NA&gt;
## 137       Regionalverband Saarbrücken                             &lt;NA&gt;
## 138                         Saarlouis                             &lt;NA&gt;
## 139                   Saarpfalz-Kreis                             &lt;NA&gt;
## 140                      Sankt Wendel                             &lt;NA&gt;
## 7                      Brabant Wallon    Waals Brabant|Walloon Brabant
## 8                             Hainaut              Henegouwen|Hennegau
## 9                               Liège         Luik|Liegi|Lieja|Lüttich
## 10             Province de Luxembourg Lussemburgo|Luxemburg|Luxemburgo
## 11                              Namur                            Namen
## 1                          Luxembourg                             &lt;NA&gt;
##     NL_NAME_2           TYPE_2  ENGTYPE_2  CC_2   HASC_2
## 76       &lt;NA&gt;      Département Department    54    FR.MM
## 77       &lt;NA&gt;      Département Department    55    FR.MS
## 78       &lt;NA&gt;      Département Department    57    FR.MO
## 70       &lt;NA&gt;      Département Department    88    FR.VG
## 99       &lt;NA&gt;        Landkreis   District 07131 DE.RP.AR
## 110      &lt;NA&gt;        Landkreis   District 07132 DE.RP.AT
## 121      &lt;NA&gt;        Landkreis   District 07331 DE.RP.AW
## 129      &lt;NA&gt;        Landkreis   District 07332 DE.RP.BD
## 130      &lt;NA&gt;        Landkreis   District 07133 DE.RP.BK
## 131      &lt;NA&gt;        Landkreis   District 07231 DE.RP.BW
## 132      &lt;NA&gt;        Landkreis   District 07134 DE.RP.BR
## 133      &lt;NA&gt;        Landkreis   District 07135 DE.RP.CZ
## 134      &lt;NA&gt;        Landkreis   District 07333 DE.RP.DN
## 100      &lt;NA&gt;        Landkreis   District 07232 DE.RP.EB
## 101      &lt;NA&gt; Kreisfreie Stadt   District 07311 DE.RP.FA
## 102      &lt;NA&gt;        Landkreis   District 07334 DE.RP.GR
## 104      &lt;NA&gt;        Landkreis   District 07335 DE.RP.KL
## 103      &lt;NA&gt; Kreisfreie Stadt   District 07312 DE.RP.KL
## 105      &lt;NA&gt; Kreisfreie Stadt   District 07111 DE.RP.KO
## 106      &lt;NA&gt;        Landkreis   District 07336 DE.RP.KU
## 107      &lt;NA&gt; Kreisfreie Stadt   District 07313 DE.RP.LP
## 108      &lt;NA&gt; Kreisfreie Stadt   District 07314 DE.RP.LR
## 111      &lt;NA&gt; Kreisfreie Stadt   District 07315 DE.RP.MI
## 109      &lt;NA&gt;        Landkreis   District 07339 DE.RP.MB
## 112      &lt;NA&gt;        Landkreis   District 07137 DE.RP.MK
## 113      &lt;NA&gt; Kreisfreie Stadt   District 07316 DE.RP.NW
## 114      &lt;NA&gt;        Landkreis   District 07138 DE.RP.NU
## 115      &lt;NA&gt; Kreisfreie Stadt   District 07317 DE.RP.PR
## 116      &lt;NA&gt;        Landkreis   District 07140 DE.RP.RH
## 117      &lt;NA&gt;        Landkreis   District 07141 DE.RP.RN
## 118      &lt;NA&gt;        Landkreis   District 07338 DE.RP.RZ
## 119      &lt;NA&gt; Kreisfreie Stadt   District 07318 DE.RP.SE
## 120      &lt;NA&gt;        Landkreis   District 07337 DE.RP.SW
## 122      &lt;NA&gt;        Landkreis   District 07340 DE.RP.SD
## 124      &lt;NA&gt; Kreisfreie Stadt   District 07211 DE.RP.TI
## 123      &lt;NA&gt;        Landkreis   District 07235 DE.RP.TS
## 125      &lt;NA&gt;        Landkreis   District 07233 DE.RP.VL
## 126      &lt;NA&gt;        Landkreis   District 07143 DE.RP.WS
## 127      &lt;NA&gt; Kreisfreie Stadt   District 07319 DE.RP.WR
## 128      &lt;NA&gt; Kreisfreie Stadt   District 07320 DE.RP.ZE
## 135      &lt;NA&gt;        Landkreis   District 10042 DE.SL.MW
## 136      &lt;NA&gt;        Landkreis   District 10043 DE.SL.NU
## 137      &lt;NA&gt;        Landkreis   District 10041 DE.SL.SB
## 138      &lt;NA&gt;        Landkreis   District 10044 DE.SL.SA
## 139      &lt;NA&gt;        Landkreis   District 10045 DE.SL.SP
## 140      &lt;NA&gt;        Landkreis   District 10046 DE.SL.SW
## 7        &lt;NA&gt;         Province  Provincie  &lt;NA&gt;    BE.BW
## 8        &lt;NA&gt;         Province  Provincie  &lt;NA&gt;    BE.HT
## 9        &lt;NA&gt;         Province  Provincie  &lt;NA&gt;    BE.LG
## 10       &lt;NA&gt;         Province  Provincie  &lt;NA&gt;    BE.LX
## 11       &lt;NA&gt;         Province  Provincie  &lt;NA&gt;    BE.NA
## 1        &lt;NA&gt;             &lt;NA&gt;       &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;</code></pre>
<p>
And now I can continue following the tutorial from the <code>{echarts4r}</code> website, by converting this <code>SpatialPolygonsDataFrame</code> object for the Greater Region into a geojson file which can now be used to draw maps! You can take a look at the final result <a href="https://happy-newton-bf63ad.netlify.app/">here</a>.
</p>
<p>
I don’t post the code to draw the map here, because it would require some more tinkering by joining the COVID data. But you can find my raw script <a href="https://github.com/b-rodrigues/covidGrandeRegion/blob/master/data-raw/maps.R">here</a> (lines 51 to 61) or you could also take a look at the <code>draw_map()</code> function from the package I made, which you can find <a href="https://github.com/b-rodrigues/covidGrandeRegion/blob/master/R/draw_map.R">here</a>.
</p>
<p>
I really like the end result, <code>{echarts4r}</code> is really a fantastic package! Stay tuned part 2 of the project, which will deal with machine learning.
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2021-02-06-echarts_map.html</guid>
  <pubDate>Sat, 06 Feb 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A year in review</title>
  <link>https://b-rodrigues.github.io/posts/2020-12-30-year_review.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<link href="../rmarkdown-libs/anchor-sections/anchor-sections.css" rel="stylesheet">
<script src="../rmarkdown-libs/anchor-sections/anchor-sections.js"></script>
<div style="text-align:center;">
<p>
<a href=""> <img src="https://b-rodrigues.github.io/assets/img/2020_review.png" title="It wasn't the worst year ever, but it was quite crap." width="80%" height="auto"></a>
</p>
</div>
<script src="https://www.sciencemag.org/news/2018/11/why-536-was-worst-year-be-alive"></script>
<p>
This blog post just contains the links I mention in my video that you can watch <a href="https://youtu.be/Z5xNALiILzg">here</a>.
</p>
<p>
I mention the following books, packages, and people in my video:
</p>
<ul>
<li>
<a href="https://echarts4r.john-coene.com/index.html">echarts4r</a>
</li>
<li>
<a href="https://wlandau.github.io/targets/">targets</a>
</li>
<li>
<a href="https://github.com/easystats">easystats</a>
</li>
<li>
<a href="https://hhsievertsen.github.io/applied_econ_with_r/#Welcome">Applied Economics with R</a>
</li>
<li>
<a href="https://github.com/coolbutuseless?tab=repositories">coolbutuseless</a>
</li>
<li>
<a href="https://www.youtube.com/channel/UCKxHtRdtFEPihEjTtjG8Y8w/featured">Data Science ZJ</a> and <a href="https://diskframe.com/">disk.frame</a>
</li>
<li>
<a href="https://www.youtube.com/watch?v=4WVelCswXo4&amp;list=PLDcUM9US4XdNM4Edgs7weiyIguLSToZRI">Statistical Rethinking</a>
</li>
<li>
<a href="https://thinkr-open.github.io/golem/">Golem</a> and <a href="https://engineering-shiny.org/">Engineering production-grade shiny apps</a>
</li>
<li>
<a href="https://moderndive.com/">ModernDive</a>
</li>
</ul>
<p>
Many others created and shared amazing content during the year, so sorry I could not mention everyone!
</p>
<p>
Happy new year to all and thank you for the ongoing support!
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-12-30-year_review.html</guid>
  <pubDate>Wed, 30 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>(Half) Lies, (half) truths and (half) statistics</title>
  <link>https://b-rodrigues.github.io/posts/2020-12-12-ethics_statistics.html</link>
  <description><![CDATA[ 




<script src="../assets/rmarkdown-libs/header-attrs/header-attrs.js"></script>
<link href="../assets/rmarkdown-libs/anchor-sections/anchor-sections.css" rel="stylesheet">
<script src="../assets/rmarkdown-libs/anchor-sections/anchor-sections.js"></script>
<script src="../assets/rmarkdown-libs/htmlwidgets/htmlwidgets.js"></script>
<script src="../assets/rmarkdown-libs/d3/d3.min.js"></script>
<script src="../assets/rmarkdown-libs/d3-lasso/d3-lasso.min.js"></script>
<link href="../assets/rmarkdown-libs/ggiraphjs/styles.css" rel="stylesheet">
<script src="../assets/rmarkdown-libs/ggiraphjs/ggiraphjs.min.js"></script>
<script src="../assets/rmarkdown-libs/girafe-binding/girafe.js"></script>
<div style="text-align:center;">
<p>
<a href=""> <img src="https://b-rodrigues.github.io/assets/img/simpson.gif" title="Sometimes, simple does not mean trivial, but many confuse the two." width="80%" height="auto"></a>
</p>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<p>
<em>Note: if you’re reading this and images are not showing, visit the original post on my blog. The blog post contains interactive plots which help in understanding the point I’m making.</em>
</p>
<p>
I’ve recently come across this graph (on Twitter) from the Economist:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/economist_safe_vaccines.png" width="80%" height="auto">
</p>
<p>
You can read the article <a href="https://archive.is/EcdNZ">here</a> (archived for posterity). There are many things wrong with this chart. First of all, the economist is fitting a linear regression to some data points, and does not provide anything else to the reader, namely the regression coefficients, their standard errors, and the R². I know already that some readers will disagree, thinking something along the lines of “But Bruno, come on, this is only to show that’s there a negative correlation between GDP per capita and trust in vaccines! The readers don’t need to be bothered with these complex concepts. This is just an illustration, and it’s good enough.”
</p>
<p>
WRONG.
</p>
<p>
Look, I’m all for good enough. That’s very likely going to be my epitaph. But sometimes, you can’t simplify things so much that they’re not only misleading, but lies. In this case here, the relationship between GDP per capita and trust in vaccines, if there is any, is probably highly nonlinear, and very difficult to pinpoint with any degree of accuracy. But before going further, let’s get the data and replicate the graph. I’ll be adding the equation of the regression line as well as the R² to the plot. I won’t comment my code, since the point of this blog post is not to teach you how to do it, but of course, you’re very welcome to reproduce the analysis.
</p>
<p>
You can download the data <a href="https://wellcome.org/reports/wellcome-global-monitor/2018/appendix-country-level-data">here</a>, under “Full dataset for this chart”. You can also grab a csv version <a href="https://gist.githubusercontent.com/b-rodrigues/388f6309a462c9ccbdf00f32ac9055cb/raw/92962f08f9e23b9a8586045291795f4ab21ad053/wgm2018.csv">here</a>.
</p>
<details>
<summary>
Click to see the code
</summary>
<pre class="r"><code>library(tidyverse)
library(ggiraph)

dataset &lt;- data.table::fread("https://gist.githubusercontent.com/b-rodrigues/388f6309a462c9ccbdf00f32ac9055cb/raw/92962f08f9e23b9a8586045291795f4ab21ad053/wgm2018.csv")

dataset &lt;- dataset %&gt;%
  filter(grepl("(GDP per capita)|(Q25)", question_statistic)) %&gt;%
  mutate(response_type = ifelse(response_type == "", "GDP per capita", response_type)) %&gt;%
  filter(grepl("(National Total)|(GDP)", response_type)) %&gt;%
  mutate(response_type = str_remove(response_type, "National Total: ")) %&gt;%
  select(country_name, response = response_type, value = result_percent) %&gt;%
  mutate(gdp_per_capita = ifelse(grepl("GDP", response), value, NA)) %&gt;% 
  fill(gdp_per_capita, .direction = "down") %&gt;%
  filter(!grepl("GDP", response))  %&gt;%
  mutate(gdp_per_capita = as.numeric(gdp_per_capita),
         value = as.numeric(value),
         l_gdp = log(gdp_per_capita))</code></pre>
<pre class="r"><code>plot_data &lt;- dataset %&gt;%
  mutate(agree = ifelse(grepl(" agree$", response), "safe", "not_safe")) %&gt;%  
  group_by(country_name, l_gdp, agree) %&gt;% 
  summarise(value = sum(value)) %&gt;%
  filter(agree == "safe")</code></pre>
<pre><code>## `summarise()` regrouping output by 'country_name', 'l_gdp' (override with `.groups` argument)</code></pre>
<pre class="r"><code>lin_mod &lt;- lm(value ~ l_gdp, data = plot_data)

lin_mod_coefs &lt;- coefficients(lin_mod)
lin_mod_se &lt;- sqrt(diag(vcov(lin_mod)))

regression_line_result &lt;- paste0("value = ",
       round(lin_mod_coefs[1], 2),
       "[",
       round(lin_mod_se[1], 2),
       "]",
       round(lin_mod_coefs[2], 2),
       "[",
       round(lin_mod_se[2], 2),
       "]",
       "*l_gdp",
       ",\n R2 = ",
       round(summary(lin_mod)$r.squared, 2))

my_plot &lt;- plot_data %&gt;%
  ggplot(aes(y = value, x = l_gdp)) +
  geom_point_interactive(aes(tooltip = country_name), colour = "orange") +
  #geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  #ggrepel::geom_label_repel(aes(label = country_name)) +
  geom_text(y = 35, x = 8,
            label = regression_line_result,
            colour = "white",
            size = 3) +
  brotools::theme_blog()</code></pre>
</details>
<p>
If you look at the code above, you’ll see that I’m doing a bunch of stuff to reproduce the graph. Let’s take a look at it (you can mouse over the points to see the country names over the labels):
</p>
<pre class="r"><code>girafe(ggobj = my_plot, width_svg = 8)</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<div id="htmlwidget-1" class="girafe html-widget" style="width:672px;height:480px;">

</div>
<script type="application/json" data-for="htmlwidget-1">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621\" viewBox=\"0 0 576.00 360.00\">\n  <g>\n    <defs>\n      <clipPath id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_1\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_1\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_1)\" fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-width=\"0.75\" stroke=\"#FFFFFF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <defs>\n      <clipPath id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_2\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_2\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_2)\" fill=\"#272B30\" fill-opacity=\"1\" stroke-width=\"1.06698\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <defs>\n      <clipPath id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3\">\n        <rect x=\"40.25\" y=\"5.48\" width=\"530.27\" height=\"322.82\"/>\n      <\/clipPath>\n    <\/defs>\n    <polyline points=\"40.25,309.31 570.52,309.31\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_3\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,222.99 570.52,222.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_4\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,136.68 570.52,136.68\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_5\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,50.36 570.52,50.36\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_6\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"54.78,328.30 54.78,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_7\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"152.14,328.30 152.14,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_8\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"249.50,328.30 249.50,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_9\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"346.86,328.30 346.86,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_10\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"444.22,328.30 444.22,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_11\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"541.58,328.30 541.58,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_12\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,266.15 570.52,266.15\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_13\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,179.84 570.52,179.84\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_14\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,93.52 570.52,93.52\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_15\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,7.21 570.52,7.21\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_16\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"103.46,328.30 103.46,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_17\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"200.82,328.30 200.82,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_18\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"298.18,328.30 298.18,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_19\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"395.54,328.30 395.54,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_20\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"492.90,328.30 492.90,5.48\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_21\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <circle cx=\"160.60\" cy=\"33.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_22\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Afghanistan\"/>\n    <circle cx=\"343.78\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_23\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Albania\"/>\n    <circle cx=\"359.81\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_24\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Algeria\"/>\n    <circle cx=\"389.89\" cy=\"58.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_25\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Argentina\"/>\n    <circle cx=\"315.17\" cy=\"257.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_26\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Armenia\"/>\n    <circle cx=\"472.31\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_27\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Australia\"/>\n    <circle cx=\"479.91\" cy=\"201.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_28\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Austria\"/>\n    <circle cx=\"372.57\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_29\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Azerbaijan\"/>\n    <circle cx=\"226.20\" cy=\"20.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_30\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bangladesh\"/>\n    <circle cx=\"380.31\" cy=\"283.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_31\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Belarus\"/>\n    <circle cx=\"471.05\" cy=\"171.20\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_32\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Belgium\"/>\n    <circle cx=\"174.37\" cy=\"84.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_33\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Benin\"/>\n    <circle cx=\"291.42\" cy=\"115.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_34\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bolivia\"/>\n    <circle cx=\"345.01\" cy=\"136.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_35\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bosnia Herzegovina\"/>\n    <circle cx=\"370.25\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_36\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Botswana\"/>\n    <circle cx=\"361.22\" cy=\"93.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_37\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Brazil\"/>\n    <circle cx=\"390.65\" cy=\"266.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_38\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bulgaria\"/>\n    <circle cx=\"155.01\" cy=\"145.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_39\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Burkina Faso\"/>\n    <circle cx=\"64.36\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_40\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Burundi\"/>\n    <circle cx=\"229.67\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_41\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cambodia\"/>\n    <circle cx=\"222.24\" cy=\"106.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_42\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cameroon\"/>\n    <circle cx=\"468.72\" cy=\"110.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_43\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Canada\"/>\n    <circle cx=\"159.06\" cy=\"89.20\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_44\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Chad\"/>\n    <circle cx=\"406.44\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_45\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Chile\"/>\n    <circle cx=\"369.21\" cy=\"123.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_46\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"China\"/>\n    <circle cx=\"354.65\" cy=\"84.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_47\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Colombia\"/>\n    <circle cx=\"192.80\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_48\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Comoros\"/>\n    <circle cx=\"259.43\" cy=\"115.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_49\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Congo, Rep.\"/>\n    <circle cx=\"370.74\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_50\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Costa Rica\"/>\n    <circle cx=\"412.76\" cy=\"192.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_51\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Croatia\"/>\n    <circle cx=\"439.24\" cy=\"171.20\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_52\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cyprus\"/>\n    <circle cx=\"444.25\" cy=\"162.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_53\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Czech Republic\"/>\n    <circle cx=\"477.97\" cy=\"140.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_54\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Denmark\"/>\n    <circle cx=\"364.60\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_55\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Dominican Republic\"/>\n    <circle cx=\"333.00\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_56\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ecuador\"/>\n    <circle cx=\"332.97\" cy=\"20.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_57\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Egypt\"/>\n    <circle cx=\"297.01\" cy=\"102.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_58\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"El Salvador\"/>\n    <circle cx=\"431.12\" cy=\"218.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_59\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Estonia\"/>\n    <circle cx=\"431.12\" cy=\"110.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_60\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Eswatini\"/>\n    <circle cx=\"156.93\" cy=\"24.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_61\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ethiopia\"/>\n    <circle cx=\"464.81\" cy=\"123.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_62\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Finland\"/>\n    <circle cx=\"460.33\" cy=\"235.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_63\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"France\"/>\n    <circle cx=\"376.29\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_64\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Gabon\"/>\n    <circle cx=\"325.09\" cy=\"136.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_65\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Georgia\"/>\n    <circle cx=\"476.59\" cy=\"149.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_66\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Germany\"/>\n    <circle cx=\"240.75\" cy=\"58.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_67\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ghana\"/>\n    <circle cx=\"417.51\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_68\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Greece\"/>\n    <circle cx=\"298.75\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_69\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Guatemala\"/>\n    <circle cx=\"173.10\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_70\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Guinea\"/>\n    <circle cx=\"152.51\" cy=\"132.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_71\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Haiti\"/>\n    <circle cx=\"250.91\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_72\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Honduras\"/>\n    <circle cx=\"419.28\" cy=\"106.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_73\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Hungary\"/>\n    <circle cx=\"481.31\" cy=\"175.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_74\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iceland\"/>\n    <circle cx=\"284.75\" cy=\"28.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_75\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"India\"/>\n    <circle cx=\"338.68\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_76\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Indonesia\"/>\n    <circle cx=\"390.15\" cy=\"140.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_77\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iran\"/>\n    <circle cx=\"369.74\" cy=\"50.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_78\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iraq\"/>\n    <circle cx=\"515.67\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_79\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ireland\"/>\n    <circle cx=\"449.30\" cy=\"115.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_80\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Israel\"/>\n    <circle cx=\"452.22\" cy=\"110.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_81\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Italy\"/>\n    <circle cx=\"227.89\" cy=\"106.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_82\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ivory Coast\"/>\n    <circle cx=\"461.30\" cy=\"292.04\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_83\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Japan\"/>\n    <circle cx=\"310.05\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_84\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Jordan\"/>\n    <circle cx=\"413.30\" cy=\"240.26\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_85\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kazakhstan\"/>\n    <circle cx=\"210.29\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_86\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kenya\"/>\n    <circle cx=\"210.29\" cy=\"132.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_87\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kosovo\"/>\n    <circle cx=\"510.78\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_88\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kuwait\"/>\n    <circle cx=\"222.53\" cy=\"145.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_89\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kyrgyzstan\"/>\n    <circle cx=\"284.26\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_90\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Laos\"/>\n    <circle cx=\"419.59\" cy=\"244.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_91\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Latvia\"/>\n    <circle cx=\"354.71\" cy=\"76.26\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_92\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Lebanon\"/>\n    <circle cx=\"118.71\" cy=\"24.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_93\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Liberia\"/>\n    <circle cx=\"384.33\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_94\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Libya\"/>\n    <circle cx=\"434.89\" cy=\"214.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_95\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Lithuania\"/>\n    <circle cx=\"546.42\" cy=\"132.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_96\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Luxembourg\"/>\n    <circle cx=\"360.00\" cy=\"205.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_97\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Macedonia\"/>\n    <circle cx=\"137.46\" cy=\"71.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_98\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Madagascar\"/>\n    <circle cx=\"112.41\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_99\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malawi\"/>\n    <circle cx=\"423.81\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_100\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malaysia\"/>\n    <circle cx=\"171.84\" cy=\"153.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_101\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mali\"/>\n    <circle cx=\"456.11\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_102\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malta\"/>\n    <circle cx=\"228.22\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_103\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mauritania\"/>\n    <circle cx=\"396.78\" cy=\"166.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_104\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mauritius\"/>\n    <circle cx=\"377.35\" cy=\"54.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_105\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mexico\"/>\n    <circle cx=\"263.89\" cy=\"248.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_106\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Moldova\"/>\n    <circle cx=\"343.59\" cy=\"119.41\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_107\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mongolia\"/>\n    <circle cx=\"382.94\" cy=\"244.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_108\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Montenegro\"/>\n    <circle cx=\"299.55\" cy=\"93.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_109\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Morocco\"/>\n    <circle cx=\"116.02\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_110\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mozambique\"/>\n    <circle cx=\"271.50\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_111\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Myanmar\"/>\n    <circle cx=\"322.93\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_112\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Namibia\"/>\n    <circle cx=\"191.06\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_113\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nepal\"/>\n    <circle cx=\"480.11\" cy=\"149.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_114\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Netherlands\"/>\n    <circle cx=\"456.29\" cy=\"128.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_115\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"New Zealand\"/>\n    <circle cx=\"266.33\" cy=\"41.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_116\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nicaragua\"/>\n    <circle cx=\"96.08\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_117\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Niger\"/>\n    <circle cx=\"266.87\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_118\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nigeria\"/>\n    <circle cx=\"266.87\" cy=\"58.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_119\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Northern Cyprus\"/>\n    <circle cx=\"495.37\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_120\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Norway\"/>\n    <circle cx=\"260.94\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_121\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Pakistan\"/>\n    <circle cx=\"248.92\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_122\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Palestine\"/>\n    <circle cx=\"405.78\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_123\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Panama\"/>\n    <circle cx=\"344.81\" cy=\"102.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_124\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Paraguay\"/>\n    <circle cx=\"347.40\" cy=\"136.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_125\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Peru\"/>\n    <circle cx=\"301.02\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_126\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Philippines\"/>\n    <circle cx=\"422.73\" cy=\"102.15\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_127\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Poland\"/>\n    <circle cx=\"430.90\" cy=\"89.20\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_128\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Portugal\"/>\n    <circle cx=\"414.12\" cy=\"158.26\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_129\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Romania\"/>\n    <circle cx=\"409.92\" cy=\"248.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_130\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Russia\"/>\n    <circle cx=\"163.85\" cy=\"33.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_131\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Rwanda\"/>\n    <circle cx=\"482.45\" cy=\"71.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_132\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Saudi Arabia\"/>\n    <circle cx=\"215.05\" cy=\"123.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_133\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Senegal\"/>\n    <circle cx=\"360.88\" cy=\"153.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_134\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Serbia\"/>\n    <circle cx=\"135.70\" cy=\"37.42\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_135\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sierra Leone\"/>\n    <circle cx=\"536.72\" cy=\"110.78\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_136\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Singapore\"/>\n    <circle cx=\"430.73\" cy=\"123.73\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_137\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Slovakia\"/>\n    <circle cx=\"440.26\" cy=\"136.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_138\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Slovenia\"/>\n    <circle cx=\"347.86\" cy=\"84.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_139\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"South Africa\"/>\n    <circle cx=\"449.49\" cy=\"227.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_140\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"South Korea\"/>\n    <circle cx=\"448.63\" cy=\"97.84\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_141\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Spain\"/>\n    <circle cx=\"342.96\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_142\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sri Lanka\"/>\n    <circle cx=\"475.76\" cy=\"140.99\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_143\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sweden\"/>\n    <circle cx=\"500.47\" cy=\"210.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_144\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Switzerland\"/>\n    <circle cx=\"207.57\" cy=\"46.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_145\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tajikistan\"/>\n    <circle cx=\"199.67\" cy=\"24.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_146\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tanzania\"/>\n    <circle cx=\"375.19\" cy=\"37.42\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_147\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Thailand\"/>\n    <circle cx=\"145.88\" cy=\"63.31\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_148\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"The Gambia\"/>\n    <circle cx=\"143.82\" cy=\"218.68\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_149\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Togo\"/>\n    <circle cx=\"335.68\" cy=\"106.47\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_150\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tunisia\"/>\n    <circle cx=\"413.61\" cy=\"84.89\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_151\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Turkey\"/>\n    <circle cx=\"375.85\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_152\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Turkmenistan\"/>\n    <circle cx=\"513.36\" cy=\"80.57\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_153\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"UAE\"/>\n    <circle cx=\"155.12\" cy=\"67.63\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_154\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uganda\"/>\n    <circle cx=\"461.28\" cy=\"115.10\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_155\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"UK\"/>\n    <circle cx=\"304.73\" cy=\"313.62\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_156\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ukraine\"/>\n    <circle cx=\"397.88\" cy=\"128.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_157\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uruguay\"/>\n    <circle cx=\"492.34\" cy=\"128.05\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_158\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"USA\"/>\n    <circle cx=\"282.04\" cy=\"37.42\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_159\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uzbekistan\"/>\n    <circle cx=\"373.92\" cy=\"37.42\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_160\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Venezuela\"/>\n    <circle cx=\"280.76\" cy=\"132.36\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_161\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Vietnam\"/>\n    <circle cx=\"187.54\" cy=\"76.26\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_162\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Yemen\"/>\n    <circle cx=\"230.03\" cy=\"93.52\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_163\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Zambia\"/>\n    <circle cx=\"180.87\" cy=\"71.94\" r=\"1.47pt\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_164\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"#FFA500\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#FFA500\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Zimbabwe\"/>\n    <polyline points=\"64.36,53.13 70.46,54.47 76.56,55.80 82.66,57.14 88.77,58.48 94.87,59.82 100.97,61.16 107.07,62.50 113.17,63.84 119.28,65.18 125.38,66.52 131.48,67.86 137.58,69.20 143.68,70.54 149.79,71.88 155.89,73.22 161.99,74.56 168.09,75.90 174.19,77.24 180.30,78.58 186.40,79.92 192.50,81.26 198.60,82.60 204.70,83.93 210.81,85.27 216.91,86.61 223.01,87.95 229.11,89.29 235.21,90.63 241.32,91.97 247.42,93.31 253.52,94.65 259.62,95.99 265.72,97.33 271.83,98.67 277.93,100.01 284.03,101.35 290.13,102.69 296.23,104.03 302.34,105.37 308.44,106.71 314.54,108.05 320.64,109.39 326.74,110.73 332.85,112.07 338.95,113.40 345.05,114.74 351.15,116.08 357.25,117.42 363.36,118.76 369.46,120.10 375.56,121.44 381.66,122.78 387.76,124.12 393.87,125.46 399.97,126.80 406.07,128.14 412.17,129.48 418.27,130.82 424.38,132.16 430.48,133.50 436.58,134.84 442.68,136.18 448.79,137.52 454.89,138.86 460.99,140.20 467.09,141.53 473.19,142.87 479.30,144.21 485.40,145.55 491.50,146.89 497.60,148.23 503.70,149.57 509.81,150.91 515.91,152.25 522.01,153.59 528.11,154.93 534.21,156.27 540.32,157.61 546.42,158.95\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_165\" clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\" fill=\"none\" stroke-width=\"2.13396\" stroke=\"#3366FF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_166\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_167\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_168\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_169\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_170\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_171\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_172\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_173\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_174\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_175\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_176\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_177\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_178\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_179\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_180\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_181\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_182\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_183\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_184\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_185\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_186\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_187\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_188\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_189\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_190\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_191\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_192\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_193\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_194\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_195\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_196\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_197\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_198\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_199\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_200\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_201\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_202\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_203\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_204\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_205\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_206\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_207\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_208\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_209\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_210\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_211\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_212\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_213\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_214\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_215\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_216\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_217\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_218\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_219\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_220\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_221\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_222\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_223\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_224\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_225\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_226\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_227\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_228\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_229\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_230\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_231\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_232\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_233\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_234\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_235\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_236\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_237\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_238\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_239\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_240\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_241\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_242\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_243\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_244\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_245\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_246\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_247\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_248\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_249\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_250\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_251\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_252\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_253\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_254\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_255\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_256\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_257\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_258\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_259\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_260\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_261\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_262\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_263\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_264\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_265\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_266\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_267\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_268\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_269\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_270\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_271\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_272\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_273\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_274\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_275\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_276\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_277\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_278\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_279\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_280\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_281\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_282\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_283\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_284\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_285\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_286\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_287\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_288\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_289\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_290\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_291\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_292\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_293\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_294\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_295\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_296\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_297\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_298\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_299\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_300\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_301\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_302\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_303\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_304\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_305\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_306\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_307\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_308\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_309\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_310\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_311\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_312\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_313\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_314\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_315\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_316\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_317\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_318\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_319\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_320\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_321\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_322\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_323\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_324\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_325\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_326\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_327\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_328\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_329\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_330\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_331\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_332\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_333\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_334\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_335\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_336\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_337\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_338\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_339\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_340\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_341\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_342\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_343\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_344\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_345\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_346\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_347\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_348\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_349\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_350\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_351\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_352\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_353\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_354\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_355\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_356\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_357\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_358\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_359\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_360\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_361\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_362\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_363\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_364\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_365\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_366\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_367\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_368\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_369\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_370\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_371\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_372\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_373\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_374\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_375\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_376\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_377\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_378\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_379\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_380\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_381\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_382\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_383\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_384\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_385\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_386\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_387\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_388\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_389\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_390\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_391\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_392\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_393\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_394\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_395\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_396\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_397\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_398\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_399\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_400\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_401\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_402\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_403\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_404\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_405\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_406\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_407\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_408\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_409\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_410\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_411\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_412\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_413\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_414\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_415\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_416\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_417\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_418\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_419\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_420\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_421\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_422\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_423\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_424\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_425\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_426\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_427\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_428\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_429\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_430\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_431\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_432\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_433\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_434\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_435\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_436\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_437\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_438\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_439\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_440\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_441\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_442\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_443\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_444\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_445\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_446\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_447\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_448\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_449\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_450\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_451\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"119.01\" y=\"284.69\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_452\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value = 122.04[9.3]-4.95[0.98]*l_gdp,<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_3)\">\n      <text x=\"177.99\" y=\"296.99\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_453\" font-size=\"6.40pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\"> R2 = 0.15<\/text>\n    <\/g>\n    <defs>\n      <clipPath id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"24.13\" y=\"269.36\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_454\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">40<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"24.13\" y=\"183.04\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_455\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">60<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"24.13\" y=\"96.73\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_456\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">80<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"18.53\" y=\"10.41\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_457\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">100<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"100.66\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_458\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">7<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"198.02\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_459\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">8<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"295.38\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_460\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">9<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"389.94\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_461\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">10<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"487.30\" y=\"339.64\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_462\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">11<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text x=\"290.64\" y=\"352.23\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_463\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">l_gdp<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_cl_4)\">\n      <text transform=\"translate(13.50,181.91) rotate(-90)\" id=\"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621_el_464\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value<\/text>\n    <\/g>\n  <\/g>\n<\/svg>\n","js":null,"uid":"svg_453fcb5d-815e-47b7-98f5-9b9c70ef5621","ratio":1.6,"settings":{"tooltip":{"css":" .tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px ; position:absolute;pointer-events:none;z-index:999;}\n","offx":10,"offy":0,"use_cursor_pos":true,"opacity":0.9,"usefill":false,"usestroke":false,"delay":{"over":200,"out":500}},"hover":{"css":" .hover_SVGID_ { fill:orange;stroke:gray; }\n"},"hoverkey":{"css":" .hover_key_SVGID_ { stroke:red; }\n"},"hovertheme":{"css":" .hover_theme_SVGID_ { fill:green; }\n"},"zoom":{"min":1,"max":1},"capture":{"css":" .selected_SVGID_ { fill:red;stroke:gray; }\n","type":"multiple","only_shiny":true,"selected":[]},"capturekey":{"css":" .selected_key_SVGID_ { stroke:gray; }\n","type":"single","only_shiny":true,"selected":[]},"capturetheme":{"css":" .selected_theme_SVGID_ { stroke:gray; }\n","type":"single","only_shiny":true,"selected":[]},"toolbar":{"position":"topright","saveaspng":true},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
<p>
So what’s actually going on? <code>value</code> is the percentage of people, in a country, that believe vaccines are safe. <code>l_gdp</code> is the logarithm of GDP per capita in that same country. Looking at this, many people will conclude that the richer the country, the less people trust vaccines. This is the story the Economist is telling its readers. This is a simple explanation, and it’s backed by numbers and stats, so it must be correct. Right?
</p>
<p>
WRONG.
</p>
<p>
Let’s take a look at the regression equation (standard errors in square brackets):
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%5B%20=%20122.04%5B9.3%5D%20-%204.95%5B0.98%5D%20*%20%5D">
</p>
<p>
Both coefficients are significant at the usual 5% level (the intercept is interesting though, as it implies a value greater than 100 for very low levels of log of GDP). This gives comfort to the person believing the basic story.
</p>
<p>
But take a look at the R². It’s 0.15. That means that the linear regression will be able to predict up to 15% of the variance in the dependent variable using the log of GDP per capita as a predictor. That already should sound all sorts of alarms in your head (if that scatter plot that looks almost like random noise didn’t already). However, I’m not done yet.
</p>
<p>
What if you wanted to do something a little bit more elaborate? For instance, let’s say that you’d like to see if infant mortality plays a role? After all, you could argue that in very poor countries, where people seem to trust vaccines very much, infant mortality is very high. Vaccinating your kid seems like a no-brainer when the alternative is almost certain death from any of the many diseases afflicting children (don’t get me wrong here, vaccinating children against deadly diseases is a no-brainer anywhere on the planet). Maybe people in wealthier countries don’t ascribe low infant mortality to vaccines, but to other things such as access to clean water, good infrastructure etc, and thus tend to downplay the role of vaccines. Who knows. But let’s dig deeper and get some more data.
</p>
<p>
For this I’m using another data set that gives the infant mortality rate in 2018 for most of the countries from the original analysis. I got that data from the Worldbank, and you can easily download the csv from <a href="https://gist.github.com/b-rodrigues/33f64ce6910e6ec4df9d586eacf335c2">here</a>.
</p>
<p>
Below, I’m downloading the data and joining that to my original dataset. Then I’m computing a rank based on the median infant mortality rate. Countries that have an infant mortality rate below the median are classified as “low infant mortality rate” countries and countries that have an infant mortality rate above the median infant mortality rate are classified as “high infant mortality rate” countries. I then redo the same plot as before, but I’m computing one regression line per group of countries.
</p>
<details>
<summary>
Click to see the code
</summary>
<pre class="r"><code>infant_mortality_rate &lt;- data.table::fread("https://gist.githubusercontent.com/b-rodrigues/33f64ce6910e6ec4df9d586eacf335c2/raw/01df8977edd3924a3687f783e7e5a134d5f3fd87/infant_mortality_rate_2018.csv") %&gt;%
  janitor::clean_names() %&gt;%
  select(country_name, imr = x2018_yr2018)

plot_data_simpson &lt;- plot_data %&gt;%
  ungroup() %&gt;%  
  left_join(infant_mortality_rate) %&gt;%
  mutate(imr = as.numeric(imr)) %&gt;%  
  filter(!is.na(imr)) %&gt;%  
  mutate(rank = ntile(imr, n = 2))  %&gt;%
  mutate(rank = ifelse(rank == 2,
                       "High infant mortality rate",
                       "Low infant mortality rate"))</code></pre>
<pre><code>## Joining, by = "country_name"</code></pre>
<pre class="r"><code>my_plot &lt;- plot_data_simpson %&gt;%
  ggplot(aes(y = value, x = l_gdp)) +
  geom_point_interactive(aes(tooltip = country_name, colour = rank)) +
  geom_smooth(aes(group = rank), method = "lm") +
  brotools::theme_blog()</code></pre>
</details>
<pre class="r"><code>girafe(ggobj = my_plot, width_svg = 8)</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<div id="htmlwidget-2" class="girafe html-widget" style="width:672px;height:480px;">

</div>
<script type="application/json" data-for="htmlwidget-2">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b\" viewBox=\"0 0 576.00 360.00\">\n  <g>\n    <defs>\n      <clipPath id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_1\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_1\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_1)\" fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-width=\"0.75\" stroke=\"#FFFFFF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <defs>\n      <clipPath id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_2\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_2\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_2)\" fill=\"#272B30\" fill-opacity=\"1\" stroke-width=\"1.06698\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <defs>\n      <clipPath id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3\">\n        <rect x=\"40.25\" y=\"5.48\" width=\"530.27\" height=\"283.62\"/>\n      <\/clipPath>\n    <\/defs>\n    <polyline points=\"40.25,272.42 570.52,272.42\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_3\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,196.58 570.52,196.58\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_4\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,120.75 570.52,120.75\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_5\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,44.91 570.52,44.91\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_6\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"54.78,289.10 54.78,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_7\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"152.14,289.10 152.14,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_8\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"249.50,289.10 249.50,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_9\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"346.86,289.10 346.86,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_10\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"444.22,289.10 444.22,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_11\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"541.58,289.10 541.58,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_12\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"0.533489\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,234.50 570.52,234.50\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_13\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,158.66 570.52,158.66\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_14\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,82.83 570.52,82.83\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_15\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"40.25,7.00 570.52,7.00\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_16\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"103.46,289.10 103.46,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_17\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"200.82,289.10 200.82,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_18\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"298.18,289.10 298.18,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_19\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"395.54,289.10 395.54,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_20\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polyline points=\"492.90,289.10 492.90,5.48\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_21\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"1.06698\" stroke=\"#425D65\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <circle cx=\"160.60\" cy=\"29.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_22\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Afghanistan\"/>\n    <circle cx=\"343.78\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_23\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Albania\"/>\n    <circle cx=\"359.81\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_24\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Algeria\"/>\n    <circle cx=\"389.89\" cy=\"52.50\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_25\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Argentina\"/>\n    <circle cx=\"315.17\" cy=\"226.91\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_26\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Armenia\"/>\n    <circle cx=\"472.31\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_27\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Australia\"/>\n    <circle cx=\"479.91\" cy=\"177.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_28\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Austria\"/>\n    <circle cx=\"372.57\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_29\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Azerbaijan\"/>\n    <circle cx=\"226.20\" cy=\"18.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_30\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bangladesh\"/>\n    <circle cx=\"380.31\" cy=\"249.66\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_31\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Belarus\"/>\n    <circle cx=\"471.05\" cy=\"151.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_32\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Belgium\"/>\n    <circle cx=\"174.37\" cy=\"75.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_33\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Benin\"/>\n    <circle cx=\"291.42\" cy=\"101.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_34\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bolivia\"/>\n    <circle cx=\"345.01\" cy=\"120.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_35\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bosnia Herzegovina\"/>\n    <circle cx=\"370.25\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_36\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Botswana\"/>\n    <circle cx=\"361.22\" cy=\"82.83\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_37\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Brazil\"/>\n    <circle cx=\"390.65\" cy=\"234.50\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_38\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Bulgaria\"/>\n    <circle cx=\"155.01\" cy=\"128.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_39\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Burkina Faso\"/>\n    <circle cx=\"64.36\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_40\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Burundi\"/>\n    <circle cx=\"229.67\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_41\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cambodia\"/>\n    <circle cx=\"222.24\" cy=\"94.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_42\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cameroon\"/>\n    <circle cx=\"468.72\" cy=\"98.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_43\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Canada\"/>\n    <circle cx=\"159.06\" cy=\"79.04\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_44\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Chad\"/>\n    <circle cx=\"406.44\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_45\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Chile\"/>\n    <circle cx=\"369.21\" cy=\"109.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_46\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"China\"/>\n    <circle cx=\"354.65\" cy=\"75.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_47\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Colombia\"/>\n    <circle cx=\"192.80\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_48\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Comoros\"/>\n    <circle cx=\"259.43\" cy=\"101.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_49\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Congo, Rep.\"/>\n    <circle cx=\"370.74\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_50\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Costa Rica\"/>\n    <circle cx=\"412.76\" cy=\"170.04\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_51\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Croatia\"/>\n    <circle cx=\"439.24\" cy=\"151.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_52\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Cyprus\"/>\n    <circle cx=\"444.25\" cy=\"143.50\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_53\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Czech Republic\"/>\n    <circle cx=\"477.97\" cy=\"124.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_54\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Denmark\"/>\n    <circle cx=\"364.60\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_55\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Dominican Republic\"/>\n    <circle cx=\"333.00\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_56\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ecuador\"/>\n    <circle cx=\"332.97\" cy=\"18.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_57\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Egypt\"/>\n    <circle cx=\"297.01\" cy=\"90.41\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_58\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"El Salvador\"/>\n    <circle cx=\"431.12\" cy=\"192.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_59\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Estonia\"/>\n    <circle cx=\"431.12\" cy=\"98.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_60\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Eswatini\"/>\n    <circle cx=\"156.93\" cy=\"22.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_61\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ethiopia\"/>\n    <circle cx=\"464.81\" cy=\"109.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_62\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Finland\"/>\n    <circle cx=\"460.33\" cy=\"207.96\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_63\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"France\"/>\n    <circle cx=\"376.29\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_64\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Gabon\"/>\n    <circle cx=\"325.09\" cy=\"120.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_65\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Georgia\"/>\n    <circle cx=\"476.59\" cy=\"132.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_66\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Germany\"/>\n    <circle cx=\"240.75\" cy=\"52.50\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_67\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ghana\"/>\n    <circle cx=\"417.51\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_68\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Greece\"/>\n    <circle cx=\"298.75\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_69\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Guatemala\"/>\n    <circle cx=\"173.10\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_70\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Guinea\"/>\n    <circle cx=\"152.51\" cy=\"116.96\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_71\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Haiti\"/>\n    <circle cx=\"250.91\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_72\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Honduras\"/>\n    <circle cx=\"419.28\" cy=\"94.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_73\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Hungary\"/>\n    <circle cx=\"481.31\" cy=\"154.87\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_74\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iceland\"/>\n    <circle cx=\"284.75\" cy=\"25.95\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_75\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"India\"/>\n    <circle cx=\"338.68\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_76\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Indonesia\"/>\n    <circle cx=\"390.15\" cy=\"124.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_77\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iran\"/>\n    <circle cx=\"369.74\" cy=\"44.91\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_78\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Iraq\"/>\n    <circle cx=\"515.67\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_79\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ireland\"/>\n    <circle cx=\"449.30\" cy=\"101.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_80\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Israel\"/>\n    <circle cx=\"452.22\" cy=\"98.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_81\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Italy\"/>\n    <circle cx=\"227.89\" cy=\"94.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_82\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ivory Coast\"/>\n    <circle cx=\"461.30\" cy=\"257.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_83\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Japan\"/>\n    <circle cx=\"310.05\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_84\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Jordan\"/>\n    <circle cx=\"413.30\" cy=\"211.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_85\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kazakhstan\"/>\n    <circle cx=\"210.29\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_86\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kenya\"/>\n    <circle cx=\"510.78\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_87\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kuwait\"/>\n    <circle cx=\"222.53\" cy=\"128.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_88\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Kyrgyzstan\"/>\n    <circle cx=\"284.26\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_89\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Laos\"/>\n    <circle cx=\"419.59\" cy=\"215.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_90\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Latvia\"/>\n    <circle cx=\"354.71\" cy=\"67.66\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_91\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Lebanon\"/>\n    <circle cx=\"118.71\" cy=\"22.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_92\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Liberia\"/>\n    <circle cx=\"384.33\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_93\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Libya\"/>\n    <circle cx=\"434.89\" cy=\"189.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_94\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Lithuania\"/>\n    <circle cx=\"546.42\" cy=\"116.96\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_95\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Luxembourg\"/>\n    <circle cx=\"360.00\" cy=\"181.41\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_96\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Macedonia\"/>\n    <circle cx=\"137.46\" cy=\"63.87\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_97\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Madagascar\"/>\n    <circle cx=\"112.41\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_98\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malawi\"/>\n    <circle cx=\"423.81\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_99\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malaysia\"/>\n    <circle cx=\"171.84\" cy=\"135.91\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_100\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mali\"/>\n    <circle cx=\"456.11\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_101\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Malta\"/>\n    <circle cx=\"228.22\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_102\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mauritania\"/>\n    <circle cx=\"396.78\" cy=\"147.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_103\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mauritius\"/>\n    <circle cx=\"377.35\" cy=\"48.70\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_104\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mexico\"/>\n    <circle cx=\"263.89\" cy=\"219.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_105\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Moldova\"/>\n    <circle cx=\"343.59\" cy=\"105.58\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_106\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mongolia\"/>\n    <circle cx=\"382.94\" cy=\"215.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_107\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Montenegro\"/>\n    <circle cx=\"299.55\" cy=\"82.83\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_108\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Morocco\"/>\n    <circle cx=\"116.02\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_109\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Mozambique\"/>\n    <circle cx=\"271.50\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_110\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Myanmar\"/>\n    <circle cx=\"322.93\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_111\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Namibia\"/>\n    <circle cx=\"191.06\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_112\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nepal\"/>\n    <circle cx=\"480.11\" cy=\"132.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_113\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Netherlands\"/>\n    <circle cx=\"456.29\" cy=\"113.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_114\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"New Zealand\"/>\n    <circle cx=\"266.33\" cy=\"37.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_115\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nicaragua\"/>\n    <circle cx=\"96.08\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_116\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Niger\"/>\n    <circle cx=\"266.87\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_117\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Nigeria\"/>\n    <circle cx=\"495.37\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_118\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Norway\"/>\n    <circle cx=\"260.94\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_119\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Pakistan\"/>\n    <circle cx=\"248.92\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_120\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Palestine\"/>\n    <circle cx=\"405.78\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_121\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Panama\"/>\n    <circle cx=\"344.81\" cy=\"90.41\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_122\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Paraguay\"/>\n    <circle cx=\"347.40\" cy=\"120.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_123\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Peru\"/>\n    <circle cx=\"301.02\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_124\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Philippines\"/>\n    <circle cx=\"422.73\" cy=\"90.41\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_125\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Poland\"/>\n    <circle cx=\"430.90\" cy=\"79.04\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_126\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Portugal\"/>\n    <circle cx=\"414.12\" cy=\"139.71\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_127\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Romania\"/>\n    <circle cx=\"409.92\" cy=\"219.33\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_128\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Russia\"/>\n    <circle cx=\"163.85\" cy=\"29.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_129\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Rwanda\"/>\n    <circle cx=\"482.45\" cy=\"63.87\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_130\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Saudi Arabia\"/>\n    <circle cx=\"215.05\" cy=\"109.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_131\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Senegal\"/>\n    <circle cx=\"360.88\" cy=\"135.91\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_132\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Serbia\"/>\n    <circle cx=\"135.70\" cy=\"33.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_133\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sierra Leone\"/>\n    <circle cx=\"536.72\" cy=\"98.00\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_134\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Singapore\"/>\n    <circle cx=\"430.73\" cy=\"109.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_135\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Slovakia\"/>\n    <circle cx=\"440.26\" cy=\"120.75\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_136\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Slovenia\"/>\n    <circle cx=\"347.86\" cy=\"75.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_137\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"South Africa\"/>\n    <circle cx=\"449.49\" cy=\"200.37\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_138\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"South Korea\"/>\n    <circle cx=\"448.63\" cy=\"86.62\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_139\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Spain\"/>\n    <circle cx=\"342.96\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_140\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sri Lanka\"/>\n    <circle cx=\"475.76\" cy=\"124.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_141\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Sweden\"/>\n    <circle cx=\"500.47\" cy=\"185.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_142\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Switzerland\"/>\n    <circle cx=\"207.57\" cy=\"41.12\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_143\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tajikistan\"/>\n    <circle cx=\"199.67\" cy=\"22.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_144\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tanzania\"/>\n    <circle cx=\"375.19\" cy=\"33.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_145\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Thailand\"/>\n    <circle cx=\"145.88\" cy=\"56.29\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_146\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"The Gambia\"/>\n    <circle cx=\"143.82\" cy=\"192.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_147\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Togo\"/>\n    <circle cx=\"335.68\" cy=\"94.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_148\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Tunisia\"/>\n    <circle cx=\"413.61\" cy=\"75.25\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_149\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Turkey\"/>\n    <circle cx=\"375.85\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_150\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Turkmenistan\"/>\n    <circle cx=\"513.36\" cy=\"71.46\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_151\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"UAE\"/>\n    <circle cx=\"155.12\" cy=\"60.08\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_152\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uganda\"/>\n    <circle cx=\"461.28\" cy=\"101.79\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_153\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"UK\"/>\n    <circle cx=\"304.73\" cy=\"276.21\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_154\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Ukraine\"/>\n    <circle cx=\"397.88\" cy=\"113.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_155\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uruguay\"/>\n    <circle cx=\"492.34\" cy=\"113.16\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_156\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"USA\"/>\n    <circle cx=\"282.04\" cy=\"33.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_157\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Uzbekistan\"/>\n    <circle cx=\"373.92\" cy=\"33.54\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_158\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Venezuela\"/>\n    <circle cx=\"280.76\" cy=\"116.96\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_159\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Vietnam\"/>\n    <circle cx=\"187.54\" cy=\"67.66\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_160\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Yemen\"/>\n    <circle cx=\"230.03\" cy=\"82.83\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_161\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Zambia\"/>\n    <circle cx=\"180.87\" cy=\"63.87\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_162\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\" title=\"Zimbabwe\"/>\n    <polygon points=\"64.36,33.18 69.00,34.07 73.64,34.96 78.28,35.85 82.93,36.73 87.57,37.61 92.21,38.49 96.85,39.37 101.50,40.24 106.14,41.11 110.78,41.98 115.42,42.84 120.07,43.69 124.71,44.54 129.35,45.39 133.99,46.23 138.64,47.06 143.28,47.89 147.92,48.71 152.56,49.52 157.21,50.32 161.85,51.11 166.49,51.90 171.13,52.67 175.78,53.43 180.42,54.18 185.06,54.91 189.70,55.63 194.35,56.34 198.99,57.02 203.63,57.69 208.27,58.34 212.92,58.96 217.56,59.57 222.20,60.15 226.84,60.70 231.49,61.23 236.13,61.74 240.77,62.21 245.41,62.66 250.06,63.08 254.70,63.47 259.34,63.84 263.99,64.17 268.63,64.48 273.27,64.77 277.91,65.03 282.56,65.26 287.20,65.47 291.84,65.67 296.48,65.84 301.13,65.99 305.77,66.12 310.41,66.24 315.05,66.34 319.70,66.43 324.34,66.51 328.98,66.57 333.62,66.62 338.27,66.66 342.91,66.69 347.55,66.72 352.19,66.73 356.84,66.74 361.48,66.74 366.12,66.74 370.76,66.72 375.41,66.71 380.05,66.69 384.69,66.66 389.33,66.63 393.98,66.59 398.62,66.55 403.26,66.51 407.90,66.46 412.55,66.41 417.19,66.36 421.83,66.31 426.47,66.25 431.12,66.19 431.12,112.29 426.47,111.39 421.83,110.50 417.19,109.62 412.55,108.73 407.90,107.85 403.26,106.97 398.62,106.10 393.98,105.23 389.33,104.36 384.69,103.49 380.05,102.64 375.41,101.78 370.76,100.93 366.12,100.09 361.48,99.25 356.84,98.42 352.19,97.59 347.55,96.78 342.91,95.97 338.27,95.17 333.62,94.38 328.98,93.60 324.34,92.83 319.70,92.07 315.05,91.33 310.41,90.60 305.77,89.88 301.13,89.19 296.48,88.51 291.84,87.84 287.20,87.20 282.56,86.58 277.91,85.99 273.27,85.41 268.63,84.86 263.99,84.34 259.34,83.85 254.70,83.38 250.06,82.94 245.41,82.53 240.77,82.14 236.13,81.79 231.49,81.46 226.84,81.16 222.20,80.88 217.56,80.63 212.92,80.40 208.27,80.19 203.63,80.01 198.99,79.84 194.35,79.70 189.70,79.57 185.06,79.46 180.42,79.36 175.78,79.27 171.13,79.20 166.49,79.14 161.85,79.09 157.21,79.05 152.56,79.02 147.92,79.00 143.28,78.99 138.64,78.98 133.99,78.99 129.35,78.99 124.71,79.01 120.07,79.03 115.42,79.05 110.78,79.08 106.14,79.11 101.50,79.15 96.85,79.19 92.21,79.23 87.57,79.28 82.93,79.33 78.28,79.38 73.64,79.44 69.00,79.49 64.36,79.55\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_163\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#999999\" fill-opacity=\"0.4\" stroke=\"none\"/>\n    <polyline points=\"64.36,33.18 69.00,34.07 73.64,34.96 78.28,35.85 82.93,36.73 87.57,37.61 92.21,38.49 96.85,39.37 101.50,40.24 106.14,41.11 110.78,41.98 115.42,42.84 120.07,43.69 124.71,44.54 129.35,45.39 133.99,46.23 138.64,47.06 143.28,47.89 147.92,48.71 152.56,49.52 157.21,50.32 161.85,51.11 166.49,51.90 171.13,52.67 175.78,53.43 180.42,54.18 185.06,54.91 189.70,55.63 194.35,56.34 198.99,57.02 203.63,57.69 208.27,58.34 212.92,58.96 217.56,59.57 222.20,60.15 226.84,60.70 231.49,61.23 236.13,61.74 240.77,62.21 245.41,62.66 250.06,63.08 254.70,63.47 259.34,63.84 263.99,64.17 268.63,64.48 273.27,64.77 277.91,65.03 282.56,65.26 287.20,65.47 291.84,65.67 296.48,65.84 301.13,65.99 305.77,66.12 310.41,66.24 315.05,66.34 319.70,66.43 324.34,66.51 328.98,66.57 333.62,66.62 338.27,66.66 342.91,66.69 347.55,66.72 352.19,66.73 356.84,66.74 361.48,66.74 366.12,66.74 370.76,66.72 375.41,66.71 380.05,66.69 384.69,66.66 389.33,66.63 393.98,66.59 398.62,66.55 403.26,66.51 407.90,66.46 412.55,66.41 417.19,66.36 421.83,66.31 426.47,66.25 431.12,66.19\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_164\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke=\"none\"/>\n    <polyline points=\"431.12,112.29 426.47,111.39 421.83,110.50 417.19,109.62 412.55,108.73 407.90,107.85 403.26,106.97 398.62,106.10 393.98,105.23 389.33,104.36 384.69,103.49 380.05,102.64 375.41,101.78 370.76,100.93 366.12,100.09 361.48,99.25 356.84,98.42 352.19,97.59 347.55,96.78 342.91,95.97 338.27,95.17 333.62,94.38 328.98,93.60 324.34,92.83 319.70,92.07 315.05,91.33 310.41,90.60 305.77,89.88 301.13,89.19 296.48,88.51 291.84,87.84 287.20,87.20 282.56,86.58 277.91,85.99 273.27,85.41 268.63,84.86 263.99,84.34 259.34,83.85 254.70,83.38 250.06,82.94 245.41,82.53 240.77,82.14 236.13,81.79 231.49,81.46 226.84,81.16 222.20,80.88 217.56,80.63 212.92,80.40 208.27,80.19 203.63,80.01 198.99,79.84 194.35,79.70 189.70,79.57 185.06,79.46 180.42,79.36 175.78,79.27 171.13,79.20 166.49,79.14 161.85,79.09 157.21,79.05 152.56,79.02 147.92,79.00 143.28,78.99 138.64,78.98 133.99,78.99 129.35,78.99 124.71,79.01 120.07,79.03 115.42,79.05 110.78,79.08 106.14,79.11 101.50,79.15 96.85,79.19 92.21,79.23 87.57,79.28 82.93,79.33 78.28,79.38 73.64,79.44 69.00,79.49 64.36,79.55\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_165\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke=\"none\"/>\n    <polyline points=\"64.36,56.37 69.00,56.78 73.64,57.20 78.28,57.61 82.93,58.03 87.57,58.45 92.21,58.86 96.85,59.28 101.50,59.69 106.14,60.11 110.78,60.53 115.42,60.94 120.07,61.36 124.71,61.77 129.35,62.19 133.99,62.61 138.64,63.02 143.28,63.44 147.92,63.86 152.56,64.27 157.21,64.69 161.85,65.10 166.49,65.52 171.13,65.94 175.78,66.35 180.42,66.77 185.06,67.18 189.70,67.60 194.35,68.02 198.99,68.43 203.63,68.85 208.27,69.26 212.92,69.68 217.56,70.10 222.20,70.51 226.84,70.93 231.49,71.35 236.13,71.76 240.77,72.18 245.41,72.59 250.06,73.01 254.70,73.43 259.34,73.84 263.99,74.26 268.63,74.67 273.27,75.09 277.91,75.51 282.56,75.92 287.20,76.34 291.84,76.75 296.48,77.17 301.13,77.59 305.77,78.00 310.41,78.42 315.05,78.84 319.70,79.25 324.34,79.67 328.98,80.08 333.62,80.50 338.27,80.92 342.91,81.33 347.55,81.75 352.19,82.16 356.84,82.58 361.48,83.00 366.12,83.41 370.76,83.83 375.41,84.24 380.05,84.66 384.69,85.08 389.33,85.49 393.98,85.91 398.62,86.33 403.26,86.74 407.90,87.16 412.55,87.57 417.19,87.99 421.83,88.41 426.47,88.82 431.12,89.24\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_166\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"2.13396\" stroke=\"#3366FF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <polygon points=\"297.01,103.17 300.16,103.61 303.32,104.04 306.48,104.47 309.64,104.89 312.79,105.31 315.95,105.73 319.11,106.14 322.26,106.55 325.42,106.95 328.58,107.35 331.74,107.74 334.89,108.12 338.05,108.50 341.21,108.87 344.36,109.24 347.52,109.59 350.68,109.94 353.84,110.27 356.99,110.60 360.15,110.91 363.31,111.21 366.46,111.50 369.62,111.77 372.78,112.02 375.93,112.26 379.09,112.48 382.25,112.68 385.41,112.85 388.56,113.01 391.72,113.13 394.88,113.23 398.03,113.30 401.19,113.33 404.35,113.33 407.51,113.30 410.66,113.23 413.82,113.12 416.98,112.97 420.13,112.78 423.29,112.55 426.45,112.28 429.61,111.97 432.76,111.62 435.92,111.22 439.08,110.80 442.23,110.33 445.39,109.83 448.55,109.29 451.70,108.73 454.86,108.14 458.02,107.51 461.18,106.87 464.33,106.20 467.49,105.50 470.65,104.79 473.80,104.06 476.96,103.31 480.12,102.55 483.28,101.77 486.43,100.98 489.59,100.17 492.75,99.36 495.90,98.53 499.06,97.69 502.22,96.85 505.38,96.00 508.53,95.13 511.69,94.27 514.85,93.39 518.00,92.51 521.16,91.62 524.32,90.73 527.48,89.84 530.63,88.94 533.79,88.03 536.95,87.12 540.10,86.21 543.26,85.29 546.42,84.37 546.42,148.93 543.26,148.50 540.10,148.07 536.95,147.64 533.79,147.22 530.63,146.80 527.48,146.39 524.32,145.98 521.16,145.57 518.00,145.17 514.85,144.78 511.69,144.39 508.53,144.01 505.38,143.64 502.22,143.27 499.06,142.92 495.90,142.57 492.75,142.23 489.59,141.90 486.43,141.58 483.28,141.28 480.12,140.99 476.96,140.71 473.80,140.45 470.65,140.20 467.49,139.98 464.33,139.77 461.18,139.59 458.02,139.43 454.86,139.30 451.70,139.19 448.55,139.11 445.39,139.07 442.23,139.05 439.08,139.07 435.92,139.13 432.76,139.23 429.61,139.36 426.45,139.54 423.29,139.76 420.13,140.01 416.98,140.31 413.82,140.65 410.66,141.03 407.51,141.44 404.35,141.90 401.19,142.39 398.03,142.91 394.88,143.46 391.72,144.05 388.56,144.66 385.41,145.30 382.25,145.96 379.09,146.65 375.93,147.35 372.78,148.08 369.62,148.82 366.46,149.58 363.31,150.36 360.15,151.14 356.99,151.94 353.84,152.76 350.68,153.58 347.52,154.41 344.36,155.25 341.21,156.10 338.05,156.96 334.89,157.83 331.74,158.70 328.58,159.58 325.42,160.46 322.26,161.35 319.11,162.25 315.95,163.15 312.79,164.05 309.64,164.96 306.48,165.87 303.32,166.79 300.16,167.71 297.01,168.63\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_167\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"#999999\" fill-opacity=\"0.4\" stroke=\"none\"/>\n    <polyline points=\"297.01,103.17 300.16,103.61 303.32,104.04 306.48,104.47 309.64,104.89 312.79,105.31 315.95,105.73 319.11,106.14 322.26,106.55 325.42,106.95 328.58,107.35 331.74,107.74 334.89,108.12 338.05,108.50 341.21,108.87 344.36,109.24 347.52,109.59 350.68,109.94 353.84,110.27 356.99,110.60 360.15,110.91 363.31,111.21 366.46,111.50 369.62,111.77 372.78,112.02 375.93,112.26 379.09,112.48 382.25,112.68 385.41,112.85 388.56,113.01 391.72,113.13 394.88,113.23 398.03,113.30 401.19,113.33 404.35,113.33 407.51,113.30 410.66,113.23 413.82,113.12 416.98,112.97 420.13,112.78 423.29,112.55 426.45,112.28 429.61,111.97 432.76,111.62 435.92,111.22 439.08,110.80 442.23,110.33 445.39,109.83 448.55,109.29 451.70,108.73 454.86,108.14 458.02,107.51 461.18,106.87 464.33,106.20 467.49,105.50 470.65,104.79 473.80,104.06 476.96,103.31 480.12,102.55 483.28,101.77 486.43,100.98 489.59,100.17 492.75,99.36 495.90,98.53 499.06,97.69 502.22,96.85 505.38,96.00 508.53,95.13 511.69,94.27 514.85,93.39 518.00,92.51 521.16,91.62 524.32,90.73 527.48,89.84 530.63,88.94 533.79,88.03 536.95,87.12 540.10,86.21 543.26,85.29 546.42,84.37\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_168\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke=\"none\"/>\n    <polyline points=\"546.42,148.93 543.26,148.50 540.10,148.07 536.95,147.64 533.79,147.22 530.63,146.80 527.48,146.39 524.32,145.98 521.16,145.57 518.00,145.17 514.85,144.78 511.69,144.39 508.53,144.01 505.38,143.64 502.22,143.27 499.06,142.92 495.90,142.57 492.75,142.23 489.59,141.90 486.43,141.58 483.28,141.28 480.12,140.99 476.96,140.71 473.80,140.45 470.65,140.20 467.49,139.98 464.33,139.77 461.18,139.59 458.02,139.43 454.86,139.30 451.70,139.19 448.55,139.11 445.39,139.07 442.23,139.05 439.08,139.07 435.92,139.13 432.76,139.23 429.61,139.36 426.45,139.54 423.29,139.76 420.13,140.01 416.98,140.31 413.82,140.65 410.66,141.03 407.51,141.44 404.35,141.90 401.19,142.39 398.03,142.91 394.88,143.46 391.72,144.05 388.56,144.66 385.41,145.30 382.25,145.96 379.09,146.65 375.93,147.35 372.78,148.08 369.62,148.82 366.46,149.58 363.31,150.36 360.15,151.14 356.99,151.94 353.84,152.76 350.68,153.58 347.52,154.41 344.36,155.25 341.21,156.10 338.05,156.96 334.89,157.83 331.74,158.70 328.58,159.58 325.42,160.46 322.26,161.35 319.11,162.25 315.95,163.15 312.79,164.05 309.64,164.96 306.48,165.87 303.32,166.79 300.16,167.71 297.01,168.63\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_169\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke=\"none\"/>\n    <polyline points=\"297.01,135.90 300.16,135.66 303.32,135.41 306.48,135.17 309.64,134.93 312.79,134.68 315.95,134.44 319.11,134.19 322.26,133.95 325.42,133.71 328.58,133.46 331.74,133.22 334.89,132.98 338.05,132.73 341.21,132.49 344.36,132.25 347.52,132.00 350.68,131.76 353.84,131.51 356.99,131.27 360.15,131.03 363.31,130.78 366.46,130.54 369.62,130.30 372.78,130.05 375.93,129.81 379.09,129.56 382.25,129.32 385.41,129.08 388.56,128.83 391.72,128.59 394.88,128.35 398.03,128.10 401.19,127.86 404.35,127.62 407.51,127.37 410.66,127.13 413.82,126.88 416.98,126.64 420.13,126.40 423.29,126.15 426.45,125.91 429.61,125.67 432.76,125.42 435.92,125.18 439.08,124.93 442.23,124.69 445.39,124.45 448.55,124.20 451.70,123.96 454.86,123.72 458.02,123.47 461.18,123.23 464.33,122.99 467.49,122.74 470.65,122.50 473.80,122.25 476.96,122.01 480.12,121.77 483.28,121.52 486.43,121.28 489.59,121.04 492.75,120.79 495.90,120.55 499.06,120.30 502.22,120.06 505.38,119.82 508.53,119.57 511.69,119.33 514.85,119.09 518.00,118.84 521.16,118.60 524.32,118.36 527.48,118.11 530.63,117.87 533.79,117.62 536.95,117.38 540.10,117.14 543.26,116.89 546.42,116.65\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_170\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_3)\" fill=\"none\" stroke-width=\"2.13396\" stroke=\"#3366FF\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"butt\"/>\n    <defs>\n      <clipPath id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4\">\n        <rect x=\"0.00\" y=\"0.00\" width=\"576.00\" height=\"360.00\"/>\n      <\/clipPath>\n    <\/defs>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"24.13\" y=\"237.71\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_171\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">40<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"24.13\" y=\"161.87\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_172\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">60<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"24.13\" y=\"86.04\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_173\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">80<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"18.53\" y=\"10.20\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_174\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">100<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"100.66\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_175\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">7<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"198.02\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_176\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">8<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"295.38\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_177\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">9<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"389.94\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_178\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">10<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"487.30\" y=\"300.45\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_179\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">11<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"290.64\" y=\"313.03\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_180\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">l_gdp<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text transform=\"translate(13.50,162.31) rotate(-90)\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_181\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">value<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"154.22\" y=\"344.41\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_182\" font-size=\"8.25pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">rank<\/text>\n    <\/g>\n    <circle cx=\"192.94\" cy=\"340.40\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_183\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\" fill=\"#F8766D\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#F8766D\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <circle cx=\"333.18\" cy=\"340.40\" r=\"1.47pt\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_184\" clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\" fill=\"#00BFC4\" fill-opacity=\"1\" stroke-width=\"0.708661\" stroke=\"#00BFC4\" stroke-opacity=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"/>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"207.06\" y=\"343.61\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_185\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">High infant mortality rate<\/text>\n    <\/g>\n    <g clip-path=\"url(#svg_790a8806-4836-491a-8eea-2a594d6a280b_cl_4)\">\n      <text x=\"347.30\" y=\"343.61\" id=\"svg_790a8806-4836-491a-8eea-2a594d6a280b_el_186\" font-size=\"6.60pt\" fill=\"#FFFFFF\" fill-opacity=\"1\" font-family=\"DejaVu Sans\">Low infant mortality rate<\/text>\n    <\/g>\n  <\/g>\n<\/svg>\n","js":null,"uid":"svg_790a8806-4836-491a-8eea-2a594d6a280b","ratio":1.6,"settings":{"tooltip":{"css":" .tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px ; position:absolute;pointer-events:none;z-index:999;}\n","offx":10,"offy":0,"use_cursor_pos":true,"opacity":0.9,"usefill":false,"usestroke":false,"delay":{"over":200,"out":500}},"hover":{"css":" .hover_SVGID_ { fill:orange;stroke:gray; }\n"},"hoverkey":{"css":" .hover_key_SVGID_ { stroke:red; }\n"},"hovertheme":{"css":" .hover_theme_SVGID_ { fill:green; }\n"},"zoom":{"min":1,"max":1},"capture":{"css":" .selected_SVGID_ { fill:red;stroke:gray; }\n","type":"multiple","only_shiny":true,"selected":[]},"capturekey":{"css":" .selected_key_SVGID_ { stroke:gray; }\n","type":"single","only_shiny":true,"selected":[]},"capturetheme":{"css":" .selected_theme_SVGID_ { stroke:gray; }\n","type":"single","only_shiny":true,"selected":[]},"toolbar":{"position":"topright","saveaspng":true},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
<p>
All of a sudden, the relationship turns positive for high income countries. This is the famous Simpson’s paradox in action. If you don’t know about Simpson’s paradox, you can read about it <a href="https://en.wikipedia.org/wiki/Simpson%27s_paradox">here</a>.
</p>
<p>
Now what? Should we stop here? No.
</p>
<p>
Let’s not even consider Simpson’s paradox. Even though the authors never claim to have found any causal mechanism (and the Economist made no such claim, even though they tried hard to find some after the fact explanation to justify their findings), authors of such studies do very often imply that their simple analysis has at the very least some predictive power. We already know that this is bullocks, because the R² is so low. But let’s try something fun; let’s split the dataset into a training set and a testing set, and let’s see if we can accurately predict the points from the test set. Also, I won’t do this once, because, who knows, maybe that one regression we did had some very hard to predict points in the test set, so I’ll do it 100 times, always with new randomly generated training and testing sets. The way I’m evaluating the accuracy of the regression is visually: I’ll be doing a plot like before, where I’m showing the points from the training set, the points from the test set, as well as the predictions. I’ll also be showing the distance between the prediction and the points from the test set.
</p>
<details>
<summary>
Click to see the code to run the 100 regressions.
</summary>
<pre class="r"><code>run_regression &lt;- function(dataset){

  training_index &lt;- sample(1:nrow(dataset), 120)

  training_set &lt;- dataset[training_index, ]

  testing_set &lt;- dataset[-training_index, ]

  fitted_model &lt;- lm(value ~ l_gdp, data = training_set)

  predicted_points &lt;- predict.lm(fitted_model, newdata = testing_set)

  predicted_points &lt;- cbind(testing_set, "prediction" = predicted_points)

  rbind(training_set, predicted_points)
}

results &lt;- tribble(~id,
                   seq(1, 100)) %&gt;%
  mutate(dataset = list(filter(plot_data, country_name != "Taiwan"))) %&gt;%  
  unnest(cols = c(id)) %&gt;%
  mutate(regression = map(dataset, run_regression))</code></pre>
</details>
<p>
Now that I ran the 100 regressions, let’s create some visualisations:
</p>
<details>
<summary>
Click to see the code to create the plots.
</summary>
<pre class="r"><code>results &lt;- results %&gt;%
  mutate(regression = map(regression,
                          ~mutate(., type_set = ifelse(is.na(prediction),
                                                    "training_set",
                                                    "testing_set"))))


make_plots &lt;- function(dataset){
ggplot() +
  geom_point(data = dataset,
             aes(y = value, x = l_gdp, shape = type_set), size = 5) +
  geom_smooth(data = dataset,
              aes(y = value, x = l_gdp),
              method = "lm") +
  geom_point(data = {dataset %&gt;%
                      filter(!is.na(prediction)) %&gt;%
                       pivot_longer(c(value, prediction), names_to = "values") %&gt;%
                       mutate(values = ifelse(values == "value",
                                              "Actual value",
                                              "Prediction"))},
             aes(y = value, x = l_gdp, colour = values, group = country_name)) +
  geom_path(data = {dataset %&gt;%
                      filter(!is.na(prediction)) %&gt;%
                      pivot_longer(c(value, prediction), names_to = "values") %&gt;%
                      mutate(values = ifelse(values == "value",
                                             "Actual value",
                                             "Prediction"))},
               aes(y = value, x = l_gdp, colour = values, group = country_name),
               arrow = arrow(length = unit(0.03, "npc"))) +
  brotools::theme_blog()
} 

results &lt;- results %&gt;%
  mutate(plots = map(regression, make_plots))</code></pre>
</details>
<p>
Finally, let’s take a look at some of them:
</p>
<details>
<summary>
Click to see some plots.
</summary>
<pre class="r"><code>results$plots[1:3]</code></pre>
<pre><code>## [[1]]</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/ethics_statistics-9-1.png" width="80%" height="auto">
</p>
<pre><code>## 
## [[2]]</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/ethics_statistics-9-2.png" width="80%" height="auto">
</p>
<pre><code>## 
## [[3]]</code></pre>
<pre><code>## `geom_smooth()` using formula 'y ~ x'</code></pre>
<img src="https://b-rodrigues.github.io/assets/img/ethics_statistics-9-3.png" width="80%" height="auto">
</details>
<p>
The red dots are the actual values in the test set (the triangles are the points in the training set). The blue dots are the predictions. See what happens? They all get very close to the regression line. This is of course completely normal; after all, the line is what the model is predicting, so how else could it be? I don’t know if this is exactly what is named “regression towards the mean”, but it does look very much like it. But in general, we speak of regression towards the mean when there’s time involved in whatever you’re studying (for example students that score very well on a first test tend to score worse, on average, on a second test, and vice-versa). But what matters here, is that a regression line cannot even be useful to make any type of prediction.
</p>
<p>
So where does that leave us? Should we avoid using simple methods like linear regression and only use very complex methods? Should we stop communicating numbers and stats and graphs to the general public? Certainly not. But using the excuse that the general public does not understand complex methods to justify using faulty stats is also not an option. In an article that mentions trust in vaccines, it also seems crucial to give more context; trust in vaccines may be higher on average in poorer countries (and that’s an assumption, the article of the Economist does not allow to conclude that), but distrust is also more <a href="https://www.nytimes.com/2013/02/09/world/africa/in-nigeria-polio-vaccine-workers-are-killed-by-gunmen.html">extreme</a>.
</p>
<p>
I don’t think I’ve ever seen the general public distrust science and stats so much than during this pandemic. Many scientists made many predictions that of course never materialized, because scientists should not give out single point forecasts. Unfortunately, that’s what they do because that’s how they get people’s attention, and unfortunately, many also confuse science with stats. I think Millenials are very guilty of this. We all were thought critical thinking in school, and now all arguments devolve very quickly to “I have data and models to back my opinions up so my opinions are actually facts, and your data and models are wrong and you’re a terrible human being by the way”. The problem is that having data and models is not a sufficient condition for being right.
</p>
<p>
As statisticians, we have a responsibility to use the right methods, and make more and better efforts to communicate our results to the general public, even if the methods used are complex. Sometimes there’s simply no simplifying further. Anything else is just charlatanism.
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-12-12-ethics_statistics.html</guid>
  <pubDate>Sat, 12 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Poorman’s automated translation with R and Google Sheets using {googlesheets4}</title>
  <link>https://b-rodrigues.github.io/posts/2020-12-05-poorman_translate.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<link href="../rmarkdown-libs/anchor-sections/anchor-sections.css" rel="stylesheet">
<script src="../rmarkdown-libs/anchor-sections/anchor-sections.js"></script>
<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=2kArCRjT29w"> <img src="https://b-rodrigues.github.io/assets/img/omelette_du_fromage.gif" title="A classic." width="80%" height="auto"></a>
</p>
</div>
<p>
A little trick I thought about this week; using Google Sheets, which includes a “googletranslate()” function to translate a survey that we’re preparing at work, from French to English, and using R of course. You’ll need a Google account for this. Also, keep in mind that you’ll be sending the text you want to translate to Google, so don’t go sending out anything sensitive.
</p>
<p>
First, let’s load the needed packages:
</p>
<pre class="r"><code>library(googlesheets4)
library(dplyr)
library(tibble)</code></pre>
<p>
As an example, I’ll be defining a tibble with one column, and two rows. Each cell contains a sentence in French from the best show in the entire French speaking world, Kaamelott:
</p>
<pre class="r"><code>my_french_tibble &lt;- tribble(~french,
                  "J'apprécie les fruits au sirop",
                  "C'est pas faux")</code></pre>
<p>
To this tibble, I’m now adding two more columns, that contain the following string: “=googletranslate(A:A,”fr“,”en“)”. This is exactly what you would write in the formula bar in Sheets. Then, we need to convert that to an actual Google Sheets formula using <code>gs4_formula()</code>:
</p>
<pre class="r"><code>(
my_french_tibble &lt;- my_french_tibble %&gt;%
  mutate(english = '=googletranslate(A:A, "fr", "en")') %&gt;%
  mutate(portuguese = '=googletranslate(A:A, "fr", "pt")') %&gt;%
  mutate(english = gs4_formula(english),
         portuguese = gs4_formula(portuguese))
)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 2 x 3
##   french     english                           portuguese                       
##   &lt;chr&gt;      &lt;fmla&gt;                            &lt;fmla&gt;                           
## 1 J'appréci… =googletranslate(A:A, "fr", "en") =googletranslate(A:A, "fr", "pt")
## 2 C'est pas… =googletranslate(A:A, "fr", "en") =googletranslate(A:A, "fr", "pt")</code></pre>
<p>
We’re ready to send this to Google Sheets. As soon as the sheet gets uploaded, the formulas will be evaluated, yielding translations in both English and Portuguese.
</p>
<p>
To upload the tibble to sheets, run the following:
</p>
<pre class="r"><code>french_sheet &lt;- gs4_create("repliques_kaamelott",
                           sheets = list(perceval = my_french_tibble))</code></pre>
<p>
You’ll be asked if you want to cache your credentials so that you don’t need to re-authenticate between R sessions:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_oauth.png" width="80%" height="auto">
</p>
<p>
Your browser will the open a tab asking you to login to Google:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_login.png" width="80%" height="auto">
</p>
<p>
At this point, you might get a notification on your phone, alerting you that there was a login to your account:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_android_notification.png" width="80%" height="auto">
</p>
<p>
If you go on your Google Sheets account, this is what you’ll see:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_repliques_kaamelott.png" width="80%" height="auto">
</p>
<p>
And if you open the sheet:
</p>
<p>
<img src="https://b-rodrigues.github.io/assets/img/gs4_repliques_kaamelott_result.png" width="80%" height="auto">
</p>
<p>
Pretty nice, no? You can of course download the workbook, or better yet, never leave your R session at all and simply get back the workbook using either the <code>{googledrive}</code> package, which simply needs the name of the workbook (<code>{googledrive}</code> also needs authentication):
</p>
<pre class="r"><code>(
translations &lt;- googledrive::drive_get("repliques_kaamelott") %&gt;%
  read_sheet
)</code></pre>
<p>
You’ll get a new data frame with the translation:
</p>
<pre><code>Reading from "repliques_kaamelott"
Range "perceval"
# A tibble: 2 x 3
  french                    english                     portuguese              
  &lt;chr&gt;                     &lt;chr&gt;                       &lt;chr&gt;                   
1 J'apprécie les fruits au… I appreciate the fruits in… I apreciar os frutos em…
2 C'est pas faux            It is not false             Não é falsa             </code></pre>
<p>
Or you can use the link to the sheet (which does not require to re-authenticate at this point):
</p>
<pre class="r"><code>translations &lt;- read_sheet("the_link_goes_here", "perceval")</code></pre>
<p>
You could of course encapsulate all these steps into a function and have any text translated very easily! Just be careful not to send out any confidential information out…
</p>



 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2020-12-05-poorman_translate.html</guid>
  <pubDate>Sat, 05 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Graphical User Interfaces were a mistake but you can still make things right</title>
  <link>https://b-rodrigues.github.io/posts/2020-11-21-guis_mistake.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<link href="../rmarkdown-libs/anchor-sections/anchor-sections.css" rel="stylesheet">
<script src="../rmarkdown-libs/anchor-sections/anchor-sections.js"></script>
<div style="text-align:center;">
<p>
<a href="https://youtu.be/cHw4GER-MiE?t=2"> <img src="https://b-rodrigues.github.io/assets/img/just_kill_me.png" title="Welcome to Hell."></a>
</p>
</div>
<p>
Some weeks ago I tweeted this:
</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
GUIs were a mistake
</p>
— Bruno Rodrigues (<span class="citation"><span class="citation" data-cites="brodriguesco">@brodriguesco</span></span>) <a href="https://twitter.com/brodriguesco/status/1314505586172624898?ref_src=twsrc%5Etfw">October 9, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>
you might think that I tweeted this as an unfunny joke, but it’s not. GUIs were one of the worst things to happen for statisticians. Clickable interfaces for data analysis is probably one of the greatest source of mistakes and errors in data processing, very likely costing many millions to companies worldwide and is a source of constant embarassment when mistakes happen which cost the reputation, and money, of institutions or people.
</p>
<p>
Remember the infamous Excel mistake by Reinhard and Rogoff? If you don’t know what I’m talking about, you can get up to speed by reading <a href="https://theconversation.com/the-reinhart-rogoff-error-or-how-not-to-excel-at-economics-13646">this</a>. I think the most interesting sentence is this:
</p>
<blockquote class="blockquote">
<p>
The most serious was that, in their Excel spreadsheet, Reinhart and Rogoff had not selected the entire row when averaging growth figures: they omitted data from Australia, Austria, Belgium, Canada and Denmark.
</p>
</blockquote>
<p>
This is a typical mistake that happens when a mouse is used to select data in a GUI, instead of typing whatever you need in a scripting language. Many other mistakes like that happen, and they remain hidden, potentially for years, or go unreported.
</p>
<p>
Recently there was another Excel-related problem in England where positive Covid tests got lost. For some obscure reason, the raw data, which was encoded in a CSV file, got converted into an Excel spreadsheet, most likely for further analysis. The problem is that the format that was used was the now obsolete XLS format, instead of the latest XLSX format, which can handle millions of rows. Because the data was converted in the XLS format, up to 15841 cases were lost. You can get all the details from this BBC <a href="https://www.bbc.com/news/technology-54423988">article</a>. Again, not entirely Excel’s fault, as it was misused. The problem is that when all you have is a hammer, everything looks like a nail, and Excel is that data analytics hammer. So to the uncultured, everything looks like an Excel problem.
</p>
<p>
Now don’t misunderstand me; I’m not blaming Excel specifically, or any other specific GUI application for this. In many cases, the problem lies between the keyboard and the chair. But GUI applications have a part of responsibility, as they allow users to implement GUI-based workflows. I think that complex GUI based workflows were an unintended consequence of developing GUIs. Who could have expected, 40 years ago, that office jobs would evolve so much and that they would require such complex workflows to generate an output? Consider the life-cycle of a shared Excel file in your typical run-of-the-mill financial advisory firm. In many cases, it starts with an already existing file that was made for another client and that is now used as a starting point. The first thing to do, is to assign a poor junior to update the file and adapt it for the current assignment. He or she will spend hours trying to reverse engineer this Excel file and then update it. This file will at some point go to more senior members that will continue working on it, until it gets send off for review to a manager. This manager, already overworked and with little time between meetings to review the file correctly, just gives it a cursory glance and might find some mistakes here and there. As a review method, colours and comments will be used. The file goes back for a round of updates and reviews. As time goes by, and as the file gets more and more complex, it starts to become impossible to manage and review properly. It eventually gets used to give advice to a client, which might be totally wrong, because just as in the case of Reinhard and Rogoff, someone, at some point, somewhere, did not select the right cells for the right formula. Good luck ever finding this mistake, and who did it. During my consulting years, I have been involved with very, very, big clients that were completely overwhelmed because all their workflows were GUI based. They had been working like that for years, and kept recruiting highly educated people en masse just to manage Excel and Word files. They were looking for a magic, AI-based solution, because in their minds, if AIs could drive fricking cars, they should also be able to edit and send Excel files around for review. Well, we’re not quite there yet, so we told them, after our review of their processes and data sources (which in many cases were Excel AND Word files), that what they needed was for their company to go through an in-depth optimisation process “journey”. They weren’t interested so they kept hiring very intelligent people to be office drones. I don’t think that business model can remain sustainable.
</p>
<p>
Now how much are situations like that the fault of Excel and how much personal responsibility do the people involved have? I don’t know, but my point is that if, by magic, GUIs were made to disappear, problems like that would also not exist. The reason is that if you’re forced to write code to reach the results you want, you avoid a lot of these pitfalls I just described. Working with scripts and the command line forces a discipline unto you; you cannot be lazy and click around. For example, reverse engineering a source code file is much easier that a finished Excel spreadsheet. Even poorly written and undocumented code is always much better than an Excel spreadsheet. If you throw a version control system in the mix, you have the whole history of the file and the ability to know exactly what happened and when. Add unit tests on the pile, and you start to get something that is very robust, transparent, and much easier to audit.
</p>
<p>
“But Bruno, not everyone is a programmer!” I hear you scream at your monitor.
</p>
<p>
My point, again, is that if GUIs did not exist, people would have enough knowledge of these tools to be able to work. What other choice would they have?
</p>
<p>
Of course, GUIs have been invented, and they’re going nowhere. So what can you do?
</p>
<p>
When it comes to statistics and data analysis/processing, you can at least not be part of the problem and avoid using Excel altogether. If we go back to our previous scenario from the financial advisory firm, the first step, which consisted in reverse engineering an Excel file, can be done using <code>{tidyxl}</code>. Let’s take a quick look; the spreadsheet I used as the header image for this blog post comes from the <a href="https://en.wikipedia.org/wiki/Enron_Corpus">Enron corpus</a> , which is mostly know for being a database of over 600000 emails from the US company Enron. But it also contains spreadsheets, which are delightful. You can download the one from the picture <a href="https://github.com/rbind/b-rodrigues.github.com/raw/master/dutch_quigley__9378__modeldutch.xlsx">here</a> (8mb xlsx warning). Opening it in your usual spreadsheet application will probably cause your heart rate to increase to dangerous levels, so avoid that. Instead, let’s take a look at what <code>{tidyxl}</code> does with it:
</p>
<pre class="r"><code>library(tidyxl)</code></pre>
<pre><code>## Warning: package 'tidyxl' was built under R version 4.0.3</code></pre>
<pre class="r"><code>library(tidyverse)</code></pre>
<pre><code>## Warning: replacing previous import 'vctrs::data_frame' by 'tibble::data_frame'
## when loading 'dplyr'</code></pre>
<pre><code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──</code></pre>
<pre><code>## ✔ ggplot2 3.3.2     ✔ purrr   0.3.4
## ✔ tibble  3.0.1     ✔ dplyr   1.0.0
## ✔ tidyr   1.1.2     ✔ stringr 1.4.0
## ✔ readr   1.3.1     ✔ forcats 0.5.0</code></pre>
<pre><code>## Warning: package 'tidyr' was built under R version 4.0.2</code></pre>
<pre><code>## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()</code></pre>
<pre class="r"><code>dutch_quigley_9378 &lt;- xlsx_cells("~/six_to/spreadsheets/dutch_quigley__9378__modeldutch.xlsx")


head(dutch_quigley_9378)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 6 x 21
##   sheet address   row   col is_blank data_type error logical numeric
##   &lt;chr&gt; &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;lgl&gt;    &lt;chr&gt;     &lt;chr&gt; &lt;lgl&gt;     &lt;dbl&gt;
## 1 Swap… A1          1     1 FALSE    character &lt;NA&gt;  NA           NA
## 2 Swap… D2          2     4 FALSE    character &lt;NA&gt;  NA           NA
## 3 Swap… E2          2     5 FALSE    character &lt;NA&gt;  NA           NA
## 4 Swap… F2          2     6 FALSE    character &lt;NA&gt;  NA           NA
## 5 Swap… G2          2     7 FALSE    character &lt;NA&gt;  NA           NA
## 6 Swap… D3          3     4 FALSE    character &lt;NA&gt;  NA           NA
## # … with 12 more variables: date &lt;dttm&gt;, character &lt;chr&gt;,
## #   character_formatted &lt;list&gt;, formula &lt;chr&gt;, is_array &lt;lgl&gt;,
## #   formula_ref &lt;chr&gt;, formula_group &lt;int&gt;, comment &lt;chr&gt;, height &lt;dbl&gt;,
## #   width &lt;dbl&gt;, style_format &lt;chr&gt;, local_format_id &lt;int&gt;</code></pre>
<p>
That whole Excel workbook is inside a neat data frame. Imagine that you want to quickly know where all the formulas are:
</p>
<pre class="r"><code>dutch_quigley_9378 %&gt;%
  filter(!is.na(formula)) %&gt;%
  count(sheet, address)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 18,776 x 3
##    sheet address     n
##    &lt;chr&gt; &lt;chr&gt;   &lt;int&gt;
##  1 Front B22         1
##  2 Front C13         1
##  3 Front C2          1
##  4 Front C22         1
##  5 Front C25         1
##  6 Front C26         1
##  7 Front C27         1
##  8 Front C28         1
##  9 Front C30         1
## 10 Front C31         1
## # … with 18,766 more rows</code></pre>
<p>
With the code above, you can quickly find, for each sheet, where the formulas are. This workbook contains 18776 formulas. If Hell is a real place, it’s probably an office building full of cubicles where you’ll sit for eternity looking at these spreadsheets and trying to make sense of them.
</p>
<p>
Now imagine that you’d like to know what these formulas are, let’s say, for the <code>Swap</code> sheet:
</p>
<pre class="r"><code>dutch_quigley_9378 %&gt;%
  filter(sheet == "Swap", !is.na(formula)) %&gt;%
  select(address, formula)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 6,773 x 2
##    address formula           
##    &lt;chr&gt;   &lt;chr&gt;             
##  1 F1      DAY(EOMONTH(G1,0))
##  2 G1      A11               
##  3 E2      BE9               
##  4 A3      BQ5               
##  5 E3      BF9               
##  6 F3      SUM(G3:K3)        
##  7 H3      $F$1*H2           
##  8 I3      $F$1*I2           
##  9 J3      $F$1*J2           
## 10 K3      $F$1*K2           
## # … with 6,763 more rows</code></pre>
<p>
Brilliant! Maybe you’re interested to find all the <code>“SUM”</code> formulas? Easy!
</p>
<pre class="r"><code>dutch_quigley_9378 %&gt;%
  filter(sheet == "Swap", !is.na(formula)) %&gt;%
  filter(grepl("SUM", formula)) %&gt;%
  select(address, formula)</code></pre>
<pre><code>## Warning: `...` is not empty.
## 
## We detected these problematic arguments:
## * `needs_dots`
## 
## These dots only exist to allow future extensions and should be empty.
## Did you misspecify an argument?</code></pre>
<pre><code>## # A tibble: 31 x 2
##    address formula        
##    &lt;chr&gt;   &lt;chr&gt;          
##  1 F3      SUM(G3:K3)     
##  2 E4      SUM(D11:D309)  
##  3 F5      SUM(G5:K5)     
##  4 E6      SUM(F6:H6)     
##  5 BF8     SUM(BF11:BF242)
##  6 B9      SUM(B47:B294)  
##  7 AB9     SUM(AB11:AB253)
##  8 AC9     SUM(AC11:AC253)
##  9 AD9     SUM(AD11:AD253)
## 10 AE9     SUM(AE11:AE253)
## # … with 21 more rows</code></pre>
<p>
You get the idea. There are many more things that you can extract such as the formatting, the contents of the cells, the comments (and where to find them) and much, much more. This will make making sense of a complex Excel file a breeze.
</p>
<p>
The other thing that you can also do, once you’re done understanding this monster Excel file, is not to perform the analysis inside Excel. Don’t fall into the temptation of continuing this bad habit. As one on the data experts in your team/company, you have a responsibility to bring the light to your colleagues. Be their Prometheus and decouple the data from the code. Let the data be in Excel, but write all the required code to create whatever is expected from you inside R. You can then export your finalized results back to Excel if needed. If management tells you to do it in Excel, tell them that you’re the professional statistician/data scientist, and that they shouldn’t tell you how to do your job. Granted, this is not always possible, but you should plead your case as much as possible. In general, a good manager will be all ears if you explain that not using GUIs like Excel makes it easier to spot and correct mistakes, with the added benefit of being much easily audited and with huge time savings in the long run. This is of course easier for completely new projects, and if you have an open-minded manager. If you’re the manager, then you should ask your IT department to uninstall Excel from your team member’s computers.
</p>
<p>
Be brave, and ditch the GUI.
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-11-21-guis_mistake.html</guid>
  <pubDate>Sat, 21 Nov 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>It’s time to retire the “data scientist” label</title>
  <link>https://b-rodrigues.github.io/posts/2020-11-05-retire_data_science.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<div style="text-align:center;">
<p>
<a> <img src="https://b-rodrigues.github.io/assets/img/venn.png" title="The correct data scientist venn diagram"></a>
</p>
</div>
<p>
The “Data Scientist” label served its purpose; it allowed us to signal a transition happening in our profession from using only applied mathematical statistical methods to something else, which now also involves the use of a subset of software engineering practices. This transition was mentioned back in 2010 by Deborah Nolan (<a href="https://www.stat.berkeley.edu/~statcur/Preprints/ComputingCurric3.pdf" class="uri">https://www.stat.berkeley.edu/~statcur/Preprints/ComputingCurric3.pdf</a>), and this transition might now be complete. Version control systems, document generation from annotated source code (or even full reports generation <em>à la</em> rmarkdown), containers and build automation tools have now entered the toolbox of the run-of-the-mill statistician. Maybe not all of these tools, of course, it largely depends on what it is exactly you do, but certainly some of these. Same goes for software engineering practices. I have had the opportunity to work with some old-school statisticians (and still do), and the difference is clear; just like old school users of WYSIWYG editors like Word don’t use its “newest” features such as “Track changes” (and thus keep writing their text in different colors to signal which paragraphs are new), or the concept of versions of a document synced on Sharepoint (and thus keep multiple versions of the same document with different names) old school statisticians have not included the tools I mentioned before in their toolbox.
</p>
<p>
<img src="http://www.phdcomics.com/comics/archive/phd101212s.gif"><!-- -->
</p>
<p>
Now don’t get me wrong here; that is absolutely ok. We need and respect old school statisticians because they’ve been in the business of getting insights from data for longer than I’ve been alive. This blog post is not a jab at them because they don’t know how to use git (if you interpret it like that, that’s on you). Old school statisticians now have very senior positions and for many of them, their job does not involve getting their hands dirty on data anymore; most of them are now more like managers or mentors, and share their deep knowledge with their more junior team members. (Obviously there’s exceptions, when I say <em>all</em> old school statisticians do this or that, I don’t mean <em>all</em> of them, but most of them. Of course, I don’t have any evidence to back that up).
</p>
<p>
What this blog post is about is the label “Data Scientist” that gets used by these more junior team members and by companies that want to hire talented and motivated young people. This label, and the purported difference between a “Data Scientist” and “statistician” does not make any sense in 2020 anymore. (I know I’m beating a dead horse here, but this is my blog. I’ll blog about dead horses as much as I want thank you very much.)
</p>
<p>
Firstly, this label has always been confusing. “Data Scientist”… what does it even mean? The fact it took so long to find a definition, and that almost everyone working in the profession has a different one speaks volumes. Also, don’t all scientists use data? Data from experiments, from observational studies, from surveys, from the literature?
</p>
<p>
Secondly, I don’t believe that you can get a degree in statistics today without any exposition whatsoever to at least some of the tools I mentioned before. I really doubt that there’s people out there getting Master’s degrees in statistics without having <em>ever</em> touched these tools, or the unix command line. The degrees they’re going for might not focus a lot on these tools, true, but they certainly touch upon them. And of course, once they join a team at their first job, they’ll get more exposed to these tools and incorporate them in their day to day work. So, they’re not statisticians anymore? Their degree magically transformed into a data science degree?
</p>
<p>
But what about data science degrees? Are the students graduating with these degrees statisticians? I’d argue that yes, they are indeed statisticians; it’s just that they took a statistics degree that might have focused more than usual on these “new” practices/tools, and changed its name to “Data Science degree” for marketing purposes.
</p>
<p>
Anyways, the label “Data Scientist” is now completely defunct; as I mentioned in the very beginning, it served us well to signal that a transition was happening in the profession. I believe that this transition is now complete, or should be nearing its final stages. Also, this transition was not only about the tools used, but also about the deliverables. Statisticians now don’t only deliver tables, graphs and studies but more and more of them deliver <em>products</em>. This product can be a package implementing a bleeding edge statistical method for the profession as a whole, or it can be part of a piece of software that needs it to run (like your smartphone keyboard using a statistical model for word predictions). See <a href="https://www.tandfonline.com/doi/full/10.1080/10691898.2020.1845109?scroll=top&amp;needAccess=true&amp;">this paper</a> for an interesting exposition about how curricula and deliverables have evolved in the past two decades.
</p>
<p>
Currently, this label gets used by people that try to get insights from data. But we already have a word for them; statisticians. It’s just that the tools of the statistician have evolved over the past decade or so. Actually, I would perhaps even make another distinction; we should reserve the label of “statistician” to people that do statistics without ever touching any data. The other statisticians, the ones that get dirty wrestling in the mud with the data (they’re the <em>pigs that like it</em> from that famous quote) should be called “data janitors”. I’m not even joking; not only does that term already exist and gets used, I think it suits what we do perfectly. What do janitors do? They clean stuff and put things in order. We clean data and put it in order; meaning creating summary tables, visualizations, interactive applications, and models. Oh, and we do so (preferably) in a reproducible way.
</p>
<p>
Hope you enjoyed! If you found this blog post useful, you might want to follow me on <a href="https://www.twitter.com/brodriguesco">twitter</a> for blog post updates and <a href="https://www.buymeacoffee.com/brodriguesco">buy me an espresso</a> or <a href="https://www.paypal.me/brodriguesco">paypal.me</a>, or buy my ebook on <a href="https://leanpub.com/modern_tidyverse">Leanpub</a>.
</p>
<style>.bmc-button img{width: 27px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{line-height: 36px !important;height:37px !important;text-decoration: none !important;display:inline-flex !important;color:#ffffff !important;background-color:#272b30 !important;border-radius: 3px !important;border: 1px solid transparent !important;padding: 1px 9px !important;font-size: 22px !important;letter-spacing:0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#82518c !important;}</style>
<p>
<link href="https://fonts.googleapis.com/css?family=Cookie" rel="stylesheet"><a class="bmc-button" target="_blank" href="https://www.buymeacoffee.com/brodriguesco"><img src="https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg" alt="Buy me an Espresso"><span style="margin-left:5px">Buy me an Espresso</span></a>
</p>



 ]]></description>
  <category>R</category>
  <category>econometrics</category>
  <guid>https://b-rodrigues.github.io/posts/2020-11-05-retire_data_science.html</guid>
  <pubDate>Thu, 05 Nov 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building apps with {shinipsum} and {golem}</title>
  <link>https://b-rodrigues.github.io/posts/2020-09-27-golemDemo.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=B35E8QleVhg"> <img src="https://b-rodrigues.github.io/assets/img/golem.png" title="Only 90's kids will get it" width="80%" height="auto"></a>
</p>
</div>
<p>
<a href="../posts/2020-09-20-shiny_raspberry.html">In my previous blog post</a> I showed you how I set up my own Shiny server using a Raspberry Pi 4B. If you visited the following <a href="../posts/2020-09-20-shiny_raspberry.html">link</a> you’ll be connecting to my Raspberry Pi and can play around with a Shiny app that I called <code>golemDemo</code>. It’s been quite a few months that I wanted to discuss this app:
</p>
{{% tweet “1277671383573704706” %}}
<p>
So the tweet mentions that a video was coming in the following week and you’ll notice that the tweet was made on… June 29th, and still no video. As I said in my previous blog post, I’ve been busy. Anyways, here’s already a blog post, and I might still do a video where I’ll go into greater detail. I think that videos are quite nice to walk an audience through an app, but it works best with an accompanying blog post where I can comment some more complicated snippets of code.
</p>
<section id="why-golem" class="level1">
<h1>
Why <code>{golem}</code>?
</h1>
<p>
Why should you consider the <code>{golem}</code> package to develop your Shiny apps? For me, there are two main reasons. First of all, I’m already familiar with package development in R, having made some little packages that I have on my Github account, and one out on CRAN (with the complete texts of Luxembourguish author <a href="https://cran.r-project.org/web/packages/michelRodange/index.html">Michel Rodange</a>) so using <code>{golem}</code> came at no additional costs. This is because a Shiny app built with <code>{golem}</code> is actually an R package! This has many advantages; all the steps of documenting, testing and sharing the app are greatly simplified. Another reason to use <code>{golem}</code> is that it forces on you a certain way of working. Now this might seem like a pretty bad thing, but I find that it is quite helpful. When you start working on a Shiny app, you might get very quickly overwhelmed with both thinking about your server logic and your UI. You might spend much time tinkering with getting the server functions working, while still not having no UI to speak of, or you might work on one part of the server and then go to the UI, then back on the server… You’ll spend hours working on the app without a clear approach, and probably waste much time because of this back and forth. The first recommended step when building a shiny app (with or without <code>{golem}</code>) is a “UI first” approach. For this, we’re going to use <code>{shinipsum}</code>
</p>
</section>
<section id="lorem-ipsum-dolor-server-amet-its-latin-for-dont-bother-with-the-server-logic-until-its-time" class="level1">
<h1>
Lorem ipsum dolor server amet (it’s Latin for “don’t bother with the server logic until it’s time”)
</h1>
<p>
The developers of <code>{golem}</code>, French company <a href="https://thinkr.fr/">ThinkR</a> suggest an “UI” first approach. The idea is to focus on the UI, and to do so using their other package called <code>{shinipsum}</code> to randomly generate elements on the server side which you can then later replace with your actual server logic. For instance, imagine that somewhere on your app, you want to show a bar plot using the <code>{ggplot2}</code> package. Using <code>{shinipsum}</code>, you can generate a random bar plot with the following line:
</p>
<pre class="r"><code>shinipsum::random_ggplot("bar")</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/golemDemo-2-1.png" width="80%" height="auto">
</p>
<p>
and that’s it! Now simply ignore this bit on the server, and continue focusing on the UI. You need to show a random table? No problem:
</p>
<pre class="r"><code>shinipsum::random_table(ncol = 7, nrow = 10)</code></pre>
<pre><code>##    conc rate   state conc.1 rate.1 state.1 conc.2
## 1  0.02   76 treated   0.02     76 treated   0.02
## 2  0.02   47 treated   0.02     47 treated   0.02
## 3  0.06   97 treated   0.06     97 treated   0.06
## 4  0.06  107 treated   0.06    107 treated   0.06
## 5  0.11  123 treated   0.11    123 treated   0.11
## 6  0.11  139 treated   0.11    139 treated   0.11
## 7  0.22  159 treated   0.22    159 treated   0.22
## 8  0.22  152 treated   0.22    152 treated   0.22
## 9  0.56  191 treated   0.56    191 treated   0.56
## 10 0.56  201 treated   0.56    201 treated   0.56</code></pre>
<p>
Your app might now look something like this (actually, it won’t because the little demo below is not a <code>{golem}</code> app, but it illustrates <code>{shinipsum}</code> well):
</p>
<pre class="r"><code>library(shiny)
library(reactable)
library(shinipsum)
library(ggiraph)

ui &lt;- pageWithSidebar(
  
  headerPanel("This is a shinipsum demo"),
  
  sidebarPanel(
    sliderInput("rows",
                "Number of rows:",
                min = 1,
                max = 50,
                value = 5)
  ),
  
  mainPanel(
    reactableOutput("table"),
    girafeOutput("graph")
  )
)


server &lt;- function(input, output) {

  output$table &lt;- renderReactable({
    reactable(random_table(ncol = 10, nrow = input$rows))
  })

  output$graph &lt;- renderGirafe({
    girafe(ggobj = random_ggplot("bar"))
  })
}

shinyApp(ui = ui, server = server)</code></pre>
<p>
If you have the required packages, running this on a fresh R session should start a little app.
</p>
<p>
You see that the server is only a call to <code>shinipsum::random_table</code>, and <code>shinipsum::random_ggplot</code>. Because I want a <code>reactable</code> and an interactive plot using the <code>{ggiraph}</code> package, I have already written the minimum amount of code on the server side to get things working. Now I can focus on my UI and then, when I’m done, I can start replacing the random objects from <code>{shinipsum}</code> with the actual code.
</p>
<p>
Now proceeding in this way is not a requirement of <code>{golem}</code>, but it helps to structure your thoughts and your app, and you can use this approach for any type of app. The example above, after all, is not a <code>{golem}</code> app.
</p>
</section>
<section id="get-modular-with-golem" class="level1">
<h1>
Get modular with <code>{golem}</code>
</h1>
<p>
This is now where we get to some more interesting, and <code>{golem}</code> specific things. If you’ve been using R and Shiny for the past years, you’ve probably have heard a lot about functional programming. Functional programming is a programming paradigm that encourages, and in some languages forces, the use of functions. The idea is that everything you do should be a call to a function, and functions should be chained together to achieve whatever it is you want to do; cleaning data, visualizing data, modeling data… R has many functional tools out of the box, which can be complemented using the <code>{purrr}</code> package. What does all of this have to do with Shiny and <code>{golem}</code>? Well, <code>{golem}</code> forces you to write modules to build your apps, and modules are very similar to functions (they’re actually functions). They’re bits of code that can be decoupled from your app, used in any other app, they can be linked together, they can be easily documented and tested… If you are familiar with R’s functional programming approach, modules should not be totally new to you. But if you’ve been using Shiny without module, they’ll require some getting used to.
</p>
<p>
To illustrate how a simple app can be written using modules, I have built <code>golemDemo</code>, which, as implied by its name, is a demonstration of a <code>{golem}</code> app which I hope is simple enough for anyone to start using. The app is quite simple and does only three things:
</p>
<ul>
<li>
it allows you to choose between two datasets;
</li>
<li>
it shows a table of the selected dataset;
</li>
<li>
it shows a map of Luxembourg with the data points;
</li>
</ul>
<p>
Each of these things is a module, which means that if I were to create another app with a map of Luxembourg, I could simply reuse it. But remember, the app is actually an R package. Here is the root of the app on my computer:
</p>
<pre class="r"><code>system2("ls", args = "-lFR ~/Documents/golemDemo", stdout = TRUE)</code></pre>
<pre><code>##  [1] "/home/cbrunos/Documents/golemDemo:"                                    
##  [2] "total 56"                                                              
##  [3] "-rw-r--r-- 1 cbrunos users  302 Sep 19 11:28 app.R"                    
##  [4] "drwxr-xr-x 2 cbrunos users 4096 Jun 29 17:49 data-raw/"                
##  [5] "-rw-r--r-- 1 cbrunos users  729 Sep 19 21:27 DESCRIPTION"              
##  [6] "drwxr-xr-x 2 cbrunos users 4096 Sep 11 23:39 dev/"                     
##  [7] "-rw-r--r-- 1 cbrunos users 2723 Sep 12 15:04 Dockerfile"               
##  [8] "drwxr-xr-x 3 cbrunos users 4096 Jun 28 11:33 inst/"                    
##  [9] "-rw-r--r-- 1 cbrunos users  483 Apr  8 21:38 LICENSE.md"               
## [10] "drwxr-xr-x 2 cbrunos users 4096 Sep 19 21:27 man/"                     
## [11] "-rw-r--r-- 1 cbrunos users 1420 Sep 19 21:27 NAMESPACE"                
## [12] "drwxr-xr-x 2 cbrunos users 4096 Sep 19 21:27 R/"                       
## [13] "-rw-r--r-- 1 cbrunos users 1056 Jun 28 11:38 README.Rmd"               
## [14] "drwxr-xr-x 3 cbrunos users 4096 Sep 11 17:12 rsconnect/"               
## [15] "drwxr-xr-x 3 cbrunos users 4096 Jun 28 11:48 tests/"                   
## [16] "drwxr-xr-x 2 cbrunos users 4096 Jun 28 11:48 vignettes/"               
## [17] ""                                                                      
## [18] "/home/cbrunos/Documents/golemDemo/data-raw:"                           
## [19] "total 1168"                                                            
## [20] "-rw-r--r-- 1 cbrunos users 1176106 Jun 11 09:52 communes_df.csv"       
## [21] "-rw-r--r-- 1 cbrunos users      99 Jun 28 11:48 my_dataset.R"          
## [22] "-rw-r--r-- 1 cbrunos users    1998 Jun 28 17:00 radars.csv"            
## [23] "-rw-r--r-- 1 cbrunos users    6390 Jun 28 12:31 rettungspunkte.csv"    
## [24] ""                                                                      
## [25] "/home/cbrunos/Documents/golemDemo/dev:"                                
## [26] "total 16"                                                              
## [27] "-rw-r--r-- 1 cbrunos users 1935 Jun 28 11:33 01_start.R"               
## [28] "-rw-r--r-- 1 cbrunos users 2011 Sep 11 23:39 02_dev.R"                 
## [29] "-rw-r--r-- 1 cbrunos users 1012 Jun 28 11:33 03_deploy.R"              
## [30] "-rw-r--r-- 1 cbrunos users  318 Jun 28 11:33 run_dev.R"                
## [31] ""                                                                      
## [32] "/home/cbrunos/Documents/golemDemo/inst:"                               
## [33] "total 8"                                                               
## [34] "drwxr-xr-x 3 cbrunos users 4096 Jun 28 11:33 app/"                     
## [35] "-rw-r--r-- 1 cbrunos users  140 Jun 28 11:38 golem-config.yml"         
## [36] ""                                                                      
## [37] "/home/cbrunos/Documents/golemDemo/inst/app:"                           
## [38] "total 4"                                                               
## [39] "drwxr-xr-x 2 cbrunos users 4096 Jun 28 11:48 www/"                     
## [40] ""                                                                      
## [41] "/home/cbrunos/Documents/golemDemo/inst/app/www:"                       
## [42] "total 12"                                                              
## [43] "-rw-r--r-- 1 cbrunos users    0 Jun 28 11:48 custom.css"               
## [44] "-rw-r--r-- 1 cbrunos users 3774 Jun 28 11:33 favicon.ico"              
## [45] "-rw-r--r-- 1 cbrunos users  100 Jun 28 11:48 handlers.js"              
## [46] "-rw-r--r-- 1 cbrunos users   40 Jun 28 11:48 script.js"                
## [47] ""                                                                      
## [48] "/home/cbrunos/Documents/golemDemo/man:"                                
## [49] "total 8"                                                               
## [50] "-rw-r--r-- 1 cbrunos users 261 Sep 19 21:27 pipe.Rd"                   
## [51] "-rw-r--r-- 1 cbrunos users 291 Jun 28 11:33 run_app.Rd"                
## [52] ""                                                                      
## [53] "/home/cbrunos/Documents/golemDemo/R:"                                  
## [54] "total 48"                                                              
## [55] "-rw-r--r-- 1 cbrunos users  783 Jun 28 11:33 app_config.R"             
## [56] "-rw-r--r-- 1 cbrunos users  654 Jun 29 18:34 app_server.R"             
## [57] "-rw-r--r-- 1 cbrunos users 1790 Sep 12 15:00 app_ui.R"                 
## [58] "-rw-r--r-- 1 cbrunos users    0 Jun 28 11:48 fct_helpers.R"            
## [59] "-rw-rw-r-- 1 cbrunos users  997 Jun 28 11:38 golem_utils_server.R"     
## [60] "-rw-rw-r-- 1 cbrunos users 5849 Jun 28 11:38 golem_utils_ui.R"         
## [61] "-rw-r--r-- 1 cbrunos users  549 Jun 28 11:48 mod_filter_data.R"        
## [62] "-rw-r--r-- 1 cbrunos users 3118 Sep 19 11:16 mod_load_data.R"          
## [63] "-rw-r--r-- 1 cbrunos users 2088 Jun 29 18:30 mod_map_data.R"           
## [64] "-rw-r--r-- 1 cbrunos users  910 Jun 29 18:17 mod_table_data.R"         
## [65] "-rw-r--r-- 1 cbrunos users  337 Jun 28 11:33 run_app.R"                
## [66] "-rw-r--r-- 1 cbrunos users    0 Jun 28 11:48 utils_helpers.R"          
## [67] "-rw-r--r-- 1 cbrunos users  207 Sep 19 21:27 utils-pipe.R"             
## [68] ""                                                                      
## [69] "/home/cbrunos/Documents/golemDemo/rsconnect:"                          
## [70] "total 4"                                                               
## [71] "drwxr-xr-x 3 cbrunos users 4096 Sep 11 17:12 shinyapps.io/"            
## [72] ""                                                                      
## [73] "/home/cbrunos/Documents/golemDemo/rsconnect/shinyapps.io:"             
## [74] "total 4"                                                               
## [75] "drwxr-xr-x 2 cbrunos users 4096 Sep 11 17:12 brodriguesco/"            
## [76] ""                                                                      
## [77] "/home/cbrunos/Documents/golemDemo/rsconnect/shinyapps.io/brodriguesco:"
## [78] "total 4"                                                               
## [79] "-rw-r--r-- 1 cbrunos users 219 Sep 19 21:30 golemdemo.dcf"             
## [80] ""                                                                      
## [81] "/home/cbrunos/Documents/golemDemo/tests:"                              
## [82] "total 8"                                                               
## [83] "drwxr-xr-x 2 cbrunos users 4096 Jun 28 11:48 testthat/"                
## [84] "-rw-r--r-- 1 cbrunos users   62 Jun 28 11:48 testthat.R"               
## [85] ""                                                                      
## [86] "/home/cbrunos/Documents/golemDemo/tests/testthat:"                     
## [87] "total 4"                                                               
## [88] "-rw-r--r-- 1 cbrunos users 64 Jun 28 11:48 test-app.R"                 
## [89] ""                                                                      
## [90] "/home/cbrunos/Documents/golemDemo/vignettes:"                          
## [91] "total 4"                                                               
## [92] "-rw-r--r-- 1 cbrunos users 298 Jun 28 11:48 golemDemo.Rmd"</code></pre>
<p>
The first 16 lines show the root of the folder, and then we see what’s inside each subfolder, starting with <code>data-raw/</code>, then <code>dev/</code> etc (this is done via a call to the <code>ls -lFR</code> Linux command, invoked here with R’s <code>system2()</code> function).
</p>
<p>
If you’ve already developed a package in the past, you’ll recognize the structure. What’s important here is the <code>dev/</code> folder, which is <code>{golem}</code> specific. This folder contains for files, <code>01_start.R</code>, <code>02_dev.R</code>, <code>03_deploy.R</code> and <code>run_dev.R</code>. These files are the ones that will help you develop your shiny app and you should follow the instructions contained in each of them. Let’s take a look at <code>01_start.R</code>:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/dev/01_start.R", stdout = TRUE)</code></pre>
<pre><code>##  [1] "# Building a Prod-Ready, Robust Shiny Application."                                     
##  [2] "# "                                                                                     
##  [3] "# README: each step of the dev files is optional, and you don't have to "               
##  [4] "# fill every dev scripts before getting started. "                                      
##  [5] "# 01_start.R should be filled at start. "                                               
##  [6] "# 02_dev.R should be used to keep track of your development during the project."        
##  [7] "# 03_deploy.R should be used once you need to deploy your app."                         
##  [8] "# "                                                                                     
##  [9] "# "                                                                                     
## [10] "########################################"                                               
## [11] "#### CURRENT FILE: ON START SCRIPT #####"                                               
## [12] "########################################"                                               
## [13] ""                                                                                       
## [14] "## Fill the DESCRIPTION ----"                                                           
## [15] "## Add meta data about your application"                                                
## [16] "golem::fill_desc("                                                                      
## [17] "  pkg_name = \"golemDemo\", # The Name of the package containing the App "              
## [18] "  pkg_title = \"PKG_TITLE\", # The Title of the package containing the App "            
## [19] "  pkg_description = \"PKG_DESC.\", # The Description of the package containing the App "
## [20] "  author_first_name = \"AUTHOR_FIRST\", # Your First Name"                              
## [21] "  author_last_name = \"AUTHOR_LAST\", # Your Last Name"                                 
## [22] "  author_email = \"AUTHOR@MAIL.COM\", # Your Email"                                     
## [23] "  repo_url = NULL # The URL of the GitHub Repo (optional) "                             
## [24] ")     "                                                                                 
## [25] ""                                                                                       
## [26] "## Set {golem} options ----"                                                            
## [27] "golem::set_golem_options()"                                                             
## [28] ""                                                                                       
## [29] "## Create Common Files ----"                                                            
## [30] "## See ?usethis for more information"                                                   
## [31] "usethis::use_mit_license( name = \"Golem User\" )  # You can set another license here"  
## [32] "usethis::use_readme_rmd( open = FALSE )"                                                
## [33] "usethis::use_code_of_conduct()"                                                         
## [34] "usethis::use_lifecycle_badge( \"Experimental\" )"                                       
## [35] "usethis::use_news_md( open = FALSE )"                                                   
## [36] ""                                                                                       
## [37] "## Use git ----"                                                                        
## [38] "usethis::use_git()"                                                                     
## [39] ""                                                                                       
## [40] "## Init Testing Infrastructure ----"                                                    
## [41] "## Create a template for tests"                                                         
## [42] "golem::use_recommended_tests()"                                                         
## [43] ""                                                                                       
## [44] "## Use Recommended Packages ----"                                                       
## [45] "golem::use_recommended_deps()"                                                          
## [46] ""                                                                                       
## [47] "## Favicon ----"                                                                        
## [48] "# If you want to change the favicon (default is golem's one)"                           
## [49] "golem::remove_favicon()"                                                                
## [50] "golem::use_favicon() # path = \"path/to/ico\". Can be an online file. "                 
## [51] ""                                                                                       
## [52] "## Add helper functions ----"                                                           
## [53] "golem::use_utils_ui()"                                                                  
## [54] "golem::use_utils_server()"                                                              
## [55] ""                                                                                       
## [56] "# You're now set! ----"                                                                 
## [57] ""                                                                                       
## [58] "# go to dev/02_dev.R"                                                                   
## [59] "rstudioapi::navigateToFile( \"dev/02_dev.R\" )"                                         
## [60] ""</code></pre>
<p>
This script is a series of calls to <code>{usethis}</code> functions; you can remove whatever you don’t need and adapt the others that you need. As you can see, I did not change much here. Execute it line by line when you’re done editing it. Once you’re done, you can go to <code>02_dev.R</code> and this is probably the script that you’ll change the most:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/dev/02_dev.R", stdout = TRUE)</code></pre>
<pre><code>##  [1] "# Building a Prod-Ready, Robust Shiny Application."                             
##  [2] "# "                                                                             
##  [3] "# README: each step of the dev files is optional, and you don't have to "       
##  [4] "# fill every dev scripts before getting started. "                              
##  [5] "# 01_start.R should be filled at start. "                                       
##  [6] "# 02_dev.R should be used to keep track of your development during the project."
##  [7] "# 03_deploy.R should be used once you need to deploy your app."                 
##  [8] "# "                                                                             
##  [9] "# "                                                                             
## [10] "###################################"                                            
## [11] "#### CURRENT FILE: DEV SCRIPT #####"                                            
## [12] "###################################"                                            
## [13] ""                                                                               
## [14] "# Engineering"                                                                  
## [15] ""                                                                               
## [16] "## Dependencies ----"                                                           
## [17] "## Add one line by package you want to add as dependency"                       
## [18] "usethis::use_package( \"shiny\" )"                                              
## [19] "usethis::use_package( \"shinydashboard\" )"                                     
## [20] "usethis::use_package(\"data.table\") "                                          
## [21] "usethis::use_package(\"DT\")"                                                   
## [22] "usethis::use_package(\"dplyr\")"                                                
## [23] "usethis::use_package(\"rlang\")"                                                
## [24] "usethis::use_package(\"ggiraph\")"                                              
## [25] "usethis::use_package(\"ggplot2\")"                                              
## [26] "usethis::use_package(\"htmlwidgets\")"                                          
## [27] "usethis::use_package(\"dplyr\")"                                                
## [28] "usethis::use_package(\"colorspace\")"                                           
## [29] "usethis::use_package(\"shinycssloaders\")"                                      
## [30] "usethis::use_package(\"lubridate\")"                                            
## [31] ""                                                                               
## [32] "## Add modules ----"                                                            
## [33] "## Create a module infrastructure in R/"                                        
## [34] "golem::add_module( name = \"name_of_module1\" ) # Name of the module"           
## [35] "golem::add_module( name = \"name_of_module2\" ) # Name of the module"           
## [36] ""                                                                               
## [37] "## Add helper functions ----"                                                   
## [38] "## Creates ftc_* and utils_*"                                                   
## [39] "golem::add_fct( \"helpers\" ) "                                                 
## [40] "golem::add_utils( \"helpers\" )"                                                
## [41] ""                                                                               
## [42] "## External resources"                                                          
## [43] "## Creates .js and .css files at inst/app/www"                                  
## [44] "golem::add_js_file( \"script\" )"                                               
## [45] "golem::add_js_handler( \"handlers\" )"                                          
## [46] "golem::add_css_file( \"custom\" )"                                              
## [47] ""                                                                               
## [48] "## Add internal datasets ----"                                                  
## [49] "## If you have data in your package"                                            
## [50] "usethis::use_data_raw( name = \"my_dataset\", open = FALSE ) "                  
## [51] ""                                                                               
## [52] "## Tests ----"                                                                  
## [53] "## Add one line by test you want to create"                                     
## [54] "usethis::use_test( \"app\" )"                                                   
## [55] ""                                                                               
## [56] "# Documentation"                                                                
## [57] ""                                                                               
## [58] "## Vignette ----"                                                               
## [59] "usethis::use_vignette(\"golemDemo\")"                                           
## [60] "devtools::build_vignettes()"                                                    
## [61] ""                                                                               
## [62] "## Code coverage ----"                                                          
## [63] "## (You'll need GitHub there)"                                                  
## [64] "usethis::use_github()"                                                          
## [65] "usethis::use_travis()"                                                          
## [66] "usethis::use_appveyor()"                                                        
## [67] ""                                                                               
## [68] "# You're now set! ----"                                                         
## [69] "# go to dev/03_deploy.R"                                                        
## [70] "rstudioapi::navigateToFile(\"dev/03_deploy.R\")"                                
## [71] ""</code></pre>
<p>
This is where you will list the dependencies of your package (lines 18 to 30) as well as the modules (lines 34 to 35). I have mostly used this file for the dependencies, as I already had the modules from another app, so I didn’t bother listing them here. But if I would have started from scratch, I would changed the line:
</p>
<pre><code>golem::add_module( name = \"name_of_module1\" ) # Name of the module</code></pre>
<p>
to something like:
</p>
<pre><code>golem::add_module( name = \"import_data\" ) # Name of the module</code></pre>
<p>
and executing it would have generated the needed files to start creating the module at the right spot. Let’s go see how such a module looks like (I’m skipping the third script for now, as it is only useful once you want to deploy).
</p>
<p>
You can find the modules in the <code>R/</code> folder. Let’s take a look at the module that allows the user to load the data:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/R/mod_load_data.R", stdout = TRUE)</code></pre>
<pre><code>##   [1] "#' load_data UI Function"                                                                                                    
##   [2] "#'"                                                                                                                          
##   [3] "#' @description A shiny Module."                                                                                             
##   [4] "#'"                                                                                                                          
##   [5] "#' @param id,input,output,session Internal parameters for {shiny}."                                                          
##   [6] "#'"                                                                                                                          
##   [7] "#' @noRd "                                                                                                                   
##   [8] "#'"                                                                                                                          
##   [9] "#' @importFrom shiny NS tagList "                                                                                            
##  [10] "#' @importFrom data.table fread"                                                                                             
##  [11] "#' @importFrom DT renderDataTable dataTableOutput"                                                                           
##  [12] "#' @importFrom dplyr filter"                                                                                                 
##  [13] "#' @importFrom rlang quo `!!` as_name"                                                                                       
##  [14] "mod_load_data_ui &lt;- function(id){"                                                                                           
##  [15] "  ns &lt;- NS(id)"                                                                                                              
##  [16] "  tagList("                                                                                                                  
##  [17] "    box(title = \"Select dataset\","                                                                                         
##  [18] "        radioButtons(ns(\"select_dataset\"),"                                                                                
##  [19] "                    label = \"Select dataset\","                                                                             
##  [20] "                    choices = c(\"Rescue points\", \"Radars\"),"                                                             
##  [21] "                    selected = c(\"Rescue points\")),"                                                                       
##  [22] "        conditionalPanel("                                                                                                   
##  [23] "          condition = paste0('input[\\'', ns('select_dataset'), \"\\'] == \\'Rescue points\\'\"),"                           
##  [24] "          selectInput(ns(\"selector_place\"), \"Place\","                                                                    
##  [25] "                      choices = c(\"test\"),"                                                                                
##  [26] "                      #choices = c(unique(output$dataset$place)),"                                                           
##  [27] "                      selected = c(\"Luxembourg, Ville (G)\"),"                                                              
##  [28] "                      multiple = TRUE)),"                                                                                    
##  [29] "        conditionalPanel("                                                                                                   
##  [30] "          condition = paste0('input[\\'', ns('select_dataset'), \"\\'] == \\'Radars\\'\"),"                                  
##  [31] "          selectInput(ns(\"selector_radar\"), \"Radar\","                                                                    
##  [32] "                      choices = c(\"test\"),"                                                                                
##  [33] "                      #choices = c(\"huhu\"),"                                                                               
##  [34] "                      selected = c(\"National road\"),"                                                                      
##  [35] "                      multiple = TRUE)),"                                                                                    
##  [36] "        width = NULL),"                                                                                                      
##  [37] "  )"                                                                                                                         
##  [38] "}"                                                                                                                           
##  [39] ""                                                                                                                            
##  [40] "#' load_data Server Function"                                                                                                
##  [41] "#'"                                                                                                                          
##  [42] "#' @noRd "                                                                                                                   
##  [43] "mod_load_data_server &lt;- function(input, output, session){"                                                                   
##  [44] "  ns &lt;- session$ns"                                                                                                          
##  [45] " "                                                                                                                           
##  [46] "  "                                                                                                                          
##  [47] "  read_dataset &lt;- reactive({"                                                                                                
##  [48] "    if(input$select_dataset == \"Rescue points\") {"                                                                         
##  [49] ""                                                                                                                            
##  [50] "      dataset &lt;- fread(\"data-raw/rettungspunkte.csv\")"                                                                     
##  [51] "      variable &lt;- quo(place)"                                                                                                
##  [52] "      filter_values &lt;- unique(dataset[, place])"                                                                             
##  [53] "    } else {"                                                                                                                
##  [54] "      dataset &lt;- fread(\"data-raw/radars.csv\")"                                                                             
##  [55] "      variable &lt;- quo(type_road)"                                                                                            
##  [56] "      filter_values &lt;- unique(dataset[, type_road])"                                                                         
##  [57] "    }"                                                                                                                       
##  [58] "    cat(\"reading data\\n\")"                                                                                                
##  [59] "    list(dataset = dataset,"                                                                                                 
##  [60] "         variable = variable,"                                                                                               
##  [61] "         filter_values = filter_values)"                                                                                     
##  [62] "  })"                                                                                                                        
##  [63] ""                                                                                                                            
##  [64] ""                                                                                                                            
##  [65] "  observe({"                                                                                                                 
##  [66] "    updateSelectInput(session, \"selector_place\", label = \"Select place:\", choices = read_dataset()$filter_values,"       
##  [67] "                      selected = \"Luxembourg, Ville (G)\")"                                                                 
##  [68] "  })"                                                                                                                        
##  [69] ""                                                                                                                            
##  [70] "  observe({"                                                                                                                 
##  [71] "    updateSelectInput(session, \"selector_radar\", label = \"Select type of road:\", choices = read_dataset()$filter_values,"
##  [72] "                      selected = \"National road\")"                                                                         
##  [73] "  })"                                                                                                                        
##  [74] ""                                                                                                                            
##  [75] "  result &lt;- reactive({"                                                                                                      
##  [76] "    return_dataset &lt;- read_dataset()$dataset"                                                                                
##  [77] ""                                                                                                                            
##  [78] "    if(\"place\" %in% colnames(return_dataset)){"                                                                            
##  [79] "      return_dataset &lt;- return_dataset %&gt;%"                                                                                  
##  [80] "        filter((!!read_dataset()$variable) %in% input$selector_place)"                                                       
##  [81] ""                                                                                                                            
##  [82] "      result &lt;- list("                                                                                                       
##  [83] "        return_dataset = return_dataset,"                                                                                    
##  [84] "        variable = quo(place)"                                                                                               
##  [85] "      )"                                                                                                                     
##  [86] "    } else {"                                                                                                                
##  [87] "      return_dataset &lt;- return_dataset %&gt;%"                                                                                  
##  [88] "        filter((!!read_dataset()$variable) %in% input$selector_radar)"                                                       
##  [89] ""                                                                                                                            
##  [90] "      result &lt;- list("                                                                                                       
##  [91] "        return_dataset = return_dataset,"                                                                                    
##  [92] "        variable = quo(type_road)"                                                                                           
##  [93] "      )"                                                                                                                     
##  [94] "    }"                                                                                                                       
##  [95] "  })"                                                                                                                        
##  [96] ""                                                                                                                            
##  [97] "  result"                                                                                                                    
##  [98] "}"                                                                                                                           
##  [99] "    "                                                                                                                        
## [100] "## To be copied in the UI"                                                                                                   
## [101] "# mod_load_data_ui(\"load_data_ui_1\")"                                                                                      
## [102] "    "                                                                                                                        
## [103] "## To be copied in the server"                                                                                               
## [104] "# callModule(mod_load_data_server, \"load_data_ui_1\")"                                                                      
## [105] " "</code></pre>
<p>
This scripts looks like a mini Shiny app; there’s a UI defined at the top of the script, and then a server defined at the bottom (I’m not describing what the module does here, I’ll do that in the video). What’s important here, is that this is a module and as such it can be reused in any app, by simply copying the right lines of code at the right spot. See lines 100 to 104 for this, which tells you exactly where to copy the lines to use this module. All the modules will look the same, and have this little explanation at the bottom to tell you where you need to copy the lines to use the modules. While building each module, you can use <code>{shinipsum}</code> instead of having to bother about the server logic, just to get things going, as explained above.
</p>
<p>
Now, finally, let’s take a look at the actual UI of the app:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/R/app_ui.R", stdout = TRUE)</code></pre>
<pre><code>##  [1] "#' The application User-Interface"                                                          
##  [2] "#' "                                                                                        
##  [3] "#' @param request Internal parameter for `{shiny}`. "                                       
##  [4] "#'     DO NOT REMOVE."                                                                      
##  [5] "#' @import shiny"                                                                           
##  [6] "#' @import shinydashboard"                                                                  
##  [7] "#' @noRd"                                                                                   
##  [8] "app_ui &lt;- function(request) {"                                                              
##  [9] "  tagList("                                                                                 
## [10] "                                        # Leave this function for adding external resources"
## [11] "    golem_add_external_resources(),"                                                        
## [12] "                                        # List the first level UI elements here"            
## [13] "    dashboardPage("                                                                         
## [14] "      dashboardHeader(title = \"Prototype: dashboard ecoles\"),"                            
## [15] "      dashboardSidebar("                                                                    
## [16] "        sidebarMenu("                                                                       
## [17] "          menuItem(\"Carte\", tabName = \"Carte\", icon = icon(\"map\")),"                  
## [18] "          menuItem(\"Tab 2\", tabName = \"tab_2\", icon = icon(\"chart-line\"))"            
## [19] "        )"                                                                                  
## [20] "      ),"                                                                                   
## [21] "      dashboardBody("                                                                       
## [22] "        tabItems("                                                                          
## [23] "          tabItem(tabName = \"Carte\","                                                     
## [24] "                  fluidRow("                                                                
## [25] "                    column("                                                                
## [26] "                      width = 4,"                                                           
## [27] "                      mod_load_data_ui(\"load_data_ui_1\"),"                                
## [28] "                      mod_table_data_ui(\"table_data_ui_1\")"                               
## [29] "                    ),"                                                                     
## [30] "                    column("                                                                
## [31] "                      width = 6, offset = 2,"                                               
## [32] "                      mod_map_data_ui(\"map_data_ui_1\")"                                   
## [33] "                    )"                                                                      
## [34] "                  ))"                                                                       
## [35] "        )"                                                                                  
## [36] "      )"                                                                                    
## [37] "    )"                                                                                      
## [38] "  )"                                                                                        
## [39] "}"                                                                                          
## [40] ""                                                                                           
## [41] "#' Add external Resources to the Application"                                               
## [42] "#' "                                                                                        
## [43] "#' This function is internally used to add external "                                       
## [44] "#' resources inside the Shiny application. "                                                
## [45] "#' "                                                                                        
## [46] "#' @import shiny"                                                                           
## [47] "#' @importFrom golem add_resource_path activate_js favicon bundle_resources"                
## [48] "#' @noRd"                                                                                   
## [49] "golem_add_external_resources &lt;- function(){"                                                
## [50] "  "                                                                                         
## [51] "  add_resource_path("                                                                       
## [52] "    'www', app_sys('app/www')"                                                              
## [53] "  )"                                                                                        
## [54] " "                                                                                          
## [55] "  tags$head("                                                                               
## [56] "    favicon(),"                                                                             
## [57] "    bundle_resources("                                                                      
## [58] "      path = app_sys('app/www'),"                                                           
## [59] "      app_title = 'golemDemo'"                                                              
## [60] "    )"                                                                                      
## [61] "    # Add here other external resources"                                                    
## [62] "    # for example, you can add shinyalert::useShinyalert() "                                
## [63] "  )"                                                                                        
## [64] "}"                                                                                          
## [65] ""</code></pre>
<p>
this is the “global” UI of the app. This looks like any other Shiny UI, but instead of having many many lines of code, there’s basically only calls to the UIs of each modules (see lines 27 and 28). And that’s it! It keeps your code quite small and much easier to reason about. You’ll find something even simpler for the server:
</p>
<pre class="r"><code>system2("cat", args = "~/Documents/golemDemo/R/app_server.R", stdout = TRUE)</code></pre>
<pre><code>##  [1] "#' The application server-side"                                              
##  [2] "#' "                                                                         
##  [3] "#' @param input,output,session Internal parameters for {shiny}. "            
##  [4] "#'     DO NOT REMOVE."                                                       
##  [5] "#' @import shiny"                                                            
##  [6] "#' @noRd"                                                                    
##  [7] "app_server &lt;- function( input, output, session ) {"                          
##  [8] "  # List the first level callModules here"                                   
##  [9] ""                                                                            
## [10] "  result &lt;- callModule(mod_load_data_server, \"load_data_ui_1\")"            
## [11] ""                                                                            
## [12] "  callModule(mod_table_data_server, \"table_data_ui_1\", result)"            
## [13] "  "                                                                          
## [14] ""                                                                            
## [15] "  selected_lines &lt;- reactive({"                                              
## [16] "    if(is.null(input$`table_data_ui_1-dataset_rows_selected`)){"             
## [17] "      return(TRUE)"                                                          
## [18] "    } else {"                                                                
## [19] "      as.numeric(input$`table_data_ui_1-dataset_rows_selected`)"             
## [20] "    }"                                                                       
## [21] "  })"                                                                        
## [22] ""                                                                            
## [23] "  callModule(mod_map_data_server, \"map_data_ui_1\", result, selected_lines)"
## [24] ""                                                                            
## [25] "}"</code></pre>
<p>
Line 10 calls the server side of the “load data” module, and saves the result (a data frame) into a variable called <code>result</code>. This result is then passed as an argument to the server side of table data module, which simply shows a table of the data. From lines 15 to 21, I define a variable called <code>selected-lines</code> in which the lines that the user selects in the data table are saved. This gave me some headaches, because I needed to find the right syntax. I was able to find it thanks to a Stackoverflow post that I have now lost since then… but the idea is that the indices of the selected rows are saved into a variable called <code>dataset_rows_selected</code> and this variable name must be appended to the name of the UI of the table where the table is. If no row is selected, then this object should be <code>TRUE</code>; why? Because if you filter a data frame with a condition that simply evaluates always to <code>TRUE</code>, you get all the rows back, and thus, all of the data frame. If you start selecting rows, say, rows number 2, 8 and 12, then <code>dataset_rows_selected</code> will be equal to <code>c(2, 8, 12)</code>, and the filter will return these rows.
</p>
<p>
Finally, I call the module that returns a map of Luxembourg, and pass both the data frame, saved in the <code>result</code> variable, and the <code>selected_lines</code> objects as arguments. And that’s how you make modules communicate and share data with each other, just like you would chain functions together. I won’t go through each module, but there’s several other interesting tricks that I’ll discuss during the video; for instance, I’m quite happy with the module that loads the data; the user can choose between two different dataset, and the select input will update with the right columns. This also wasn’t so easy to do, but it’ll be easier to explain during a video, so stay tuned!
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2020-09-27-golemDemo.html</guid>
  <pubDate>Sun, 27 Sep 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Raspberry Pi 4B as a shiny server</title>
  <link>https://b-rodrigues.github.io/posts/2020-09-20-shiny_raspberry.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=2mSEEHblJqw"> <img src="https://b-rodrigues.github.io/assets/img/virgin_chad.png" title="Not everyone can be a chad shiny dev" width="80%" height="auto"></a>
</p>
</div>
<p>
This blog post will not have any code, but will document how I went from hosting apps on <a href="https://www.shinyapps.io">shinyapps.io</a> to hosting shiny apps on my own server, which is a Raspberry Pi 4B with 8 gigs of ram. First of all, why hosting apps on a Raspberry Pi? And why not continue on <a href="https://www.shinyapps.io">shinyapps.io</a>? Or why not get one of hose nifty droplets on DigitalOcean? Well for two reasons; one is that I wanted to have full control of the server, and learn some basic web dev/web engineering skills that I lacked. These services simplify the process of deploying and hosting a lot, which of course is a good thing if your only goal is to deploy apps. But I wanted to learn how to do it myself from scratch for some time. True, with a DigitalOcean droplet, I could have learned quite a lot about the whole process as well, but there’s a second problem; the minimum amount of processing power that the droplet needed to run shiny came at 10€ a month. Not a fortune, but already quite expensive for me, since I just wanted to learn some stuff on my free time. Which is why I got a Raspberry Pi 4B with 8 gigs of ram. It’s less than 100€, and now that I have it, I can do whatever I want whenever I want to. If I don’t touch it for several months, no harm done. And if I get tired of it, I’ll make a retro console out of it and play some old schools games. It’s a win-win situation if you ask me.
</p>
<p>
So first, you should get a Raspberry Pi. Those are quite easy to find online, and there’s many tutorials available on how to install Ubuntu (or any other Linux distro) on it, so I won’t bother with that. I also won’t explain to you how to ssh into your Raspberry Pi, again, there’s many tutorials online. More importantly, is how to get Shiny on it? There’s two solutions; you either install it from source, or you use Docker. I chose to use Docker, but maybe not in the way you’d expect; there’s a lot of talk online about dockerizing apps, complete with all their dependencies and environment. The advantage is that you’re guaranteed that deployment with be very smooth. But the big disadvantage is that these dockerized apps are huge, around 1GB, or sometimes more. It is true that disk space is quite cheap nowadays, but still… so I prefer to run a Shiny server from Docker, and then run the apps out of this server. My apps are thus very small, and it’s only the Shiny server that is huge. I found a Github repository from user <code>havlev</code> that explains how to do it <a href="https://github.com/hvalev/rpi-shiny-server-docker">here</a>. I have followed this guide, and created my own docker container, which is based on <code>havlev</code>’s one. I added some dependencies (to the base Debian distro included, as well as some more R packages).
</p>
<p>
If you’re in a hurry, and want to use my Docker image, you can simply type the following on your Raspberry pi:
</p>
<pre><code>mkdir shiny-server
cd shiny-server
mkdir apps
mkdir conf
mkdir logs
docker run -d -p 3838:3838 -v shiny-apps:/srv/shiny-server/ -v shiny-logs:/var/log/ -v shiny-conf:/etc/shiny-server/ --name rpi-shiny-server brodriguesco/shiny_1_5:firstcommit</code></pre>
<p>
The first 5 commands will create some folders that we’ll need later on, while the last one will pull my Docker container, which is based on <code>havlev</code>’s one, launch the server and it’ll start listening to port 3838.
</p>
<p>
I made an app (another blog post, focusing on this app, will follow soon), hosted on my Raspberry Pi that you can find <a href="http://shinybrodriguesco.duckdns.org:3838/golemDemo/">here</a>. I’ll also give you some pointers on how you can achieve that.
</p>
<p>
But let’s start from the beginning.
</p>
<section id="adding-dependencies-to-a-docker-container" class="level2">
<h2 class="anchored" data-anchor-id="adding-dependencies-to-a-docker-container">
Adding dependencies to a Docker container
</h2>
<p>
So let’s suppose that you’re me a few weeks ago, and that you find and follow <code>havlev</code>’s guide <a href="https://github.com/hvalev/rpi-shiny-server-docker">here</a>. Getting the docker running is quite easy, you just need to set up Docker, and then find the line in the tutorial that starts with <code>docker run</code>…. You’ll get Shiny running with its hello world app. Now, how can you add more packages, either to the base Debian image, or R packages? For this part, I followed <a href="https://ropenscilabs.github.io/r-docker-tutorial/03-install-packages.html">this guide</a>. The idea is to “log in” to the console of the base Debian distro that is running from the container. First, find the ID of the container by typing the following command in the terminal:
</p>
<pre><code>docker ps</code></pre>
<p>
You should see something like this:
</p>
<pre><code>ubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE                                COMMAND                  CREATED              STATUS              PORTS                    NAMES
69420blazeit        brodriguesco/shiny_1_5:firstcommit   "/etc/shiny-server/i…"   About a minute ago   Up About a minute   0.0.0.0:3838-&gt;3838/tcp   rpi-shiny-server</code></pre>
<p>
now with the ID in hand, you can start any command line program from your Docker container, for instance bash:
</p>
<pre><code>docker exec -it 69420blazeit bash</code></pre>
<p>
You’ll be “logged in” as root:
</p>
<pre><code>root@69420blazeit:/# </code></pre>
<p>
and from there, you can install Debian packages. The following two packages are necessary to install many R packages from source, so I recommend you install them:
</p>
<pre><code>root@69420blazeit:/# apt-get install libssl-dev libxml2-dev</code></pre>
<p>
Once these Debian packages are installed, you can start R by simply typing <code>R</code> in the same console, and install whatever packages your Shiny apps will need. In my case, I installed <code>{golem}</code> and several others, but this will be the subject of another blog post. We’re almost done with that; we now need to save the changes because if you restart the container, you’ll lose all these changes. To save these changes, let’s run the following command, but in a new terminal on your Raspberry Pi (on the “local” Ubuntu, not the Debian running in the container):
</p>
<pre><code>ubuntu@ubuntu:~$ docker commit -m "added some dependencies" 69420blazeit shiny_with_deps</code></pre>
<p>
So now you could run this container with the command from above, by replacing the adequate parts:
</p>
<pre><code>docker run -d -p 3838:3838 -v shiny-apps:/srv/shiny-server/ -v shiny-logs:/var/log/ -v shiny-conf:/etc/shiny-server/ --name rpi-shiny-server shiny_with_depsshiny_with_deps</code></pre>
</section>
<section id="using-your-shiny-server" class="level2">
<h2 class="anchored" data-anchor-id="using-your-shiny-server">
Using your Shiny server
</h2>
<p>
Ok so now that the server is running, you can you deploy apps on it? Remember the folders that we created at the beginning of the blog post (or that you created if you followed <code>havlev</code>’s guide)? This is where you’ll drop your apps, the usual way. You create a folder there, and simply put the <code>ui.R</code> and <code>server.R</code> files in here, and that it. These folders can be found in your <code>$HOME</code> directory, and they are accessible to your docker container as well. Once you dropped one or two apps, you’ll be able to access them on a link similar as this one:
</p>
<pre><code>http://192.168.178.55:3838/hello/</code></pre>
<p>
where <code>192.168.178.55</code> is the local IP address of the Raspberry Pi, <code>3838</code> is the port the server is listening to, and <code>/hello/</code> is the name of the subfolder contained in the <code>~/shiny-server/apps</code> folder that you created before. What is left doing is making your Raspberry Pi a proper server that can be accessed from the internet. For this, you’ll need to ask your ISP for a dynamic IP address. Generally, you’ll have to pay some money for it; in my case, I’m paying 2€ a month. This address can then be used to access your Raspberry Pi from the internet. The problem, is that being dynamic, the address changes every time you restart your server. To solve this issue, you can use a free dynamic DNS. I use <a href="https://www.duckdns.org/">duckdns</a>. This will allow you to have domain that you can share with the world. What’s nice is that if you follow their <a href="https://www.duckdns.org/install.jsp">guide</a> the redirection to the dynamic IP address will happen seamlessly every time it changes, so no need to think about it and do it manually.
</p>
<p>
Finally, you’ll also have to open up port <code>3838</code> on your router. The procedure changes from router to router, but you should be able to find the instructions for your router quite easily. If not, you should also be able to get help from your ISP.
</p>
<p>
The end result is that you’ll have your own Shiny server running off a Raspberry Pi, and accessible over the internet! You’ll be able to deploy as many apps as you want, but of course, don’t forget that you’re running all this on a Raspberry Pi. While these machines have become quite powerful over the years, they won’t be powerful enough if you’re running some heavy duty apps with hundreds of concurrent users.
</p>
<p>
In my next blog post, I’ll walk you through the development of a Shiny app using the <code>{golem}</code> package, which you can find <a href="http://shinybrodriguesco.duckdns.org:3838/golemDemo/">here</a>.
</p>


</section>

 ]]></description>
  <category>R</category>
  <category>programming</category>
  <guid>https://b-rodrigues.github.io/posts/2020-09-20-shiny_raspberry.html</guid>
  <pubDate>Sun, 20 Sep 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Gotta go fast with “{tidytable}”</title>
  <link>https://b-rodrigues.github.io/posts/2020-09-05-tidytable.html</link>
  <description><![CDATA[ 




<script src="../rmarkdown-libs/header-attrs/header-attrs.js"></script>
<div style="text-align:center;">
<p>
<a href="https://www.youtube.com/watch?v=SXrbYw_AqQA"> <img src="https://b-rodrigues.github.io/assets/img/kaamelott.jpg" title="If there's one good reason to learn French, it's Kaamelott" width="80%" height="auto"></a>
</p>
</div>
<p>
I’m back in business! After almost 5 months of hiatus, during which I was very busy with my new job, and new house, I’m in a position where I can write again. To celebrate my comeback, I’ll introduce to you the <code>{tidytable}</code> package, which I learned about this week on Twitter.
</p>
<p>
<code>{tidytable}</code> is a package that allows you to manipulate <code>data.table</code> objects with the speed of <code>{data.table}</code> and the convenience of the <code>{tidyverse}</code> syntax. My first reaction when I heard about <code>{tidytable}</code> was <em>how is that different from <code>{dtplyr}</code></em>? Well, <code>{dtplyr}</code> focuses on providing a <code>{data.table}</code> backend for <code>{dplyr}</code>, while <code>{tidytable}</code> also allows you to use other <code>{tidyverse}</code> verbs on <code>data.table</code> objects, for instance some <code>{tidyr}</code> and <code>{purrr}</code> verbs.
</p>
<p>
Another very interesting feature of <code>{tidytable}</code> is that it supports <code>{rlang}</code>, which means that you can program with <code>{tidytable}</code>, which, as far as I know, is not possible with <code>{dtplyr}</code> (but fact-check me on that please).
</p>
<p>
So to summarise, the speed of <code>{data.table}</code> and the syntax of the <code>{tidyverse}</code>, plus verbs for <code>{tidyr}</code> and <code>{purrr}</code>? Sign me up!
</p>
<p>
To illustrate, I have downloaded a data set and wrote a function in both a <code>{tidyverse}</code> version and a <code>{tidytable}</code> version. Even though it is true that <code>{tidytable}</code>’s syntax is very much, almost the same as the regular <code>{tidyverse}</code> syntax, there are some minor differences. But more on that later. First, let’s get the data, which you can find <a href="https://archive.ics.uci.edu/ml/datasets/Appliances+energy+prediction">here</a>. Then, let’s load the needed packages:
</p>
<pre class="r"><code>library(tidyverse)
library(data.table)
library(tidytable)
library(readr)</code></pre>
<p>
and let’s take a look at the data a little bit:
</p>
<pre class="r"><code>energy &lt;- read.csv("~/Downloads/energydata_complete.csv")

head(energy)</code></pre>
<pre><code>##                  date Appliances lights    T1     RH_1   T2     RH_2    T3
## 1 2016-01-11 17:00:00         60     30 19.89 47.59667 19.2 44.79000 19.79
## 2 2016-01-11 17:10:00         60     30 19.89 46.69333 19.2 44.72250 19.79
## 3 2016-01-11 17:20:00         50     30 19.89 46.30000 19.2 44.62667 19.79
## 4 2016-01-11 17:30:00         50     40 19.89 46.06667 19.2 44.59000 19.79
## 5 2016-01-11 17:40:00         60     40 19.89 46.33333 19.2 44.53000 19.79
## 6 2016-01-11 17:50:00         50     40 19.89 46.02667 19.2 44.50000 19.79
##       RH_3       T4     RH_4       T5  RH_5       T6     RH_6       T7     RH_7
## 1 44.73000 19.00000 45.56667 17.16667 55.20 7.026667 84.25667 17.20000 41.62667
## 2 44.79000 19.00000 45.99250 17.16667 55.20 6.833333 84.06333 17.20000 41.56000
## 3 44.93333 18.92667 45.89000 17.16667 55.09 6.560000 83.15667 17.20000 41.43333
## 4 45.00000 18.89000 45.72333 17.16667 55.09 6.433333 83.42333 17.13333 41.29000
## 5 45.00000 18.89000 45.53000 17.20000 55.09 6.366667 84.89333 17.20000 41.23000
## 6 44.93333 18.89000 45.73000 17.13333 55.03 6.300000 85.76667 17.13333 41.26000
##     T8     RH_8       T9  RH_9    T_out Press_mm_hg RH_out Windspeed Visibility
## 1 18.2 48.90000 17.03333 45.53 6.600000       733.5     92  7.000000   63.00000
## 2 18.2 48.86333 17.06667 45.56 6.483333       733.6     92  6.666667   59.16667
## 3 18.2 48.73000 17.00000 45.50 6.366667       733.7     92  6.333333   55.33333
## 4 18.1 48.59000 17.00000 45.40 6.250000       733.8     92  6.000000   51.50000
## 5 18.1 48.59000 17.00000 45.40 6.133333       733.9     92  5.666667   47.66667
## 6 18.1 48.59000 17.00000 45.29 6.016667       734.0     92  5.333333   43.83333
##   Tdewpoint      rv1      rv2
## 1       5.3 13.27543 13.27543
## 2       5.2 18.60619 18.60619
## 3       5.1 28.64267 28.64267
## 4       5.0 45.41039 45.41039
## 5       4.9 10.08410 10.08410
## 6       4.8 44.91948 44.91948</code></pre>
<p>
As you can see, this data is wide, and not long. Variables, or features, <code>T1</code> to <code>T9</code> provide the temperature of 9 rooms, and <code>RH_1</code> to <code>RH_9</code> provide the humidity of the same 9 rooms.
</p>
<p>
What if I’d like to make a plot of each room’s temperature throughout the year? In this format, it is not possible. So let’s reshape this a little bit:
</p>
<pre class="r"><code>flat_energy &lt;- energy %&gt;% 
  pivot_longer(cols = matches("T\\d{1}"), names_to = "temperature", values_to = "temp_value") %&gt;% 
  pivot_longer(cols = matches("RH_\\d{1}"), names_to = "humidity", values_to = "hum_value") %&gt;%
  mutate(temperature = case_when(temperature == "T1" ~ "kitchen",
                                 temperature == "T2" ~ "living",
                                 temperature == "T3" ~ "laundry",
                                 temperature == "T4" ~ "office",
                                 temperature == "T5" ~ "bathroom",
                                 temperature == "T6" ~ "north",
                                 temperature == "T7" ~ "ironing",
                                 temperature == "T8" ~ "teenager",
                                 temperature == "T9" ~ "parents")) %&gt;%  
  mutate(humidity = case_when(humidity == "RH_1" ~ "kitchen",
                                 humidity == "RH_2" ~ "living",
                                 humidity == "RH_3" ~ "laundry",
                                 humidity == "RH_4" ~ "office",
                                 humidity == "RH_5" ~ "bathroom",
                                 humidity == "RH_6" ~ "north",
                                 humidity == "RH_7" ~ "ironing",
                                 humidity == "RH_8" ~ "teenager",
                              humidity == "RH_9" ~ "parents"))</code></pre>
<p>
As explained above, there are two variables that need this treatment; the temperature, and the humidity levels. In order to plot the average monthly temperature in each room, I need to use <code>tidyr::pivot_longer()</code> (a little side note, I could have used <code>names_to = “room”</code>, instead of <code>“temperature”</code> and <code>“humidity”</code>, but there’s a reason for that. More on it below).
</p>
<p>
Now let’s plot it:
</p>
<pre class="r"><code>flat_energy %&gt;%
  mutate(month = month(date)) %&gt;%  
  group_by(month, temperature) %&gt;%
  summarise(avg_temp = mean(temp_value)) %&gt;%  
  ggplot() +
  geom_line(aes(y = avg_temp, x = month, col = temperature)) +
  brotools::theme_blog()</code></pre>
<pre><code>## `summarise()` regrouping output by 'month' (override with `.groups` argument)</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/tidytable-5-1.png" width="80%" height="auto"> Ok great. But what if I had such a dataset per house for a whole city? How many datasets would that be? And how long would these operations take? The first step I would take if I were in this situation, would be to write a function. I would make it general enough to work with temperature or humidity. Below is this function:
</p>
<pre class="r"><code>prepare_data &lt;- function(energy, variable){

  variable &lt;- enquo(variable)

  variable_label &lt;- as_label(variable)

  regex_selector &lt;- ifelse(variable_label == "temperature",
                           "T\\d{1}",
                           "RH_\\d{1}")
energy %&gt;%
  pivot_longer(cols = matches(regex_selector),
               names_to = variable_label,
               values_to = paste0(variable_label, "_value")) %&gt;%
    mutate(!!(variable) := case_when(grepl("1$", !!(variable)) ~ "kitchen",
                                    grepl("2$", !!(variable)) ~ "living",
                                    grepl("3$", !!(variable)) ~ "laundry",
                                    grepl("4$", !!(variable)) ~ "office",
                                    grepl("5$", !!(variable)) ~ "bathroom",
                                    grepl("6$", !!(variable)) ~ "outside",
                                    grepl("7$", !!(variable)) ~ "ironing",
                                    grepl("8$", !!(variable)) ~ "teenager",
                                    grepl("9$", !!(variable)) ~ "parents")) %&gt;%
  mutate(month = month(date)) %&gt;%  
  group_by(month, !!(variable)) %&gt;%
  summarise(across(.cols = ends_with("_value"),
                   .fns = mean),
            .groups = "drop")
}</code></pre>
<p>
This function does exactly the same thing as above:
</p>
<pre class="r"><code>prepare_data(energy, temperature) %&gt;%
  ggplot() +
  geom_line(aes(y = temperature_value, x = month, col = temperature)) +
  brotools::theme_blog()</code></pre>
<p>
<img src="https://b-rodrigues.github.io/assets/img/tidytable-7-1.png" width="80%" height="auto">
</p>
<p>
As you can see, I have the exact same plot. What’s nice with this function, is that it uses many verbs from the <code>{tidyverse}</code> as well as the tidy eval framework for non-standard evaluation ( which is why I did not use <code>names_to = “room”</code>, I wanted to use the variable label defined with <code>as_label()</code> and see if it works with <code>{tidytable}</code> as well). Ok, so now let’s imagine that I’m happy with this function, but I’d like it to run faster, and because I’m lazy, the less I have to modify it, the happier I am. This is where <code>{tidytable}</code> looks very promising. Let’s rewrite the function to make it work with <code>{tidytable}</code>:
</p>
<pre class="r"><code>prepare_data_dt &lt;- function(energy, variable){

  variable &lt;- enquo(variable)

  variable_label &lt;- as_label(variable)

  regex_selector &lt;- ifelse(variable_label == "temperature",
                           "T\\d{1}",
                           "RH_\\d{1}")
energy %&gt;%
  pivot_longer.(cols = matches(regex_selector),
               names_to = variable_label,
               values_to = paste0(variable_label, "_value")) %&gt;%
    mutate.(!!(variable) := case_when(grepl("1$", !!(variable)) ~ "kitchen",
                                    grepl("2$", !!(variable)) ~ "living",
                                    grepl("3$", !!(variable)) ~ "laundry",
                                    grepl("4$", !!(variable)) ~ "office",
                                    grepl("5$", !!(variable)) ~ "bathroom",
                                    grepl("6$", !!(variable)) ~ "outside",
                                    grepl("7$", !!(variable)) ~ "ironing",
                                    grepl("8$", !!(variable)) ~ "teenager",
                                    grepl("9$", !!(variable)) ~ "parents")) %&gt;%  
  mutate.(month = month(date)) %&gt;%  
  summarise_across.(.cols = ends_with("_value"),
                    .fns = mean,
                    .by = c(month, !!(variable))) %&gt;%  
  ungroup()
}</code></pre>
<p>
As you can see, it’s <em>almost</em> the same thing. <code>{tidytable}</code> verbs end with a <code>‘.’</code> and that’s it. Well almost (again), the biggest difference is how <code>{tidytable}</code> groups by a variable. It’s very similar to how it’s done in <code>{data.table}</code>, by using a <code>.by =</code> argument to verbs that support it, such as <code>summarise_across()</code> (which is also, by the way, another difference with standard <code>{tidyverse}</code> syntax). While I’ll have to remember these, I’d argue that they’re minor differences and if it can make my function run faster, I don’t mind!
</p>
<p>
Now let’s run a little benchmark. But first, let’s define our data as a <code>tidytable</code> object:
</p>
<pre class="r"><code>energy_tidytable &lt;- as_tidytable(energy)</code></pre>
<p>
Now we’re good to go:
</p>
<pre class="r"><code>microbenchmark::microbenchmark(
                  energy %&gt;%
                  prepare_data(temperature),
                  energy_tidytable %&gt;%
                  prepare_data_dt(temperature),
                  times = 10
                )</code></pre>
<pre><code>## Unit: milliseconds
##                                               expr      min       lq     mean
##               energy %&gt;% prepare_data(temperature) 847.9709 849.6671 868.6524
##  energy_tidytable %&gt;% prepare_data_dt(temperature) 820.2051 838.6647 861.9685
##    median       uq      max neval
##  861.0652 880.8200 914.4685    10
##  858.9454 873.3268 936.0147    10</code></pre>
<p>
That is nice! It does indeed run faster, and with only some minor changes to the function! And how about using some more cores to run this function? This can be done using <code>data.table::setDTthreads(n_cores)</code> where <code>n_cores</code> is the number of cores you want to use:
</p>
<pre class="r"><code>data.table::setDTthreads(12)
microbenchmark::microbenchmark(
                  energy %&gt;%
                  prepare_data(temperature),
                  energy_tidytable %&gt;%
                  prepare_data_dt(temperature),
                  times = 10
                )</code></pre>
<pre><code>## Unit: milliseconds
##                                               expr      min       lq     mean
##               energy %&gt;% prepare_data(temperature) 832.9876 840.8000 874.3047
##  energy_tidytable %&gt;% prepare_data_dt(temperature) 829.7937 831.2868 866.4383
##    median       uq      max neval
##  889.2684 898.6861 914.7178    10
##  836.8712 893.0613 997.8511    10</code></pre>
<p>
Maybe surprisingly, it did not run faster. It could very well be that my function does not really lend itself to running in parallel, and the overhead induced by distributing the work to the cpu cores cancels out the gains from running it in parallel. But in any case, this is really looking very interesting. I have not tested the whole package yet, but since the syntax is so similar to the <code>{tidyverse}</code>, you can try really quickly to see if the <code>{tidytable}</code> version of the function runs faster, and if yes, I don’t really see a reason not to use it!
</p>
<p>
Check out the project’s website <a href="https://markfairbanks.github.io/tidytable/index.html">here</a>, and follow the author’s twitter <a href="https://twitter.com/markfairbanks10">here</a>.
</p>



 ]]></description>
  <category>R</category>
  <category>data-science</category>
  <guid>https://b-rodrigues.github.io/posts/2020-09-05-tidytable.html</guid>
  <pubDate>Sat, 05 Sep 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
